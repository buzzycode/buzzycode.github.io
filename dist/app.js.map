{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/angular-ui-router/release/angular-ui-router.js","node_modules/konva/konva.js","static/index.js","static/modules/api/index.js","static/modules/components/aquarium/index.js","static/modules/home/controller.js","static/modules/home/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","angular","undefined","inherit","parent","extra","extend","prototype","merge","dst","forEach","arguments","obj","value","key","hasOwnProperty","ancestors","first","second","path","push","objectKeys","object","Object","keys","result","val","indexOf","array","Array","Number","len","from","Math","ceil","floor","inheritParams","currentParams","newParams","$current","$to","parentParams","parents","inherited","inheritList","params","j","equalForKeys","b","k","filterByKeys","values","filtered","name","pick","copy","concat","apply","slice","omit","filter","collection","callback","isArray","map","silenceUncaughtInPromise","promise","then","$Resolve","$q","$injector","VISIT_IN_PROGRESS","VISIT_DONE","NOTHING","NO_DEPENDENCIES","NO_LOCALS","NO_PARENT","when","$$promises","$$values","this","study","invocables","visit","visited","cycle","splice","join","isString","plan","get","annotate","param","pop","isResolve","isObject","invocableKeys","locals","self","done","wait","merged","$$inheritedValues","resolution","resolve","fail","reason","$$failure","reject","invoke","invocable","onfailure","invocation","proceed","isDefined","defer","waitParams","dep","promises","ii","$TemplateFactory","$http","$templateCache","fromConfig","config","template","fromString","templateUrl","fromUrl","templateProvider","fromProvider","isFunction","url","cache","headers","Accept","response","data","provider","UrlMatcher","pattern","parentMatcher","addParameter","id","type","location","paramNames","test","$$UMFP","Param","quoteRegExp","string","squash","optional","surroundPattern","replace","matchDetails","m","isSearch","regexp","segment","cfg","substring","last","index","RegExp","caseInsensitive","placeholder","searchPlaceholder","compiled","segments","$$new","ParamSet","source","p","exec","isOptional","lastIndex","search","sourceSearch","sourcePath","strict","prefix","$$paramNames","Type","$UrlMatcherFactory","valToString","toString","~","/","valFromString","~~","~2F","getDefaultConfig","isStrictMode","isCaseInsensitive","isInjectable","flushTypeQueue","typeQueue","shift","$types","injector","def","defaultSquashPolicy","enqueue","defaultTypes","encode","decode","is","int","parseInt","bool","date","getFullYear","getMonth","getDate","match","capture","Date","isNaN","valueOf","equals","toISOString","json","toJson","fromJson","any","identity","$$getDefaultValue","strictMode","compile","isMatcher","definition","definitionFn","$get","unwrapShorthand","isShorthand","$$fn","getType","urlType","getArrayMode","arrayDefaults","arrayParamNomenclature","getSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","to","item","defaultValue","$value","hasReplaceVal","$replace","replacement","$normalize","$asArray","dynamic","$$parent","$$keys","chain","ignore","reverse","paramset","paramValues","$$equals","paramValues1","paramValues2","equal","left","right","$$validates","rawVal","normalized","encoded","$UrlRouterProvider","$locationProvider","$urlMatcherFactory","regExpPrefix","re","interpolate","what","handleIfMatch","handler","$match","$location","$rootScope","$browser","$sniffer","appendBasePath","isHtml5","absolute","baseHref","update","evt","check","rule","handled","defaultPrevented","lastPushedUrl","rules","otherwise","listen","listener","$on","interceptDeferred","sync","read","urlMatcher","options","format","$$avoidResync","href","validates","html5Mode","enabled","history","hashPrefix","slash","port","protocol","host","redirect","handlerIsString","strategies","matcher","regex","global","sticky","deferIntercept","$inject","$StateProvider","$urlRouterProvider","isRelative","stateName","findState","stateOrName","base","isStr","rel","split","pathLength","current","state","states","queueState","parentName","queue","flushQueuedChildren","queued","registerState","lastIndexOf","stateBuilder","$delegates","abstractKey","$stateParams","$state","navigable","transitionTo","isGlob","text","doesStateMatchGlob","glob","globSegments","unshift","MAX_VALUE","decorator","func","$view","$resolve","$urlRouter","handleRedirect","$broadcast","TransitionAborted","retry","$retry","TransitionFailed","retryTransition","transition","toParams","TransitionSuperseded","resolveState","paramsAreFiltered","resolveViews","viewsPromises","views","view","injectables","$template","load","globals","notify","controllerProvider","injectLocals","$$controller","controller","$$state","$$controllerAs","controllerAs","$$resolveAs","resolveAs","all","TransitionSupersededError","TransitionPrevented","root","reload","go","relative","fromParams","fromPath","toState","hash","redirectResult","toPath","keep","toLocals","reloadState","ownParams","shouldSkipReload","resolved","entering","exiting","onExit","onEnter","error","includes","paramDef","lossy","nav","context","nonSearchParamsEqual","fromAndToState","notSearchParam","nonQueryParamKeys","nonQueryParams","nonQueryParamSet","reloadOnSearch","compositeName","charAt","","abstract","$ViewProvider","$templateFactory","defaults","async","$ViewScrollProvider","useAnchorScroll","$anchorScroll","$timeout","$element","scrollIntoView","$ViewDirective","$uiViewScroll","$interpolate","getService","service","has","getRenderer","attrs","scope","statics","enter","element","target","cb","after","leave","remove","$animate","version","minor","$animator","animate","directive","restrict","terminal","priority","transclude","tElement","tAttrs","$transclude","cleanupLastView","previousEl","currentScope","$destroy","currentEl","$uiViewData","renderer","$$animLeave","updateView","firstTime","newScope","getUiViewName","previousLocals","latestLocals","$new","$emit","clone","animEnter","animLeave","viewAnimData","$animEnter","$animLeave","autoScrollExp","$eval","onloadExp","onload","autoscroll","inheritedData","$ViewDirectiveFill","$compile","$controller","initial","html","resolveData","link","contents","$scope","$onInit","children","uiView","uiViewCreatedBy","parseStateRef","ref","parsed","preparsed","paramExpr","stateContext","el","stateData","getTypeInfo","isSvg","prop","isForm","nodeName","attr","isAnchor","toUpperCase","clickable","clickHook","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","$StateRefDirective","uiSrefActive","hookFn","uiSref","active","unlinkInfoFn","uiSrefOpts","$$addStateInfo","$set","$watch","on","off","$StateRefDynamicDirective","runStateRefLink","group","uiState","uiStateParams","uiStateOpts","watch","$StateRefActiveDirective","$attrs","addState","stateParams","activeClass","stateHash","createStateHash","stateInfo","activeClasses","idx","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","deregister","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","defaultConfig","searchParams","decodePathArray","reverseString","str","unquoteDashes","allReversed","paramName","parameters","nTotal","nPath","paramVal","encodeDashes","encodeURIComponent","c","charCodeAt","isPathParam","isDefaultValue","nextSegment","isFinalPathParam","$subPattern","sub","substr","mode","ArrayType","bindTo","callbackName","arrayWrap","arrayUnwrap","falsey","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","$arrayMode","run","factory","constant","autoinject","PI_OVER_180","PI","Konva","stages","idCounter","ids","names","shapes","listenClickTap","inDblClickWindow","enableTrace","traceArrMax","dblClickWindow","pixelRatio","dragDistance","angleDeg","showWarnings","Filters","isDragging","dd","DD","isDragReady","node","_addId","_removeId","_addName","_removeName","_id","nodes","no","getAngle","angle","_detectIE","ua","msie","trident","rv","edge","_parseUA","userAgent","toLowerCase","mobile","ieMobile","browser","isIE","UA","WorkerGlobalScope","navigator","console","document","Canvas","jsdom","defaultView","Image","_nodeCanvas","define","amd","Collection","args","each","toArray","arr","toCollection","_mapMethod","methodName","mapMethods","constructor","prot","Transform","point","x","y","translate","scale","sx","sy","rotate","rad","cos","sin","m11","m12","m21","m22","getTranslation","skew","multiply","matrix","dx","dy","invert","d","m0","m1","m2","m3","m4","m5","getMatrix","setAbsolutePosition","yt","xt","CONTEXT_2D","OBJECT_ARRAY","OBJECT_NUMBER","OBJECT_STRING","PI_OVER_DEG180","DEG180_OVER_PI","HASH","EMPTY_STRING","ZERO","KONVA_WARNING","KONVA_ERROR","RGB_PAREN","COLORS","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","transparent","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","RGB_REGEX","Util","_isElement","nodeType","_isFunction","_isObject","_isArray","_isNumber","_isString","_throttle","opts","timeout","previous","later","leading","getTime","now","remaining","clearTimeout","trailing","setTimeout","_hasMethods","isValidSelector","selector","firstChar","createCanvasElement","canvas","createElement","style","isBrowser","_isInDocument","parentNode","_simplifyArray","retArr","util","round","_getImage","arg","imageObj","src","width","height","_context","getContext","putImageData","toDataURL","_getRGBAString","alpha","_rgbToHex","g","_hexToRgb","hex","bigint","getRandomColor","randColor","random","getRGB","color","rgb","colorToRGBA","_namedColorToRBA","_hex3ColorToRGBA","_hex6ColorToRGBA","_rgbColorToRGBA","_rgbaColorToRGBA","parts","_merge","o1","o2","retObj","_clone","cloneObject","cloneArray","_degToRad","deg","_radToDeg","_capitalize","throw","warn","child","Ctor","oldProto","__super__","super","addMethods","methods","_getControlPoints","x0","y0","x1","y1","x2","y2","d01","sqrt","pow","d12","fa","fb","p1x","p1y","p2x","p2y","_expandPoints","tension","cp","allPoints","_removeLastLetter","_getProjectionToSegment","x3","y3","dist","pd2","_getProjectionToLine","pt","line","isClosed","pc","p1","p2","proj","px","py","pdist","_prepareArrayForTween","startArray","endArray","start","end","temp","newStart","pr","_prepareToStringify","desc","visitedByCircularReferenceRemoval","getOwnPropertyDescriptor","configurable","_pixelRatio","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","init","conf","_canvas","padding","margin","border","background","position","top","getPixelRatio","setPixelRatio","previousRatio","setSize","getWidth","getHeight","setWidth","setHeight","mimeType","quality","err","message","SceneCanvas","SceneContext","HitCanvas","HitContext","hitCanvas","COMMA","OPEN_PAREN","CLOSE_PAREN","OPEN_PAREN_BRACKET","CLOSE_BRACKET_PAREN","SEMICOLON","DOUBLE_PAREN","EQUALS","CONTEXT_METHODS","CONTEXT_PROPERTIES","Context","traceArr","_enableTrace","fillShape","shape","getFillEnabled","_fill","strokeShape","getStrokeEnabled","_stroke","fillStrokeShape","fillEnabled","getTrace","relaxed","trace","method","property","clearTrace","_trace","reset","getCanvas","setTransform","clear","bounds","clearRect","_applyLineCap","lineCap","getLineCap","setAttr","_applyOpacity","absOpacity","getAbsoluteOpacity","_applyLineJoin","lineJoin","getLineJoin","arc","beginPath","bezierCurveTo","clip","closePath","createImageData","createLinearGradient","createPattern","createRadialGradient","drawImage","isPointInPath","fill","fillRect","strokeRect","fillText","measureText","getImageData","lineTo","moveTo","rect","quadraticCurveTo","restore","save","setLineDash","mozDash","webkitLineDash","getLineDash","stroke","strokeText","transform","that","origSetter","ret","origMethod","defineProperty","set","_fillColor","_fillFunc","_fillPattern","fillPatternX","getFillPatternX","fillPatternY","getFillPatternY","fillPatternScale","getFillPatternScale","fillPatternRotation","getFillPatternRotation","fillPatternOffset","getFillPatternOffset","getFillPatternImage","getFillPatternRepeat","_fillLinearGradient","getFillLinearGradientStartPoint","getFillLinearGradientEndPoint","colorStops","getFillLinearGradientColorStops","grd","addColorStop","_fillRadialGradient","getFillRadialGradientStartPoint","getFillRadialGradientEndPoint","startRadius","getFillRadialGradientStartRadius","endRadius","getFillRadialGradientEndRadius","getFillRadialGradientColorStops","hasColor","hasPattern","hasLinearGradient","hasRadialGradient","fillPriority","getFillPriority","dash","strokeScaleEnabled","getStrokeScaleEnabled","Text","hasStroke","dashEnabled","strokeWidth","getShadowForStrokeEnabled","_strokeFunc","_applyShadow","getShadowRGBA","blur","getShadowBlur","offset","getShadowOffset","getAbsoluteScale","scaleX","scaleY","colorKey","_fillFuncHit","strokeHitEnabled","_strokeFuncHit","GET","SET","Factory","addGetterSetter","validator","addGetter","addSetter","addOverloadedGetterSetter","_setAttr","addComponentsGetterSetter","components","component","capitalize","getter","setter","getAttr","oldVal","_fireChangeEvent","capitalizedAttr","addDeprecatedGetterSetter","backCompat","oldMethodName","newMethodName","afterSetFilter","_filterUpToDate","Validators","RGBComponent","alphaComponent","ABSOLUTE_OPACITY","ABSOLUTE_TRANSFORM","ABSOLUTE_SCALE","CHANGE","CHILDREN","DOT","ID","KONVA","LISTENING","MOUSEENTER","MOUSELEAVE","NAME","SHAPE","SPACE","STAGE","TRANSFORM","UPPER_STAGE","VISIBLE","CLONE_BLACK_LIST","TRANSFORM_CHANGE_STR","SCALE_CHANGE_STR","Node","_init","eventListeners","_cache","setAttrs","_clearCache","_clearSelfAndDescendantCache","_getCache","privateGetter","getChildren","clearCache","getClientRect","drawBorder","cachedSceneCanvas","cachedFilterCanvas","cachedHitCanvas","sceneContext","hitContext","isCache","drawScene","drawHit","scene","hit","_transformedRect","minX","minY","maxX","maxY","points","trans","getTransform","transformed","min","max","_drawCachedSceneCanvas","cacheCanvas","_getCachedSceneCanvas","ratio","_drawCachedHitCanvas","cachedCanvas","imageData","filters","sceneCanvas","filterCanvas","filterContext","evtStr","_delegate","event","baseEvent","events","_off","dispatchEvent","fire","addEventListener","removeEventListener","stopNode","targets","findAncestors","currentTarget","getParent","_setChildrenIndices","destroy","getId","getName","getAncestors","getAttrs","isListening","_isListening","listening","getListening","isVisible","_isVisible","visible","getVisible","shouldDrawHit","layer","getLayer","hitGraphEnabled","show","setVisible","hide","getZIndex","getAbsoluteZIndex","addChildren","getDepth","depth","getStage","setPosition","pos","setX","setY","getPosition","getX","getY","getAbsolutePosition","absoluteMatrix","getAbsoluteTransform","absoluteTransform","it","origTrans","_clearTransform","_setTransform","rotation","getRotation","getScaleX","getScaleY","offsetX","getOffsetX","offsetY","getOffsetY","skewX","getSkewX","skewY","getSkewY","move","change","changeX","changeY","_eachAncestorReverse","family","theta","setRotation","moveToTop","moveUp","moveDown","moveToBottom","setZIndex","zIndex","_getAbsoluteOpacity","getOpacity","newContainer","add","toObject","getClassName","toJSON","JSON","stringify","includeSelf","res","_isMatch","ancestor","findAncestor","sel","selectorArr","hasName","_get","_getStage","eventType","bubble","_fireAndBubble","_fire","_getAbsoluteTransform","transformsEnabled","at","_getAbsoluteScale","_getTransform","allListeners","blockAttr","stage","toImage","img","size","getSize","getDragDistance","evtName","evtListeners","newVal","setId","oldId","setName","subname","oldNames","newNames","addName","oldName","newName","removeName","_setComponentAttr","compareShape","okayToRun","isAncestorOf","stopBubble","cancelBubble","draw","create","container","parse","_createNode","rotateDeg","setRotationDeg","getRotationDeg","Grayscale","brightness","Brighten","Invert","BlurStack","next","filterGaussBlurRGBA","radius","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pg","pb","pa","rbs","pixels","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","stackEnd","stack","stackIn","stackOut","mul_sum","mul_table","shg_sum","shg_table","Blur","blurRadius","pixelAt","idata","rgbDistance","rgbMean","pTab","backgroundMask","threshold","rgbv_no","rgbv_ne","rgbv_so","rgbv_se","thres","mean","mask","applyMask","erodeMask","sw","sh","weights","side","halfSide","maskResult","so","cy","cx","scy","scx","srcOff","wt","dilateMask","smoothEdgeMask","Mask","RGB","nPixels","RGBA","ia","HSV","v","saturation","h","abs","hue","vsu","vsw","rr","rg","rb","gr","gg","gb","br","bg","bb","HSL","luminance","Emboss","strength","embossStrength","greyLevel","embossWhiteLevel","direction","embossDirection","blend","embossBlend","dirY","dirX","w","w4","otherY","offsetYOther","otherX","offsetOther","dR","dG","dB","dif","absDif","absG","absB","remap","fromValue","fromMin","fromMax","toMin","toMax","toValue","fromRange","toRange","Enhance","nSubPixels","rMin","rMax","gMin","gMax","bMin","bMax","enhanceAmount","enhance","rMid","rGoalMax","rGoalMin","gMid","gGoalMax","gGoalMin","bMid","bGoalMax","bGoalMin","Posterize","levels","Noise","amount","noise","half","Pixelate","xBinStart","xBinEnd","yBinStart","yBinEnd","xBin","yBin","pixelsInBin","pixelSize","nBinsX","nBinsY","Threshold","level","Sepia","or","og","ob","Solarize","ToPolar","opt","srcPixels","dstPixels","xSize","ySize","xMid","polarCenterX","yMid","polarCenterY","rSize","tSize","conversion","FromPolar","phaseShift","polarRotation","atan2","tempCanvas","Kaleidoscope","xoff","srcPos","dstPos","power","kaleidoscopePower","kaleidoscopeAngle","scratchData","minSectionSize","sectionSize","xStart","xEnd","xDelta","Container","__init","filterFunc","results","hasChildren","removeChildren","destroyChildren","_validateAdd","anim","setLayers","find","clen","_getNodeById","_getNodesByName","findOne","_getDescendants","getAllIntersections","intersects","can","caching","_applyTransform","_drawChildren","clearHitCache","drawMethod","skipBuffer","clipX","clipY","clipWidth","getClipWidth","clipHeight","getClipHeight","clipFunc","getClipFunc","hasClip","getClipX","getClipY","layerUnderDrag","getLayers","skipTransform","selfRect","_clearHasShadowCache","HAS_SHADOW","_clearGetShadowRGBACache","SHADOW_RGBA","Shape","hasShadow","_hasShadow","getShadowEnabled","getShadowOpacity","getShadowColor","getShadowOffsetX","getShadowOffsetY","_getShadowRGBA","rgba","shadowColor","hasFill","getFill","strokeEnabled","bufferHitCanvas","_useBufferCanvas","perfectDrawEnabled","getSelfRect","_centroid","fillAndStrokeWidth","fillAndStrokeHeight","shadowOffsetX","shadowOffsetY","preWidth","preHeight","shadowBlur","roundingOffset","bufferCanvas","bufferContext","drawFunc","sceneFunc","hitFunc","drawHitFromCache","alphaThreshold","hitImageData","hitData","rgbColorKey","hitWidth","hitHeight","dashArray","getDashArray","setDashArray","getDrawFunc","setDrawFunc","drawHitFunc","getDrawHitFunc","setDrawHitFunc","addEvent","ctx","eventName","content","UNDERSCORE","STRING","PX","MOUSEOUT","MOUSEOVER","MOUSEMOVE","MOUSEDOWN","MOUSEUP","CLICK","DBL_CLICK","TOUCHSTART","TOUCHEND","TAP","DBL_TAP","TOUCHMOVE","DOMMOUSESCROLL","MOUSEWHEEL","WHEEL","CONTENT_MOUSEOUT","CONTENT_MOUSEOVER","CONTENT_MOUSEMOVE","CONTENT_MOUSEDOWN","CONTENT_MOUSEUP","CONTENT_CLICK","CONTENT_DBL_CLICK","CONTENT_TOUCHSTART","CONTENT_TOUCHEND","CONTENT_DBL_TAP","CONTENT_TAP","CONTENT_TOUCHMOVE","CONTENT_WHEEL","DIV","RELATIVE","KONVA_CONTENT","CONTAINER","EVENTS","eventsLength","Stage","___init","_buildDOM","_bindContentEvents","_enableNestedTransforms","setContainer","getElementsByClassName","getElementById","_resizeDOM","layers","getContainer","removeChild","getPointerPosition","pointerPos","getContent","dataUrl","getIntersection","_setCanvasSize","appendChild","_mouseover","_setPointerPosition","_mouseout","targetShape","_mousemove","_touchmove","movementX","movementY","_mousedown","_touchstart","clickStartShape","_mouseup","_touchend","fireDblClick","justDragged","tapStartShape","_DOMMouseScroll","_mousewheel","_wheel","contentPosition","_getContentPosition","touches","touch","clientX","clientY","getBoundingClientRect","innerHTML","setAttribute","_onContent","typesStr","types","BaseLayer","createPNGStream","getHitCanvas","_hitImageData","insertBefore","moved","BEFORE_DRAW","DRAW","INTERSECTION_OFFSETS","INTERSECTION_OFFSETS_LEN","Layer","____init","intersectionOffset","spiralSearchDistance","continueSearch","_getIntersection","antialiased","_getImageData","p3","getClearBeforeDraw","display","enableHitGraph","setHitGraphEnabled","disableHitGraph","FastLayer","Group","FRAF","requestAnimFrame","RAF","performance","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Animation","Anim","animIdCounter","frame","time","timeDiff","lastTime","lays","addLayer","isRunning","animations","stop","_addAnimation","_removeAnimation","_updateFrameObject","frameRate","animRunning","_handleAnimation","_runFrames","layersLen","needRedraw","layerHash","_animationLoop","batchDraw","batchAnim","lastBatchDrawTime","blacklist","duration","easing","onFinish","yoyo","PAUSED","PLAYING","REVERSING","colorAttrs","Tween","propFunc","begin","finish","_pos","_change","prevPos","_time","_position","_startTime","_finish","pause","setTime","play","getTimer","onEnterFrame","seek","nodeId","Easings","Linear","tween","_tweenFunc","_addListeners","tweens","_addAttr","onReset","diff","tweenId","trueEnd","trueStart","closed","endRGBA","onPlay","onReverse","onPause","thisId","BackEaseIn","BackEaseOut","BackEaseInOut","ElasticEaseIn","asin","ElasticEaseOut","ElasticEaseInOut","BounceEaseOut","BounceEaseIn","BounceEaseInOut","EaseIn","EaseOut","EaseInOut","StrongEaseIn","StrongEaseOut","StrongEaseInOut","dirty","_drag","distance","startPointerPos","_setDragPosition","_endDragBefore","dragEndNode","_endDragAfter","startDrag","ap","stopDrag","dbf","getDragBoundFunc","newNodePos","_lastPos","setDraggable","draggable","_dragChange","origDestroy","_listenDrag","_dragCleanup","documentElement","Rect","_sceneFunc","cornerRadius","getCornerRadius","PIx2","CIRCLE","Circle","getRadius","setRadius","ELLIPSE","Ellipse","rx","getRadiusX","ry","getRadiusY","Ring","getInnerRadius","getOuterRadius","outerRadius","setOuterRadius","Wedge","getClockwise","getAngleDeg","setAngleDeg","Arc","clockwise","IMAGE","_hitFunc","cropWidth","cropHeight","image","getImage","getCropWidth","getCropHeight","getCropX","getCropY","fromURL","partialText","AUTO","CENTER","CHANGE_KONVA","DASH","LEFT","TEXT","TEXT_UPPER","MIDDLE","NORMAL","PX_SPACE","RIGHT","WORD","CHAR","NONE","ATTR_CHANGE_LIST","attrChangeListLen","dummyContext","fillLinearGradientColorStops","fillRadialGradientColorStops","_setTextData","getPadding","textHeight","getTextHeight","lineHeightPx","getLineHeight","textArr","textArrLen","totalWidth","_getContextFont","getAlign","setText","isAuto","getTextWidth","textWidth","_getTextSize","metrics","fontSize","getFontSize","font","getFontStyle","getFontFamily","getFontVariant","_addTextLine","_getTextWidth","lines","getText","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","getWrap","shouldWrap","wrapAtWord","lineWidth","low","high","matchWidth","mid","substrWidth","wrapIndex","Line","tp","getPoints","getTension","getClosed","getTensionPoints","_getTensionPoints","_getTensionPointsClosed","firstControlPoints","lastControlPoints","middle","Sprite","_updated","updated","frameIndex","clearInterval","interval","_setInterval","getAnimation","ix4","getAnimations","offsets","frameOffsets","ix2","setInterval","_updateIndex","getFrameRate","animation","getIndex","setIndex","Path","dataArray","parsePathData","getData","ca","command","dTheta","psi","fs","getLineLength","getPointOnLine","P1x","P1y","P2x","P2y","fromX","fromY","rise","ix","iy","pRise","pRun","getPointOnCubicBezier","pct","P3x","P3y","P4x","P4y","CB1","CB2","CB3","CB4","getPointOnQuadraticBezier","QB1","QB2","QB3","getPointOnEllipticalArc","cosPsi","sinPsi","cs","cc","cpx","cpy","parseFloat","prevCmd","ctlPtx","ctlPty","cmd","startX","startY","convertEndpointToCenterParameterization","calcLength","inc","psiDeg","xp","lambda","cxp","cyp","vMag","vRatio","vAngle","acos","TextPath","dummyCanvas","getTextBaseline","glyphInfo","p0","letterSpacing","getLetterSpacing","pathCmd","charArr","pIndex","currentT","getNextPathSegment","pathData","findSegmentToFitCharacter","glyphWidth","currLen","attempts","cumulativePathLength","needNewSegment","kern","midpoint","transposeX","transposeY","info","RegularPolygon","sides","Star","innerRadius","numPoints","UP","DOWN","LABEL","Label","_sync","getTag","pointerDirection","pointerWidth","pointerHeight","tag","getPointerDirection","getPointerWidth","getPointerHeight","Tag","Arrow","PI2","radians","pointerLength","pointerAtBeginning","app","Routes","$stateProvider","route","PageMeta","ctrl","title","setTitle","meta","api","deferred","quote","catch","_posts","PAGE_SIZE","currentPage","posts","fetch","log","loadMore","newPosts","getRandom","number","getRandomInRange","getRandomNumber","fn","$interval","AquariumUtil","addStars","stars","star","xMax","yMax","opacity","shadowOffset","shadowOpacity","startScale","initialise","containerId","offsetWidth","offsetHeight","startCycle","intervalId","addBackground","kImage","vm","$postLink","$onDestroy","HomeController","$log","QuoteFactory","PostStore"],"mappings":"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AAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAGAE,GACA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GACA,GAAA,GAAA,GAAA,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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * State-based routing for AngularJS\n * @version v0.3.2\n * @link http://angular-ui.github.com/\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'ui.router';\n}\n\n(function (window, angular, undefined) {\n/*jshint globalstrict:true*/\n/*global angular:false*/\n'use strict';\n\nvar isDefined = angular.isDefined,\n    isFunction = angular.isFunction,\n    isString = angular.isString,\n    isObject = angular.isObject,\n    isArray = angular.isArray,\n    forEach = angular.forEach,\n    extend = angular.extend,\n    copy = angular.copy,\n    toJson = angular.toJson;\n\nfunction inherit(parent, extra) {\n  return extend(new (extend(function() {}, { prototype: parent }))(), extra);\n}\n\nfunction merge(dst) {\n  forEach(arguments, function(obj) {\n    if (obj !== dst) {\n      forEach(obj, function(value, key) {\n        if (!dst.hasOwnProperty(key)) dst[key] = value;\n      });\n    }\n  });\n  return dst;\n}\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n  var path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * IE8-safe wrapper for `Object.keys()`.\n *\n * @param {Object} object A JavaScript object.\n * @return {Array} Returns the keys of the object as an array.\n */\nfunction objectKeys(object) {\n  if (Object.keys) {\n    return Object.keys(object);\n  }\n  var result = [];\n\n  forEach(object, function(val, key) {\n    result.push(key);\n  });\n  return result;\n}\n\n/**\n * IE8-safe wrapper for `Array.prototype.indexOf()`.\n *\n * @param {Array} array A JavaScript array.\n * @param {*} value A value to search the array for.\n * @return {Number} Returns the array index value of `value`, or `-1` if not present.\n */\nfunction indexOf(array, value) {\n  if (Array.prototype.indexOf) {\n    return array.indexOf(value, Number(arguments[2]) || 0);\n  }\n  var len = array.length >>> 0, from = Number(arguments[2]) || 0;\n  from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n\n  if (from < 0) from += len;\n\n  for (; from < len; from++) {\n    if (from in array && array[from] === value) return from;\n  }\n  return -1;\n}\n\n/**\n * Merges a set of parameters with all parameters inherited between the common parents of the\n * current state and a given destination state.\n *\n * @param {Object} currentParams The value of the current state parameters ($stateParams).\n * @param {Object} newParams The set of parameters which will be composited with inherited params.\n * @param {Object} $current Internal definition of object representing the current state.\n * @param {Object} $to Internal definition of object representing state to transition to.\n */\nfunction inheritParams(currentParams, newParams, $current, $to) {\n  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n  for (var i in parents) {\n    if (!parents[i] || !parents[i].params) continue;\n    parentParams = objectKeys(parents[i].params);\n    if (!parentParams.length) continue;\n\n    for (var j in parentParams) {\n      if (indexOf(inheritList, parentParams[j]) >= 0) continue;\n      inheritList.push(parentParams[j]);\n      inherited[parentParams[j]] = currentParams[parentParams[j]];\n    }\n  }\n  return extend({}, inherited, newParams);\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nfunction equalForKeys(a, b, keys) {\n  if (!keys) {\n    keys = [];\n    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility\n  }\n\n  for (var i=0; i<keys.length; i++) {\n    var k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\n/**\n * Returns the subset of an object, based on a list of keys.\n *\n * @param {Array} keys\n * @param {Object} values\n * @return {Boolean} Returns a subset of `values`.\n */\nfunction filterByKeys(keys, values) {\n  var filtered = {};\n\n  forEach(keys, function (name) {\n    filtered[name] = values[name];\n  });\n  return filtered;\n}\n\n// like _.indexBy\n// when you know that your index values will be unique, or you want last-one-in to win\nfunction indexBy(array, propName) {\n  var result = {};\n  forEach(array, function(item) {\n    result[item[propName]] = item;\n  });\n  return result;\n}\n\n// extracted from underscore.js\n// Return a copy of the object only containing the whitelisted properties.\nfunction pick(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  forEach(keys, function(key) {\n    if (key in obj) copy[key] = obj[key];\n  });\n  return copy;\n}\n\n// extracted from underscore.js\n// Return a copy of the object omitting the blacklisted properties.\nfunction omit(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  for (var key in obj) {\n    if (indexOf(keys, key) == -1) copy[key] = obj[key];\n  }\n  return copy;\n}\n\nfunction pluck(collection, key) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = isFunction(key) ? key(val) : val[key];\n  });\n  return result;\n}\n\nfunction filter(collection, callback) {\n  var array = isArray(collection);\n  var result = array ? [] : {};\n  forEach(collection, function(val, i) {\n    if (callback(val, i)) {\n      result[array ? result.length : i] = val;\n    }\n  });\n  return result;\n}\n\nfunction map(collection, callback) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = callback(val, i);\n  });\n  return result;\n}\n\n// issue #2676 #2889\nfunction silenceUncaughtInPromise (promise) {\n  return promise.then(undefined, function() {}) && promise;\n}\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n * \n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n * \n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n * \n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n * \n * ## The main module for ui.router \n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes. \n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router - \n * \n * *You'll need to include **only** this module as the dependency within your angular app.*\n * \n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.state']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * @ngdoc object\n * @name ui.router.util.$resolve\n *\n * @requires $q\n * @requires $injector\n *\n * @description\n * Manages resolution of (acyclic) graphs of promises.\n */\n$Resolve.$inject = ['$q', '$injector'];\nfunction $Resolve(  $q,    $injector) {\n  \n  var VISIT_IN_PROGRESS = 1,\n      VISIT_DONE = 2,\n      NOTHING = {},\n      NO_DEPENDENCIES = [],\n      NO_LOCALS = NOTHING,\n      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });\n  \n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#study\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Studies a set of invocables that are likely to be used multiple times.\n   * <pre>\n   * $resolve.study(invocables)(locals, parent, self)\n   * </pre>\n   * is equivalent to\n   * <pre>\n   * $resolve.resolve(invocables, locals, parent, self)\n   * </pre>\n   * but the former is more efficient (in fact `resolve` just calls `study` \n   * internally).\n   *\n   * @param {object} invocables Invocable objects\n   * @return {function} a function to pass in locals, parent and self\n   */\n  this.study = function (invocables) {\n    if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");\n    var invocableKeys = objectKeys(invocables || {});\n    \n    // Perform a topological sort of invocables to build an ordered plan\n    var plan = [], cycle = [], visited = {};\n    function visit(value, key) {\n      if (visited[key] === VISIT_DONE) return;\n      \n      cycle.push(key);\n      if (visited[key] === VISIT_IN_PROGRESS) {\n        cycle.splice(0, indexOf(cycle, key));\n        throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));\n      }\n      visited[key] = VISIT_IN_PROGRESS;\n      \n      if (isString(value)) {\n        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);\n      } else {\n        var params = $injector.annotate(value);\n        forEach(params, function (param) {\n          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);\n        });\n        plan.push(key, value, params);\n      }\n      \n      cycle.pop();\n      visited[key] = VISIT_DONE;\n    }\n    forEach(invocables, visit);\n    invocables = cycle = visited = null; // plan is all that's required\n    \n    function isResolve(value) {\n      return isObject(value) && value.then && value.$$promises;\n    }\n    \n    return function (locals, parent, self) {\n      if (isResolve(locals) && self === undefined) {\n        self = parent; parent = locals; locals = null;\n      }\n      if (!locals) locals = NO_LOCALS;\n      else if (!isObject(locals)) {\n        throw new Error(\"'locals' must be an object\");\n      }       \n      if (!parent) parent = NO_PARENT;\n      else if (!isResolve(parent)) {\n        throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");\n      }\n      \n      // To complete the overall resolution, we have to wait for the parent\n      // promise and for the promise for each invokable in our plan.\n      var resolution = $q.defer(),\n          result = resolution.promise,\n          promises = result.$$promises = {},\n          values = extend({}, locals),\n          wait = 1 + plan.length/3,\n          merged = false;\n          \n      function done() {\n        // Merge parent values we haven't got yet and publish our own $$values\n        if (!--wait) {\n          if (!merged) merge(values, parent.$$values); \n          result.$$values = values;\n          result.$$promises = result.$$promises || true; // keep for isResolve()\n          delete result.$$inheritedValues;\n          resolution.resolve(values);\n        }\n      }\n      \n      function fail(reason) {\n        result.$$failure = reason;\n        resolution.reject(reason);\n      }\n\n      // Short-circuit if parent has already failed\n      if (isDefined(parent.$$failure)) {\n        fail(parent.$$failure);\n        return result;\n      }\n      \n      if (parent.$$inheritedValues) {\n        merge(values, omit(parent.$$inheritedValues, invocableKeys));\n      }\n\n      // Merge parent values if the parent has already resolved, or merge\n      // parent promises and wait if the parent resolve is still in progress.\n      extend(promises, parent.$$promises);\n      if (parent.$$values) {\n        merged = merge(values, omit(parent.$$values, invocableKeys));\n        result.$$inheritedValues = omit(parent.$$values, invocableKeys);\n        done();\n      } else {\n        if (parent.$$inheritedValues) {\n          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);\n        }        \n        parent.then(done, fail);\n      }\n      \n      // Process each invocable in the plan, but ignore any where a local of the same name exists.\n      for (var i=0, ii=plan.length; i<ii; i+=3) {\n        if (locals.hasOwnProperty(plan[i])) done();\n        else invoke(plan[i], plan[i+1], plan[i+2]);\n      }\n      \n      function invoke(key, invocable, params) {\n        // Create a deferred for this invocation. Failures will propagate to the resolution as well.\n        var invocation = $q.defer(), waitParams = 0;\n        function onfailure(reason) {\n          invocation.reject(reason);\n          fail(reason);\n        }\n        // Wait for any parameter that we have a promise for (either from parent or from this\n        // resolve; in that case study() will have made sure it's ordered before us in the plan).\n        forEach(params, function (dep) {\n          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {\n            waitParams++;\n            promises[dep].then(function (result) {\n              values[dep] = result;\n              if (!(--waitParams)) proceed();\n            }, onfailure);\n          }\n        });\n        if (!waitParams) proceed();\n        function proceed() {\n          if (isDefined(result.$$failure)) return;\n          try {\n            invocation.resolve($injector.invoke(invocable, self, values));\n            invocation.promise.then(function (result) {\n              values[key] = result;\n              done();\n            }, onfailure);\n          } catch (e) {\n            onfailure(e);\n          }\n        }\n        // Publish promise synchronously; invocations further down in the plan may depend on it.\n        promises[key] = invocation.promise;\n      }\n      \n      return result;\n    };\n  };\n  \n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#resolve\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Resolves a set of invocables. An invocable is a function to be invoked via \n   * `$injector.invoke()`, and can have an arbitrary number of dependencies. \n   * An invocable can either return a value directly,\n   * or a `$q` promise. If a promise is returned it will be resolved and the \n   * resulting value will be used instead. Dependencies of invocables are resolved \n   * (in this order of precedence)\n   *\n   * - from the specified `locals`\n   * - from another invocable that is part of this `$resolve` call\n   * - from an invocable that is inherited from a `parent` call to `$resolve` \n   *   (or recursively\n   * - from any ancestor `$resolve` of that parent).\n   *\n   * The return value of `$resolve` is a promise for an object that contains \n   * (in this order of precedence)\n   *\n   * - any `locals` (if specified)\n   * - the resolved return values of all injectables\n   * - any values inherited from a `parent` call to `$resolve` (if specified)\n   *\n   * The promise will resolve after the `parent` promise (if any) and all promises \n   * returned by injectables have been resolved. If any invocable \n   * (or `$injector.invoke`) throws an exception, or if a promise returned by an \n   * invocable is rejected, the `$resolve` promise is immediately rejected with the \n   * same error. A rejection of a `parent` promise (if specified) will likewise be \n   * propagated immediately. Once the `$resolve` promise has been rejected, no \n   * further invocables will be called.\n   * \n   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`\n   * to throw an error. As a special case, an injectable can depend on a parameter \n   * with the same name as the injectable, which will be fulfilled from the `parent` \n   * injectable of the same name. This allows inherited values to be decorated. \n   * Note that in this case any other injectable in the same `$resolve` with the same\n   * dependency would see the decorated value, not the inherited value.\n   *\n   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) \n   * exception.\n   *\n   * Invocables are invoked eagerly as soon as all dependencies are available. \n   * This is true even for dependencies inherited from a `parent` call to `$resolve`.\n   *\n   * As a special case, an invocable can be a string, in which case it is taken to \n   * be a service name to be passed to `$injector.get()`. This is supported primarily \n   * for backwards-compatibility with the `resolve` property of `$routeProvider` \n   * routes.\n   *\n   * @param {object} invocables functions to invoke or \n   * `$injector` services to fetch.\n   * @param {object} locals  values to make available to the injectables\n   * @param {object} parent  a promise returned by another call to `$resolve`.\n   * @param {object} self  the `this` for the invoked methods\n   * @return {object} Promise for an object that contains the resolved return value\n   * of all invocables, as well as any inherited and local values.\n   */\n  this.resolve = function (invocables, locals, parent, self) {\n    return this.study(invocables)(locals, parent, self);\n  };\n}\n\nangular.module('ui.router.util').service('$resolve', $Resolve);\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$templateFactory\n *\n * @requires $http\n * @requires $templateCache\n * @requires $injector\n *\n * @description\n * Service. Manages loading of templates.\n */\n$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];\nfunction $TemplateFactory(  $http,   $templateCache,   $injector) {\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromConfig\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a configuration object. \n   *\n   * @param {object} config Configuration object for which to load a template. \n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param {string|object} config.template html string template or function to \n   * load via {@link ui.router.util.$templateFactory#fromString fromString}.\n   * @param {string|object} config.templateUrl url to load or a function returning \n   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.\n   * @param {Function} config.templateProvider function to invoke via \n   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.\n   * @param {object} params  Parameters to pass to the template function.\n   * @param {object} locals Locals to pass to `invoke` if the template is loaded \n   * via a `templateProvider`. Defaults to `{ params: params }`.\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  this.fromConfig = function (config, params, locals) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :\n      null\n    );\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromString\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param {string|object} template html template as a string or function that \n   * returns an html template as a string.\n   * @param {object} params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  this.fromString = function (template, params) {\n    return isFunction(template) ? template(params) : template;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromUrl\n   * @methodOf ui.router.util.$templateFactory\n   * \n   * @description\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromUrl = function (url, params) {\n    if (isFunction(url)) url = url(params);\n    if (url == null) return null;\n    else return $http\n        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})\n        .then(function(response) { return response.data; });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromProvider\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param {Function} provider Function to invoke via `$injector.invoke`\n   * @param {Object} params Parameters for the template.\n   * @param {Object} locals Locals to pass to `invoke`. Defaults to \n   * `{ params: params }`.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromProvider = function (provider, params, locals) {\n    return $injector.invoke(provider, null, locals || { params: params });\n  };\n}\n\nangular.module('ui.router.util').service('$templateFactory', $TemplateFactory);\n\nvar $$UMFP; // reference to $UrlMatcherFactoryProvider\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:UrlMatcher\n *\n * @description\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n *\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n * syntax, which optionally allows a regular expression for the parameter to be specified:\n *\n * * `':'` name - colon placeholder\n * * `'*'` name - catch-all placeholder\n * * `'{' name '}'` - curly placeholder\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters). For colon\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n * number of characters other than '/'. For catch-all placeholders the path parameter matches\n * any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n * @param {string} pattern  The pattern to compile into a matcher.\n * @param {Object} config  A configuration object hash:\n * @param {Object=} parentMatcher Used to concatenate the pattern/config onto\n *   an existing UrlMatcher\n *\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.\n *\n * @property {string} source  The pattern that was passed into the constructor\n *\n * @property {string} sourcePath  The path portion of the source property\n *\n * @property {string} sourceSearch  The search portion of the source property\n *\n * @property {string} regex  The constructed regex that will be used to match against the url when\n *   it is time to determine which url will match.\n *\n * @returns {Object}  New `UrlMatcher` object\n */\nfunction UrlMatcher(pattern, config, parentMatcher) {\n  config = extend({ params: {} }, isObject(config) ? config : {});\n\n  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n  //   '*' name\n  //   ':' name\n  //   '{' name '}'\n  //   '{' name ':' regexp '}'\n  // The regular expression is somewhat complicated due to the need to allow curly braces\n  // inside the regular expression. The placeholder regexp breaks down as follows:\n  //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n  //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n  //    [^{}\\\\]+                       - anything other than curly braces or backslash\n  //    \\\\.                            - a backslash escape\n  //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n  var placeholder       = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      compiled = '^', last = 0, m,\n      segments = this.segments = [],\n      parentParams = parentMatcher ? parentMatcher.params : {},\n      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),\n      paramNames = [];\n\n  function addParameter(id, type, config, location) {\n    paramNames.push(id);\n    if (parentParams[id]) return parentParams[id];\n    if (!/^\\w+([-.]+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    params[id] = new $$UMFP.Param(id, type, config, location);\n    return params[id];\n  }\n\n  function quoteRegExp(string, pattern, squash, optional) {\n    var surroundPattern = ['',''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!pattern) return result;\n    switch(squash) {\n      case false: surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")]; break;\n      case true:\n        result = result.replace(/\\/$/, '');\n        surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n      default:    surroundPattern = ['(' + squash + \"|\", ')?']; break;\n    }\n    return result + surroundPattern[0] + pattern + surroundPattern[1];\n  }\n\n  this.source = pattern;\n\n  // Split into static segments separated by path parameter placeholders.\n  // The number of segments is always 1 more than the number of parameters.\n  function matchDetails(m, isSearch) {\n    var id, regexp, segment, type, cfg, arrayMode;\n    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null\n    cfg         = config.params[id];\n    segment     = pattern.substring(last, m.index);\n    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);\n\n    if (regexp) {\n      type      = $$UMFP.type(regexp) || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n    }\n\n    return {\n      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg\n    };\n  }\n\n  var p, param, segment;\n  while ((m = placeholder.exec(pattern))) {\n    p = matchDetails(m, false);\n    if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n    param = addParameter(p.id, p.type, p.cfg, \"path\");\n    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);\n    segments.push(p.segment);\n    last = placeholder.lastIndex;\n  }\n  segment = pattern.substring(last);\n\n  // Find any search parameter names and remove them from the last segment\n  var i = segment.indexOf('?');\n\n  if (i >= 0) {\n    var search = this.sourceSearch = segment.substring(i);\n    segment = segment.substring(0, i);\n    this.sourcePath = pattern.substring(0, last + i);\n\n    if (search.length > 0) {\n      last = 0;\n      while ((m = searchPlaceholder.exec(search))) {\n        p = matchDetails(m, true);\n        param = addParameter(p.id, p.type, p.cfg, \"search\");\n        last = placeholder.lastIndex;\n        // check if ?&\n      }\n    }\n  } else {\n    this.sourcePath = pattern;\n    this.sourceSearch = '';\n  }\n\n  compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';\n  segments.push(segment);\n\n  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);\n  this.prefix = segments[0];\n  this.$$paramNames = paramNames;\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#concat\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns a new matcher for a pattern constructed by appending the path part and adding the\n * search parameters of the specified pattern to this pattern. The current pattern is not\n * modified. This can be understood as creating a pattern for URLs that are relative to (or\n * suffixes of) the current pattern.\n *\n * @example\n * The following two matchers are equivalent:\n * <pre>\n * new UrlMatcher('/user/{id}?q').concat('/details?date');\n * new UrlMatcher('/user/{id}/details?q&date');\n * </pre>\n *\n * @param {string} pattern  The pattern to append.\n * @param {Object} config  An object hash of the configuration for the matcher.\n * @returns {UrlMatcher}  A matcher for the concatenated pattern.\n */\nUrlMatcher.prototype.concat = function (pattern, config) {\n  // Because order of search parameters is irrelevant, we can add our own search\n  // parameters to the end of the new pattern. Parse the new pattern by itself\n  // and then join the bits together, but it's much easier to do this on a string level.\n  var defaultConfig = {\n    caseInsensitive: $$UMFP.caseInsensitive(),\n    strict: $$UMFP.strictMode(),\n    squash: $$UMFP.defaultSquashPolicy()\n  };\n  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);\n};\n\nUrlMatcher.prototype.toString = function () {\n  return this.source;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#exec\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Tests the specified path against this matcher, and returns an object containing the captured\n * parameter values, or null if the path does not match. The returned object contains the values\n * of any search parameters that are mentioned in the pattern, but their value may be null if\n * they are not present in `searchParams`. This means that search parameters are always treated\n * as optional.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n *   x: '1', q: 'hello'\n * });\n * // returns { id: 'bob', q: 'hello', r: null }\n * </pre>\n *\n * @param {string} path  The URL path to match, e.g. `$location.path()`.\n * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.\n * @returns {Object}  The captured parameter values.\n */\nUrlMatcher.prototype.exec = function (path, searchParams) {\n  var m = this.regexp.exec(path);\n  if (!m) return null;\n  searchParams = searchParams || {};\n\n  var paramNames = this.parameters(), nTotal = paramNames.length,\n    nPath = this.segments.length - 1,\n    values = {}, i, j, cfg, paramName;\n\n  if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");\n\n  function decodePathArray(string) {\n    function reverseString(str) { return str.split(\"\").reverse().join(\"\"); }\n    function unquoteDashes(str) { return str.replace(/\\\\-/g, \"-\"); }\n\n    var split = reverseString(string).split(/-(?!\\\\)/);\n    var allReversed = map(split, reverseString);\n    return map(allReversed, unquoteDashes).reverse();\n  }\n\n  var param, paramVal;\n  for (i = 0; i < nPath; i++) {\n    paramName = paramNames[i];\n    param = this.params[paramName];\n    paramVal = m[i+1];\n    // if the param value matches a pre-replace pair, replace the value before decoding.\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n  for (/**/; i < nTotal; i++) {\n    paramName = paramNames[i];\n    values[paramName] = this.params[paramName].value(searchParams[paramName]);\n    param = this.params[paramName];\n    paramVal = searchParams[paramName];\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n\n  return values;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#parameters\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns the names of all path and search parameters of this pattern in an unspecified order.\n *\n * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the\n *    pattern has no parameters, an empty array is returned.\n */\nUrlMatcher.prototype.parameters = function (param) {\n  if (!isDefined(param)) return this.$$paramNames;\n  return this.params[param] || null;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#validates\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Checks an object hash of parameters to validate their correctness according to the parameter\n * types of this `UrlMatcher`.\n *\n * @param {Object} params The object hash of parameters to validate.\n * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n */\nUrlMatcher.prototype.validates = function (params) {\n  return this.params.$$validates(params);\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#format\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Creates a URL that matches this pattern by substituting the specified values\n * for the path and search parameters. Null values for path parameters are\n * treated as empty strings.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n * // returns '/user/bob?q=yes'\n * </pre>\n *\n * @param {Object} values  the values to substitute for the parameters in this pattern.\n * @returns {string}  the formatted URL (path and optionally search part).\n */\nUrlMatcher.prototype.format = function (values) {\n  values = values || {};\n  var segments = this.segments, params = this.parameters(), paramset = this.params;\n  if (!this.validates(values)) return null;\n\n  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];\n\n  function encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });\n  }\n\n  for (i = 0; i < nTotal; i++) {\n    var isPathParam = i < nPath;\n    var name = params[i], param = paramset[name], value = param.value(values[name]);\n    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);\n    var squash = isDefaultValue ? param.squash : false;\n    var encoded = param.type.encode(value);\n\n    if (isPathParam) {\n      var nextSegment = segments[i + 1];\n      var isFinalPathParam = i + 1 === nPath;\n\n      if (squash === false) {\n        if (encoded != null) {\n          if (isArray(encoded)) {\n            result += map(encoded, encodeDashes).join(\"-\");\n          } else {\n            result += encodeURIComponent(encoded);\n          }\n        }\n        result += nextSegment;\n      } else if (squash === true) {\n        var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;\n        result += nextSegment.match(capture)[1];\n      } else if (isString(squash)) {\n        result += squash + nextSegment;\n      }\n\n      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);\n    } else {\n      if (encoded == null || (isDefaultValue && squash !== false)) continue;\n      if (!isArray(encoded)) encoded = [ encoded ];\n      if (encoded.length === 0) continue;\n      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');\n      result += (search ? '&' : '?') + (name + '=' + encoded);\n      search = true;\n    }\n  }\n\n  return result;\n};\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:Type\n *\n * @description\n * Implements an interface to define custom parameter types that can be decoded from and encoded to\n * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}\n * objects when matching or formatting URLs, or comparing or validating parameter values.\n *\n * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more\n * information on registering custom types.\n *\n * @param {Object} config  A configuration object which contains the custom type definition.  The object's\n *        properties will override the default methods and/or pattern in `Type`'s public interface.\n * @example\n * <pre>\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * </pre>\n *\n * @property {RegExp} pattern The regular expression pattern used to match values of this type when\n *           coming from a substring of a URL.\n *\n * @returns {Object}  Returns a new `Type` object.\n */\nfunction Type(config) {\n  extend(this, config);\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#is\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Detects whether a value is of a particular type. Accepts a native (decoded) value\n * and determines whether it matches the current `Type` object.\n *\n * @param {*} val  The value to check.\n * @param {string} key  Optional. If the type check is happening in the context of a specific\n *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the\n *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.\n * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.\n */\nType.prototype.is = function(val, key) {\n  return true;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#encode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the\n * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it\n * only needs to be a representation of `val` that has been coerced to a string.\n *\n * @param {*} val  The value to encode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.\n */\nType.prototype.encode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#decode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Converts a parameter value (from URL string or transition param) to a custom/native value.\n *\n * @param {string} val  The URL parameter value to decode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {*}  Returns a custom representation of the URL parameter value.\n */\nType.prototype.decode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#equals\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Determines whether two decoded values are equivalent.\n *\n * @param {*} a  A value to compare against.\n * @param {*} b  A value to compare against.\n * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.\n */\nType.prototype.equals = function(a, b) {\n  return a == b;\n};\n\nType.prototype.$subPattern = function() {\n  var sub = this.pattern.toString();\n  return sub.substr(1, sub.length - 2);\n};\n\nType.prototype.pattern = /.*/;\n\nType.prototype.toString = function() { return \"{Type:\" + this.name + \"}\"; };\n\n/** Given an encoded string, or a decoded object, returns a decoded object */\nType.prototype.$normalize = function(val) {\n  return this.is(val) ? val : this.decode(val);\n};\n\n/*\n * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n * e.g.:\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n * - url: \"/path?queryParam=1&queryParam=2\n * - $stateParams.queryParam will be [1, 2]\n * if `mode` is \"auto\", then\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n */\nType.prototype.$asArray = function(mode, isSearch) {\n  if (!mode) return this;\n  if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n\n  function ArrayType(type, mode) {\n    function bindTo(type, callbackName) {\n      return function() {\n        return type[callbackName].apply(type, arguments);\n      };\n    }\n\n    // Wrap non-array value as array\n    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n      switch(val.length) {\n        case 0: return undefined;\n        case 1: return mode === \"auto\" ? val[0] : val;\n        default: return val;\n      }\n    }\n    function falsey(val) { return !val; }\n\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n      return function handleArray(val) {\n        if (isArray(val) && val.length === 0) return val;\n        val = arrayWrap(val);\n        var result = map(val, callback);\n        if (allTruthyMode === true)\n          return filter(result, falsey).length === 0;\n        return arrayUnwrap(result);\n      };\n    }\n\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n      return function handleArray(val1, val2) {\n        var left = arrayWrap(val1), right = arrayWrap(val2);\n        if (left.length !== right.length) return false;\n        for (var i = 0; i < left.length; i++) {\n          if (!callback(left[i], right[i])) return false;\n        }\n        return true;\n      };\n    }\n\n    this.encode = arrayHandler(bindTo(type, 'encode'));\n    this.decode = arrayHandler(bindTo(type, 'decode'));\n    this.is     = arrayHandler(bindTo(type, 'is'), true);\n    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));\n    this.pattern = type.pattern;\n    this.$normalize = arrayHandler(bindTo(type, '$normalize'));\n    this.name = type.name;\n    this.$arrayMode = mode;\n  }\n\n  return new ArrayType(this, mode);\n};\n\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$urlMatcherFactory\n *\n * @description\n * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory\n * is also available to providers under the name `$urlMatcherFactoryProvider`.\n */\nfunction $UrlMatcherFactory() {\n  $$UMFP = this;\n\n  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;\n\n  // Use tildes to pre-encode slashes.\n  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n  // and bidirectional encoding/decoding fails.\n  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n  function valToString(val) { return val != null ? val.toString().replace(/(~|\\/)/g, function (m) { return {'~':'~~', '/':'~2F'}[m]; }) : val; }\n  function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return {'~~':'~', '~2F':'/'}[m]; }) : val; }\n\n  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.\n      // In 0.2.x, string params are optional by default for backwards compat\n      is: function(val) { return val == null || !isDefined(val) || typeof val === \"string\"; },\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode: function(val) { return parseInt(val, 10); },\n      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /\\d+/\n    },\n    \"bool\": {\n      encode: function(val) { return val ? 1 : 0; },\n      decode: function(val) { return parseInt(val, 10) !== 0; },\n      is: function(val) { return val === true || val === false; },\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode: function (val) {\n        if (!this.is(val))\n          return undefined;\n        return [ val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },\n      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: angular.toJson,\n      decode: angular.fromJson,\n      is: angular.isObject,\n      equals: angular.equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: angular.identity,\n      decode: angular.identity,\n      equals: angular.equals,\n      pattern: /.*/\n    }\n  };\n\n  function getDefaultConfig() {\n    return {\n      strict: isStrictMode,\n      caseInsensitive: isCaseInsensitive\n    };\n  }\n\n  function isInjectable(value) {\n    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));\n  }\n\n  /**\n   * [Internal] Get the default value of a parameter, which may be an injectable function.\n   */\n  $UrlMatcherFactory.$$getDefaultValue = function(config) {\n    if (!isInjectable(config.value)) return config.value;\n    if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n    return injector.invoke(config.value);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#caseInsensitive\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns {boolean} the current value of caseInsensitive\n   */\n  this.caseInsensitive = function(value) {\n    if (isDefined(value))\n      isCaseInsensitive = value;\n    return isCaseInsensitive;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#strictMode\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns {boolean} the current value of strictMode\n   */\n  this.strictMode = function(value) {\n    if (isDefined(value))\n      isStrictMode = value;\n    return isStrictMode;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param {string} value A string that defines the default parameter URL squashing behavior.\n   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   */\n  this.defaultSquashPolicy = function(value) {\n    if (!isDefined(value)) return defaultSquashPolicy;\n    if (value !== true && value !== false && !isString(value))\n      throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n    defaultSquashPolicy = value;\n    return value;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#compile\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.\n   *\n   * @param {string} pattern  The URL pattern.\n   * @param {Object} config  The config object hash.\n   * @returns {UrlMatcher}  The UrlMatcher.\n   */\n  this.compile = function (pattern, config) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#isMatcher\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.\n   *\n   * @param {Object} object  The object to perform the type check against.\n   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  this.isMatcher = function (o) {\n    if (!isObject(o)) return false;\n    var result = true;\n\n    forEach(UrlMatcher.prototype, function(val, name) {\n      if (isFunction(val)) {\n        result = result && (isDefined(o[name]) && isFunction(o[name]));\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#type\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to\n   * generate URLs with typed parameters.\n   *\n   * @param {string} name  The type name.\n   * @param {Object|Function} definition   The type definition. See\n   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   * @param {Object|Function} definitionFn (optional) A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   *\n   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.\n   *\n   * @example\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   *\n   * <pre>\n   * var list = ['John', 'Paul', 'George', 'Ringo'];\n   *\n   * $urlMatcherFactoryProvider.type('listItem', {\n   *   encode: function(item) {\n   *     // Represent the list item in the URL using its corresponding index\n   *     return list.indexOf(item);\n   *   },\n   *   decode: function(item) {\n   *     // Look up the list item by index\n   *     return list[parseInt(item, 10)];\n   *   },\n   *   is: function(item) {\n   *     // Ensure the item is valid by checking to see that it appears\n   *     // in the list\n   *     return list.indexOf(item) > -1;\n   *   }\n   * });\n   *\n   * $stateProvider.state('list', {\n   *   url: \"/list/{item:listItem}\",\n   *   controller: function($scope, $stateParams) {\n   *     console.log($stateParams.item);\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console\n   * $state.go('list', { item: \"Ringo\" });\n   * </pre>\n   *\n   * This is a more complex example of a type that relies on dependency injection to\n   * interact with services, and uses the parameter name from the URL to infer how to\n   * handle encoding and decoding parameter values:\n   *\n   * <pre>\n   * // Defines a custom type that gets a value from a service,\n   * // where each service gets different types of values from\n   * // a backend API:\n   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {\n   *\n   *   // Matches up services to URL parameter names\n   *   var services = {\n   *     user: Users,\n   *     post: Posts\n   *   };\n   *\n   *   return {\n   *     encode: function(object) {\n   *       // Represent the object in the URL using its unique ID\n   *       return object.id;\n   *     },\n   *     decode: function(value, key) {\n   *       // Look up the object by ID, using the parameter\n   *       // name (key) to call the correct service\n   *       return services[key].findById(value);\n   *     },\n   *     is: function(object, key) {\n   *       // Check that object is a valid dbObject\n   *       return angular.isObject(object) && object.id && services[key];\n   *     }\n   *     equals: function(a, b) {\n   *       // Check the equality of decoded objects by comparing\n   *       // their unique IDs\n   *       return a.id === b.id;\n   *     }\n   *   };\n   * });\n   *\n   * // In a config() block, you can then attach URLs with\n   * // type-annotated parameters:\n   * $stateProvider.state('users', {\n   *   url: \"/users\",\n   *   // ...\n   * }).state('users.item', {\n   *   url: \"/{user:dbObject}\",\n   *   controller: function($scope, $stateParams) {\n   *     // $stateParams.user will now be an object returned from\n   *     // the Users service\n   *   },\n   *   // ...\n   * });\n   * </pre>\n   */\n  this.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return $types[name];\n    if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\n    $types[name] = new Type(extend({ name: name }, definition));\n    if (definitionFn) {\n      typeQueue.push({ name: name, def: definitionFn });\n      if (!enqueue) flushTypeQueue();\n    }\n    return this;\n  };\n\n  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s\n  function flushTypeQueue() {\n    while(typeQueue.length) {\n      var type = typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      angular.extend($types[type.name], injector.invoke(type.def));\n    }\n  }\n\n  // Register default types. Store them in the prototype of $types.\n  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });\n  $types = inherit($types, {});\n\n  /* No need to document $get, since it returns this */\n  this.$get = ['$injector', function ($injector) {\n    injector = $injector;\n    enqueue = false;\n    flushTypeQueue();\n\n    forEach(defaultTypes, function(type, name) {\n      if (!$types[name]) $types[name] = new Type(type);\n    });\n    return this;\n  }];\n\n  this.Param = function Param(id, type, config, location) {\n    var self = this;\n    config = unwrapShorthand(config);\n    type = getType(config, type, location);\n    var arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;\n    if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined)\n      config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"\n    var isOptional = config.value !== undefined;\n    var squash = getSquashPolicy(config, isOptional);\n    var replace = getReplace(config, arrayMode, isOptional, squash);\n\n    function unwrapShorthand(config) {\n      var keys = isObject(config) ? objectKeys(config) : [];\n      var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 &&\n                        indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;\n      if (isShorthand) config = { value: config };\n      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };\n      return config;\n    }\n\n    function getType(config, urlType, location) {\n      if (config.type && urlType) throw new Error(\"Param '\"+id+\"' has two type configurations.\");\n      if (urlType) return urlType;\n      if (!config.type) return (location === \"config\" ? $types.any : $types.string);\n\n      if (angular.isString(config.type))\n        return $types[config.type];\n      if (config.type instanceof Type)\n        return config.type;\n      return new Type(config.type);\n    }\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      var arrayDefaults = { array: (location === \"search\" ? \"auto\" : false) };\n      var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    /**\n     * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n     */\n    function getSquashPolicy(config, isOptional) {\n      var squash = config.squash;\n      if (!isOptional || squash === false) return false;\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n      if (squash === true || isString(squash)) return squash;\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n    }\n\n    function getReplace(config, arrayMode, isOptional, squash) {\n      var replace, configuredKeys, defaultPolicy = [\n        { from: \"\",   to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n      ];\n      replace = isArray(config.replace) ? config.replace : [];\n      if (isString(squash))\n        replace.push({ from: squash, to: undefined });\n      configuredKeys = map(replace, function(item) { return item.from; } );\n      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);\n    }\n\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    function $$getDefaultValue() {\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      var defaultValue = injector.invoke(config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))\n        throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n      return defaultValue;\n    }\n\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    function $value(value) {\n      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }\n      function $replace(value) {\n        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });\n        return replacement.length ? replacement[0] : value;\n      }\n      value = $replace(value);\n      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);\n    }\n\n    function toString() { return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\"; }\n\n    extend(this, {\n      id: id,\n      type: type,\n      location: location,\n      array: arrayMode,\n      squash: squash,\n      replace: replace,\n      isOptional: isOptional,\n      value: $value,\n      dynamic: undefined,\n      config: config,\n      toString: toString\n    });\n  };\n\n  function ParamSet(params) {\n    extend(this, params || {});\n  }\n\n  ParamSet.prototype = {\n    $$new: function() {\n      return inherit(this, extend(new ParamSet(), { $$parent: this}));\n    },\n    $$keys: function () {\n      var keys = [], chain = [], parent = this,\n        ignore = objectKeys(ParamSet.prototype);\n      while (parent) { chain.push(parent); parent = parent.$$parent; }\n      chain.reverse();\n      forEach(chain, function(paramset) {\n        forEach(objectKeys(paramset), function(key) {\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);\n        });\n      });\n      return keys;\n    },\n    $$values: function(paramValues) {\n      var values = {}, self = this;\n      forEach(self.$$keys(), function(key) {\n        values[key] = self[key].value(paramValues && paramValues[key]);\n      });\n      return values;\n    },\n    $$equals: function(paramValues1, paramValues2) {\n      var equal = true, self = this;\n      forEach(self.$$keys(), function(key) {\n        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];\n        if (!self[key].type.equals(left, right)) equal = false;\n      });\n      return equal;\n    },\n    $$validates: function $$validate(paramValues) {\n      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;\n      for (i = 0; i < keys.length; i++) {\n        param = this[keys[i]];\n        rawVal = paramValues[keys[i]];\n        if ((rawVal === undefined || rawVal === null) && param.isOptional)\n          break; // There was no parameter value, but the param is optional\n        normalized = param.type.$normalize(rawVal);\n        if (!param.type.is(normalized))\n          return false; // The value was not of the correct Type, and could not be decoded to the correct Type\n        encoded = param.type.encode(normalized);\n        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))\n          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp\n      }\n      return true;\n    },\n    $$parent: undefined\n  };\n\n  this.ParamSet = ParamSet;\n}\n\n// Register as a provider so it's available to other providers\nangular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`. \n * When `$location` changes it runs through a list of rules one by one until a \n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {\n  var rules = [], otherwise = null, interceptDeferred = false, listener;\n\n  // Returns a string that is a prefix of all strings matching the RegExp\n  function regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n  }\n\n  // Interpolates matched values into a String.replace()-style pattern\n  function interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n      return match[what === '$' ? 0 : Number(what)];\n    });\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {function} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.rule = function (rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|function} rule The url path you want to redirect to or a function \n   * rule that returns the url path. The function version is passed two params: \n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.otherwise = function (rule) {\n    if (isString(rule)) {\n      var redirect = rule;\n      rule = function () { return redirect; };\n    }\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    otherwise = rule;\n    return this;\n  };\n\n\n  function handleIfMatch($injector, handler, match) {\n    if (!match) return false;\n    var result = $injector.invoke(handler, handler, { $match: match });\n    return isDefined(result) ? result : true;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|function} handler The path you want to redirect your user to.\n   */\n  this.when = function (what, handler) {\n    var redirect, handlerIsString = isString(handler);\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    var strategies = {\n      matcher: function (what, handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(handler);\n          handler = ['$match', function ($match) { return redirect.format($match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n        }, {\n          prefix: isString(what.prefix) ? what.prefix : ''\n        });\n      },\n      regex: function (what, handler) {\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = handler;\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(what)\n        });\n      }\n    };\n\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n            no parameter is equivalent to `true`.\n   */\n  this.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    interceptDeferred = defer;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouter\n   *\n   * @requires $location\n   * @requires $rootScope\n   * @requires $injector\n   * @requires $browser\n   *\n   * @description\n   *\n   */\n  this.$get = $get;\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];\n  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {\n\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;\n\n    function appendBasePath(url, isHtml5, absolute) {\n      if (baseHref === '/') return url;\n      if (isHtml5) return baseHref.slice(0, -1) + url;\n      if (absolute) return baseHref.slice(1) + url;\n      return url;\n    }\n\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n    function update(evt) {\n      if (evt && evt.defaultPrevented) return;\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n      lastPushedUrl = undefined;\n      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573\n      //if (ignoreUpdate) return true;\n\n      function check(rule) {\n        var handled = rule($injector, $location);\n\n        if (!handled) return false;\n        if (isString(handled)) $location.replace().url(handled);\n        return true;\n      }\n      var n = rules.length, i;\n\n      for (i = 0; i < n; i++) {\n        if (check(rules[i])) return;\n      }\n      // always check otherwise last to allow dynamic updates to the set of rules\n      if (otherwise) check(otherwise);\n    }\n\n    function listen() {\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n      return listener;\n    }\n\n    if (!interceptDeferred) listen();\n\n    return {\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#sync\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n       * with the transition by calling `$urlRouter.sync()`.\n       *\n       * @example\n       * <pre>\n       * angular.module('app', ['ui.router'])\n       *   .run(function($rootScope, $urlRouter) {\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n       *       // Halt state change from even starting\n       *       evt.preventDefault();\n       *       // Perform custom logic\n       *       var meetsRequirement = ...\n       *       // Continue with the update and state transition if logic allows\n       *       if (meetsRequirement) $urlRouter.sync();\n       *     });\n       * });\n       * </pre>\n       */\n      sync: function() {\n        update();\n      },\n\n      listen: function() {\n        return listen();\n      },\n\n      update: function(read) {\n        if (read) {\n          location = $location.url();\n          return;\n        }\n        if ($location.url() === location) return;\n\n        $location.url(location);\n        $location.replace();\n      },\n\n      push: function(urlMatcher, params, options) {\n         var url = urlMatcher.format(params || {});\n\n        // Handle the special hash param, if needed\n        if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n        }\n\n        $location.url(url);\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n        if (options && options.replace) $location.replace();\n      },\n\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#href\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * A URL generation method that returns the compiled URL for a given\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n       *\n       * @example\n       * <pre>\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n       *   person: \"bob\"\n       * });\n       * // $bob == \"/about/bob\";\n       * </pre>\n       *\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n       */\n      href: function(urlMatcher, params, options) {\n        if (!urlMatcher.validates(params)) return null;\n\n        var isHtml5 = $locationProvider.html5Mode();\n        if (angular.isObject(isHtml5)) {\n          isHtml5 = isHtml5.enabled;\n        }\n\n        isHtml5 = isHtml5 && $sniffer.history;\n        \n        var url = urlMatcher.format(params);\n        options = options || {};\n\n        if (!isHtml5 && url !== null) {\n          url = \"#\" + $locationProvider.hashPrefix() + url;\n        }\n\n        // Handle special hash param, if needed\n        if (url !== null && params && params['#']) {\n          url += '#' + params['#'];\n        }\n\n        url = appendBasePath(url, isHtml5, options.absolute);\n\n        if (!options.absolute || !url) {\n          return url;\n        }\n\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n      }\n    };\n  }\n}\n\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\n$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];\nfunction $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {\n\n  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';\n\n  // Builds state properties from definition passed to registerState()\n  var stateBuilder = {\n\n    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.\n    // state.children = [];\n    // if (parent) parent.children.push(state);\n    parent: function(state) {\n      if (isDefined(state.parent) && state.parent) return findState(state.parent);\n      // regex matches any valid composite state name\n      // would match \"contact.list\" but not \"contacts\"\n      var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);\n      return compositeName ? findState(compositeName[1]) : root;\n    },\n\n    // inherit 'data' from parent and override by own values (if any)\n    data: function(state) {\n      if (state.parent && state.parent.data) {\n        state.data = state.self.data = inherit(state.parent.data, state.data);\n      }\n      return state.data;\n    },\n\n    // Build a URLMatcher if necessary, either via a relative or absolute URL\n    url: function(state) {\n      var url = state.url, config = { params: state.params || {} };\n\n      if (isString(url)) {\n        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);\n        return (state.parent.navigable || root).url.concat(url, config);\n      }\n\n      if (!url || $urlMatcherFactory.isMatcher(url)) return url;\n      throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n    },\n\n    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n    navigable: function(state) {\n      return state.url ? state : (state.parent ? state.parent.navigable : null);\n    },\n\n    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params\n    ownParams: function(state) {\n      var params = state.url && state.url.params || new $$UMFP.ParamSet();\n      forEach(state.params || {}, function(config, id) {\n        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");\n      });\n      return params;\n    },\n\n    // Derive parameters for this state and ensure they're a super-set of parent's parameters\n    params: function(state) {\n      var ownParams = pick(state.ownParams, state.ownParams.$$keys());\n      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();\n    },\n\n    // If there is no explicit multi-view configuration, make one up so we don't have\n    // to handle both cases in the view directive later. Note that having an explicit\n    // 'views' property will mean the default unnamed view properties are ignored. This\n    // is also a good time to resolve view names to absolute names, so everything is a\n    // straight lookup at link time.\n    views: function(state) {\n      var views = {};\n\n      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {\n        if (name.indexOf('@') < 0) name += '@' + state.parent.name;\n        view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';\n        views[name] = view;\n      });\n      return views;\n    },\n\n    // Keep a full path from the root down to this state as this is needed for state activation.\n    path: function(state) {\n      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path\n    },\n\n    // Speed up $state.contains() as it's used a lot\n    includes: function(state) {\n      var includes = state.parent ? extend({}, state.parent.includes) : {};\n      includes[state.name] = true;\n      return includes;\n    },\n\n    $delegates: {}\n  };\n\n  function isRelative(stateName) {\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n  function findState(stateOrName, base) {\n    if (!stateOrName) return undefined;\n\n    var isStr = isString(stateOrName),\n        name  = isStr ? stateOrName : stateOrName.name,\n        path  = isRelative(name);\n\n    if (path) {\n      if (!base) throw new Error(\"No reference point given for path '\"  + name + \"'\");\n      base = findState(base);\n      \n      var rel = name.split(\".\"), i = 0, pathLength = rel.length, current = base;\n\n      for (; i < pathLength; i++) {\n        if (rel[i] === \"\" && i === 0) {\n          current = base;\n          continue;\n        }\n        if (rel[i] === \"^\") {\n          if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");\n          current = current.parent;\n          continue;\n        }\n        break;\n      }\n      rel = rel.slice(i).join(\".\");\n      name = current.name + (current.name && rel ? \".\" : \"\") + rel;\n    }\n    var state = states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  function queueState(parentName, state) {\n    if (!queue[parentName]) {\n      queue[parentName] = [];\n    }\n    queue[parentName].push(state);\n  }\n\n  function flushQueuedChildren(parentName) {\n    var queued = queue[parentName] || [];\n    while(queued.length) {\n      registerState(queued.shift());\n    }\n  }\n\n  function registerState(state) {\n    // Wrap a new object around the state so we can store our private details easily.\n    state = inherit(state, {\n      self: state,\n      resolve: state.resolve || {},\n      toString: function() { return this.name; }\n    });\n\n    var name = state.name;\n    if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"' is already defined\");\n\n    // Get parent name\n    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))\n        : (isString(state.parent)) ? state.parent\n        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name\n        : '';\n\n    // If parent is not registered yet, add state to queue and register later\n    if (parentName && !states[parentName]) {\n      return queueState(parentName, state.self);\n    }\n\n    for (var key in stateBuilder) {\n      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);\n    }\n    states[name] = state;\n\n    // Register the state in the global state list and with $urlRouter if necessary.\n    if (!state[abstractKey] && state.url) {\n      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {\n          $state.transitionTo(state, $match, { inherit: true, location: false });\n        }\n      }]);\n    }\n\n    // Register any queued children\n    flushQueuedChildren(name);\n\n    return state;\n  }\n\n  // Checks text to see if it looks like a glob.\n  function isGlob (text) {\n    return text.indexOf('*') > -1;\n  }\n\n  // Returns true if glob matches current $state name.\n  function doesStateMatchGlob (glob) {\n    var globSegments = glob.split('.'),\n        segments = $state.$current.name.split('.');\n\n    //match single stars\n    for (var i = 0, l = globSegments.length; i < l; i++) {\n      if (globSegments[i] === '*') {\n        segments[i] = '*';\n      }\n    }\n\n    //match greedy starts\n    if (globSegments[0] === '**') {\n       segments = segments.slice(indexOf(segments, globSegments[1]));\n       segments.unshift('**');\n    }\n    //match greedy ends\n    if (globSegments[globSegments.length - 1] === '**') {\n       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n\n    if (globSegments.length != segments.length) {\n      return false;\n    }\n\n    return segments.join('') === globSegments.join('');\n  }\n\n\n  // Implicit root state that is always active\n  root = registerState({\n    name: '',\n    url: '^',\n    views: null,\n    'abstract': true\n  });\n  root.navigable = null;\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the \n   * `stateBuilder` object used internally by `$stateProvider`. This can be used \n   * to add custom functionality to ui-router, for example inferring templateUrl \n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new \n   * properties within the state's internal definition. There is currently no clear \n   * use-case for this beyond accessing internal states (i.e. $state.$current), \n   * however, expect this to become increasingly relevant as we introduce additional \n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of \n   * execution of the builder functions in non-deterministic. Builder functions \n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is \n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to \n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view \n   *   name (i.e. \"viewName@stateName\") and each value is the config object \n   *   (template, controller) for the view. Even when you don't use the views object \n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template \n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state, \n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state. \n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that \n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   var result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     var autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate. \n   * @param {object} func A function that is responsible for decorating the original \n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  this.decorator = decorator;\n  function decorator(name, func) {\n    /*jshint validthis: true */\n    if (isString(name) && !isDefined(func)) {\n      return stateBuilder[name];\n    }\n    if (!isFunction(func) || !isString(name)) {\n      return this;\n    }\n    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {\n      stateBuilder.$delegates[name] = stateBuilder[name];\n    }\n    stateBuilder[name] = func;\n    return this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} stateConfig State configuration object.\n   * @param {string|function=} stateConfig.template\n   * <a id='template'></a>\n   *   html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property \n   *   takes precedence over templateUrl.\n   *   \n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <pre>template:\n   *   \"<h1>inline template definition</h1>\" +\n   *   \"<div ui-view></div>\"</pre>\n   * <pre>template: function(params) {\n   *       return \"<h1>generated template</h1>\"; }</pre>\n   * </div>\n   *\n   * @param {string|function=} stateConfig.templateUrl\n   * <a id='templateUrl'></a>\n   *\n   *   path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *   \n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by \n   *     applying the current state\n   *\n   * <pre>templateUrl: \"home.html\"</pre>\n   * <pre>templateUrl: function(params) {\n   *     return myTemplates[params.pageId]; }</pre>\n   *\n   * @param {function=} stateConfig.templateProvider\n   * <a id='templateProvider'></a>\n   *    Provider function that returns HTML content string.\n   * <pre> templateProvider:\n   *       function(MyTemplateService, params) {\n   *         return MyTemplateService.getTemplate(params.pageId);\n   *       }</pre>\n   *\n   * @param {string|function=} stateConfig.controller\n   * <a id='controller'></a>\n   *\n   *  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *   Optionally, the ControllerAs may be declared here.\n   * <pre>controller: \"MyRegisteredController\"</pre>\n   * <pre>controller:\n   *     \"MyRegisteredController as fooCtrl\"}</pre>\n   * <pre>controller: function($scope, MyService) {\n   *     $scope.data = MyService.getData(); }</pre>\n   *\n   * @param {function=} stateConfig.controllerProvider\n   * <a id='controllerProvider'></a>\n   *\n   * Injectable provider function that returns the actual controller or string.\n   * <pre>controllerProvider:\n   *   function(MyResolveData) {\n   *     if (MyResolveData.foo)\n   *       return \"FooCtrl\"\n   *     else if (MyResolveData.bar)\n   *       return \"BarCtrl\";\n   *     else return function($scope) {\n   *       $scope.baz = \"Qux\";\n   *     }\n   *   }</pre>\n   *\n   * @param {string=} stateConfig.controllerAs\n   * <a id='controllerAs'></a>\n   * \n   * A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   * <pre>controllerAs: \"myCtrl\"</pre>\n   *\n   * @param {string|object=} stateConfig.parent\n   * <a id='parent'></a>\n   * Optionally specifies the parent state of this state.\n   *\n   * <pre>parent: 'parentState'</pre>\n   * <pre>parent: parentState // JS variable</pre>\n   *\n   * @param {object=} stateConfig.resolve\n   * <a id='resolve'></a>\n   *\n   * An optional map&lt;string, function&gt; of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises, \n   *   the router will wait for them all to be resolved before the controller is instantiated.\n   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired\n   *   and the values of the resolved promises are injected into any controllers that reference them.\n   *   If any  of the promises are rejected the $stateChangeError event is fired.\n   *\n   *   The map object is:\n   *   \n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, \n   *     it is injected and return value it treated as dependency. If result is a promise, it is \n   *     resolved before its value is injected into controller.\n   *\n   * <pre>resolve: {\n   *     myResolve1:\n   *       function($http, $stateParams) {\n   *         return $http.get(\"/api/foos/\"+stateParams.fooID);\n   *       }\n   *     }</pre>\n   *\n   * @param {string=} stateConfig.url\n   * <a id='url'></a>\n   *\n   *   A url fragment with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any \n   *   parameters that were passed.\n   *\n   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for\n   *   more details on acceptable patterns )\n   *\n   * examples:\n   * <pre>url: \"/home\"\n   * url: \"/users/:userid\"\n   * url: \"/books/{bookid:[a-zA-Z_-]}\"\n   * url: \"/books/{categoryid:int}\"\n   * url: \"/books/{publishername:string}/{categoryid:int}\"\n   * url: \"/messages?before&after\"\n   * url: \"/messages?{before:date}&{after:date}\"\n   * url: \"/messages/:mailboxid?{before:date}&{after:date}\"\n   * </pre>\n   *\n   * @param {object=} stateConfig.views\n   * <a id='views'></a>\n   * an optional map&lt;string, object&gt; which defined multiple views, or targets views\n   * manually/explicitly.\n   *\n   * Examples:\n   *\n   * Targets three named `ui-view`s in the parent state's template\n   * <pre>views: {\n   *     header: {\n   *       controller: \"headerCtrl\",\n   *       templateUrl: \"header.html\"\n   *     }, body: {\n   *       controller: \"bodyCtrl\",\n   *       templateUrl: \"body.html\"\n   *     }, footer: {\n   *       controller: \"footCtrl\",\n   *       templateUrl: \"footer.html\"\n   *     }\n   *   }</pre>\n   *\n   * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n   * <pre>views: {\n   *     'header@top': {\n   *       controller: \"msgHeaderCtrl\",\n   *       templateUrl: \"msgHeader.html\"\n   *     }, 'body': {\n   *       controller: \"messagesCtrl\",\n   *       templateUrl: \"messages.html\"\n   *     }\n   *   }</pre>\n   *\n   * @param {boolean=} [stateConfig.abstract=false]\n   * <a id='abstract'></a>\n   * An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   * <pre>abstract: true</pre>\n   *\n   * @param {function=} stateConfig.onEnter\n   * <a id='onEnter'></a>\n   *\n   * Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onEnter: function(MyService, $stateParams) {\n   *     MyService.foo($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {function=} stateConfig.onExit\n   * <a id='onExit'></a>\n   *\n   * Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onExit: function(MyService, $stateParams) {\n   *     MyService.cleanup($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {boolean=} [stateConfig.reloadOnSearch=true]\n   * <a id='reloadOnSearch'></a>\n   *\n   * If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). \n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   * <pre>reloadOnSearch: false</pre>\n   *\n   * @param {object=} stateConfig.data\n   * <a id='data'></a>\n   *\n   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is\n   *   prototypally inherited.  In other words, adding a data property to a state adds it to\n   *   the entire subtree via prototypal inheritance.\n   *\n   * <pre>data: {\n   *     requiredRole: 'foo'\n   * } </pre>\n   *\n   * @param {object=} stateConfig.params\n   * <a id='params'></a>\n   *\n   * A map which optionally configures parameters declared in the `url`, or\n   *   defines additional non-url parameters.  For each parameter being\n   *   configured, add a configuration object keyed to the name of the parameter.\n   *\n   *   Each parameter configuration object may contain the following properties:\n   *\n   *   - ** value ** - {object|function=}: specifies the default value for this\n   *     parameter.  This implicitly sets this parameter as optional.\n   *\n   *     When UI-Router routes to a state and no value is\n   *     specified for this parameter in the URL or transition, the\n   *     default value will be used instead.  If `value` is a function,\n   *     it will be injected and invoked, and the return value used.\n   *\n   *     *Note*: `undefined` is treated as \"no default value\" while `null`\n   *     is treated as \"the default value is `null`\".\n   *\n   *     *Shorthand*: If you only need to configure the default value of the\n   *     parameter, you may use a shorthand syntax.   In the **`params`**\n   *     map, instead mapping the param name to a full parameter configuration\n   *     object, simply set map it to the default parameter value, e.g.:\n   *\n   * <pre>// define a parameter's default value\n   * params: {\n   *     param1: { value: \"defaultValue\" }\n   * }\n   * // shorthand default values\n   * params: {\n   *     param1: \"defaultValue\",\n   *     param2: \"param2Default\"\n   * }</pre>\n   *\n   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be\n   *     treated as an array of values.  If you specified a Type, the value will be\n   *     treated as an array of the specified Type.  Note: query parameter values\n   *     default to a special `\"auto\"` mode.\n   *\n   *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter\n   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values\n   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if\n   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single\n   *     value (e.g.: `{ foo: '1' }`).\n   *\n   * <pre>params: {\n   *     param1: { array: true }\n   * }</pre>\n   *\n   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the\n   *     configured default squash policy.\n   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})\n   *\n   *   There are three squash settings:\n   *\n   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL\n   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed\n   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.\n   *       This can allow for cleaner looking URLs.\n   *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n   *\n   * <pre>params: {\n   *     param1: {\n   *       value: \"defaultId\",\n   *       squash: true\n   * } }\n   * // squash \"defaultValue\" to \"~\"\n   * params: {\n   *     param1: {\n   *       value: \"defaultValue\",\n   *       squash: \"~\"\n   * } }\n   * </pre>\n   *\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   */\n  this.state = state;\n  function state(name, definition) {\n    /*jshint validthis: true */\n    if (isObject(name)) definition = name;\n    else definition.name = name;\n    registerState(definition);\n    return this;\n  }\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$state\n   *\n   * @requires $rootScope\n   * @requires $q\n   * @requires ui.router.state.$view\n   * @requires $injector\n   * @requires ui.router.util.$resolve\n   * @requires ui.router.state.$stateParams\n   * @requires ui.router.router.$urlRouter\n   *\n   * @property {object} params A param object, e.g. {sectionId: section.id)}, that \n   * you'd like to test against the current active state.\n   * @property {object} current A reference to the state's config object. However \n   * you passed it in. Useful for accessing custom data.\n   * @property {object} transition Currently pending transition. A promise that'll \n   * resolve or reject.\n   *\n   * @description\n   * `$state` service is responsible for representing states as well as transitioning\n   * between them. It also provides interfaces to ask for current state or even states\n   * you're coming from.\n   */\n  this.$get = $get;\n  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {\n\n    var TransitionSupersededError = new Error('transition superseded');\n\n    var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));\n    var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));\n    var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));\n    var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));\n\n    // Handles the case where a state which is the target of a transition is not found, and the user\n    // can optionally retry or defer the transition\n    function handleRedirect(redirect, state, params, options) {\n      /**\n       * @ngdoc event\n       * @name ui.router.state.$state#$stateNotFound\n       * @eventOf ui.router.state.$state\n       * @eventType broadcast on root scope\n       * @description\n       * Fired when a requested state **cannot be found** using the provided state name during transition.\n       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,\n       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the\n       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.\n       *\n       * @param {Object} event Event object.\n       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.\n       * @param {State} fromState Current state object.\n       * @param {Object} fromParams Current state params.\n       *\n       * @example\n       *\n       * <pre>\n       * // somewhere, assume lazy.state has not been defined\n       * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});\n       *\n       * // somewhere else\n       * $scope.$on('$stateNotFound',\n       * function(event, unfoundState, fromState, fromParams){\n       *     console.log(unfoundState.to); // \"lazy.state\"\n       *     console.log(unfoundState.toParams); // {a:1, b:2}\n       *     console.log(unfoundState.options); // {inherit:false} + default options\n       * })\n       * </pre>\n       */\n      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);\n\n      if (evt.defaultPrevented) {\n        $urlRouter.update();\n        return TransitionAborted;\n      }\n\n      if (!evt.retry) {\n        return null;\n      }\n\n      // Allow the handler to return a promise to defer state lookup retry\n      if (options.$retry) {\n        $urlRouter.update();\n        return TransitionFailed;\n      }\n      var retryTransition = $state.transition = $q.when(evt.retry);\n\n      retryTransition.then(function() {\n        if (retryTransition !== $state.transition) {\n          $rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);\n          return TransitionSuperseded;\n        }\n        redirect.options.$retry = true;\n        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);\n      }, function() {\n        return TransitionAborted;\n      });\n      $urlRouter.update();\n\n      return retryTransition;\n    }\n\n    root.locals = { resolve: null, globals: { $stateParams: {} } };\n\n    $state = {\n      params: {},\n      current: root.self,\n      $current: root,\n      transition: null\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#reload\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method that force reloads the current state. All resolves are re-resolved,\n     * controllers reinstantiated, and events re-fired.\n     *\n     * @example\n     * <pre>\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n     *\n     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example\n     * <pre>\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' \n     * //and current state is 'contacts.detail.item'\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.reload = function reload(state) {\n      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#go\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Convenience method for transitioning to a new state. `$state.go` calls \n     * `$state.transitionTo` internally but automatically sets options to \n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. \n     * This allows you to easily use an absolute or relative to path and specify \n     * only the parameters you'd like to update (while letting unspecified parameters \n     * inherit from the currently active ancestor states).\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * </pre>\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n     *\n     * @param {string} to Absolute state name or relative state path. Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to a parent state\n     * - `$state.go('^.sibling')` - will go to a sibling state\n     * - `$state.go('.child.grandchild')` - will go to grandchild state\n     *\n     * @param {object=} params A map of the parameters that will be sent to the state, \n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently \n     * defined parameters. Only parameters specified in the state definition can be overridden, new \n     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n     * will get you all current parameters, etc.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params\n     *    have changed.  It will reload the resolves and views of the current state and parent states.\n     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \\\n     *    the transition reloads the resolves and views for that matched state, and all its children states.\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     *\n     * Possible success values:\n     *\n     * - $state.current\n     *\n     * <br/>Possible rejection values:\n     *\n     * - 'transition superseded' - when a newer transition has been started after this one\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n     *   when a `$stateNotFound` `event.retry` promise errors.\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n     * - *resolve error* - when an error has occurred with a `resolve`\n     *\n     */\n    $state.go = function go(to, params, options) {\n      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#transitionTo\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * </pre>\n     *\n     * @param {string} to State name.\n     * @param {object=} toParams A map of the parameters that will be sent to the state,\n     * will populate $stateParams.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *    if String, then will reload the state with the name given in reload, and any children.\n     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.transitionTo = function transitionTo(to, toParams, options) {\n      toParams = toParams || {};\n      options = extend({\n        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false\n      }, options || {});\n\n      var from = $state.$current, fromParams = $state.params, fromPath = from.path;\n      var evt, toState = findState(to, options.relative);\n\n      // Store the hash param for later (since it will be stripped out by various methods)\n      var hash = toParams['#'];\n\n      if (!isDefined(toState)) {\n        var redirect = { to: to, toParams: toParams, options: options };\n        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);\n\n        if (redirectResult) {\n          return redirectResult;\n        }\n\n        // Always retry once if the $stateNotFound was not prevented\n        // (handles either redirect changed or state lazy-definition)\n        to = redirect.to;\n        toParams = redirect.toParams;\n        options = redirect.options;\n        toState = findState(to, options.relative);\n\n        if (!isDefined(toState)) {\n          if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");\n          throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");\n        }\n      }\n      if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");\n      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);\n      if (!toState.params.$$validates(toParams)) return TransitionFailed;\n\n      toParams = toState.params.$$values(toParams);\n      to = toState;\n\n      var toPath = to.path;\n\n      // Starting from the root of the path, keep all levels that haven't changed\n      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];\n\n      if (!options.reload) {\n        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      } else if (isString(options.reload) || isObject(options.reload)) {\n        if (isObject(options.reload) && !options.reload.name) {\n          throw new Error('Invalid reload state object');\n        }\n        \n        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);\n        if (options.reload && !reloadState) {\n          throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        }\n\n        while (state && state === fromPath[keep] && state !== reloadState) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      }\n\n      // If we're going to the same state and all locals are kept, we've got nothing to do.\n      // But clear 'transition', as we still want to cancel any other pending transitions.\n      // TODO: We may not want to bump 'transition' if we're called from a location change\n      // that we've initiated ourselves, because we might accidentally abort a legitimate\n      // transition initiated from code?\n      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {\n        if (hash) toParams['#'] = hash;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);\n        if (options.location && to.navigable && to.navigable.url) {\n          $urlRouter.push(to.navigable.url, toParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n          $urlRouter.update(true);\n        }\n        $state.transition = null;\n        return $q.when($state.current);\n      }\n\n      // Filter parameters before we pass them to event handlers etc.\n      toParams = filterByKeys(to.params.$$keys(), toParams || {});\n      \n      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart\n      if (hash) toParams['#'] = hash;\n      \n      // Broadcast start event and cancel the transition if requested\n      if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeStart\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when the state transition **begins**. You can use `event.preventDefault()`\n         * to prevent the transition from happening and then the transition promise will be\n         * rejected with a `'transition prevented'` value.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         *\n         * @example\n         *\n         * <pre>\n         * $rootScope.$on('$stateChangeStart',\n         * function(event, toState, toParams, fromState, fromParams){\n         *     event.preventDefault();\n         *     // transitionTo() promise will be rejected with\n         *     // a 'transition prevented' error\n         * })\n         * </pre>\n         */\n        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          //Don't update and resync url if there's been a new transition started. see issue #2238, #600\n          if ($state.transition == null) $urlRouter.update();\n          return TransitionPrevented;\n        }\n      }\n\n      // Resolve locals for the remaining states, but don't update any global state just\n      // yet -- if anything fails to resolve the current state needs to remain untouched.\n      // We also set up an inheritance chain for the locals here. This allows the view directive\n      // to quickly look up the correct definition for each view in the current state. Even\n      // though we create the locals object itself outside resolveState(), it is initially\n      // empty and gets filled asynchronously. We need to keep track of the promise for the\n      // (fully resolved) current locals, and pass this down the chain.\n      var resolved = $q.when(locals);\n\n      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {\n        locals = toLocals[l] = inherit(locals);\n        resolved = resolveState(state, toParams, state === to, resolved, locals, options);\n      }\n\n      // Once everything is resolved, we are ready to perform the actual transition\n      // and return a promise for the new state. We also keep track of what the\n      // current promise is, so that we can detect overlapping transitions and\n      // keep only the outcome of the last transition.\n      var transition = $state.transition = resolved.then(function () {\n        var l, entering, exiting;\n\n        if ($state.transition !== transition) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          return TransitionSuperseded;\n        }\n\n        // Exit 'from' states not kept\n        for (l = fromPath.length - 1; l >= keep; l--) {\n          exiting = fromPath[l];\n          if (exiting.self.onExit) {\n            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);\n          }\n          exiting.locals = null;\n        }\n\n        // Enter 'to' states not kept\n        for (l = keep; l < toPath.length; l++) {\n          entering = toPath[l];\n          entering.locals = toLocals[l];\n          if (entering.self.onEnter) {\n            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);\n          }\n        }\n\n        // Run it again, to catch any transitions in callbacks\n        if ($state.transition !== transition) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          return TransitionSuperseded;\n        }\n\n        // Update globals in $state\n        $state.$current = to;\n        $state.current = to.self;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        $state.transition = null;\n\n        if (options.location && to.navigable) {\n          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n        }\n\n        if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeSuccess\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired once the state transition is **complete**.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         */\n          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);\n        }\n        $urlRouter.update(true);\n\n        return $state.current;\n      }).then(null, function (error) {\n        // propagate TransitionSuperseded error without emitting $stateChangeCancel\n        // as it was already emitted in the success handler above\n        if (error === TransitionSupersededError) return TransitionSuperseded;\n\n        if ($state.transition !== transition) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          return TransitionSuperseded;\n        }\n\n        $state.transition = null;\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeError\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when an **error occurs** during transition. It's important to note that if you\n         * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n         * they will not throw traditionally. You must listen for this $stateChangeError event to\n         * catch **ALL** errors.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         * @param {Error} error The resolve error object.\n         */\n        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);\n\n        if (!evt.defaultPrevented) {\n          $urlRouter.update();\n        }\n\n        return $q.reject(error);\n      });\n\n      return transition;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#is\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n     * but only checks for the full state name. If params is supplied then it will be\n     * tested for strict equality against the current active params object, so all params\n     * must match with none missing and no extras.\n     *\n     * @example\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it is the state.\n     */\n    $state.is = function is(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) { return undefined; }\n      if ($state.$current !== state) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#includes\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * @example\n     * Partial and relative names\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     *\n     * // Using relative names (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n     * </pre>\n     *\n     * Basic globbing patterns\n     * <pre>\n     * $state.$current.name = 'contacts.details.item.url';\n     *\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * </pre>\n     *\n     * @param {string} stateOrName A partial name, relative name, or glob pattern\n     * to be searched for within the current state name.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n     * that you'd like to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    $state.includes = function includes(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      if (isString(stateOrName) && isGlob(stateOrName)) {\n        if (!doesStateMatchGlob(stateOrName)) {\n          return false;\n        }\n        stateOrName = $state.$current.name;\n      }\n\n      var state = findState(stateOrName, options.relative);\n      if (!isDefined(state)) { return undefined; }\n      if (!isDefined($state.$current.includes[state.name])) { return false; }\n      if (!params) { return true; }\n\n      var keys = objectKeys(params);\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i], paramDef = state.params[key];\n        if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#href\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A url generation method that returns the compiled url for the given state populated with the given params.\n     *\n     * @example\n     * <pre>\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n     * @param {object=} params An object of parameter values to fill the state's required parameters.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n     *    ancestor with a valid url).\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     * \n     * @returns {string} compiled state url\n     */\n    $state.href = function href(stateOrName, params, options) {\n      options = extend({\n        lossy:    true,\n        inherit:  true,\n        absolute: false,\n        relative: $state.$current\n      }, options || {});\n\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) return null;\n      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);\n      \n      var nav = (state && options.lossy) ? state.navigable : state;\n\n      if (!nav || nav.url === undefined || nav.url === null) {\n        return null;\n      }\n      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {\n        absolute: options.absolute\n      });\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#get\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Returns the state configuration object for any specific state or all states.\n     *\n     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for\n     * the requested state. If not provided, returns an array of ALL state configs.\n     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n     * @returns {Object|Array} State configuration object or array of all objects.\n     */\n    $state.get = function (stateOrName, context) {\n      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });\n      var state = findState(stateOrName, context || $state.$current);\n      return (state && state.self) ? state.self : null;\n    };\n\n    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {\n      // Make a restricted $stateParams with only the parameters that apply to this state if\n      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,\n      // we also need $stateParams to be available for any $injector calls we make during the\n      // dependency resolution process.\n      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);\n      var locals = { $stateParams: $stateParams };\n\n      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.\n      // We're also including $stateParams in this; that way the parameters are restricted\n      // to the set that should be visible to the state, and are independent of when we update\n      // the global $state and $stateParams values.\n      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);\n      var promises = [dst.resolve.then(function (globals) {\n        dst.globals = globals;\n      })];\n      if (inherited) promises.push(inherited);\n\n      function resolveViews() {\n        var viewsPromises = [];\n\n        // Resolve template and dependencies for all views.\n        forEach(state.views, function (view, name) {\n          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});\n          injectables.$template = [ function () {\n            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n          }];\n\n          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {\n            // References to the controller (only instantiated at link time)\n            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {\n              var injectLocals = angular.extend({}, injectables, dst.globals);\n              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);\n            } else {\n              result.$$controller = view.controller;\n            }\n            // Provide access to the state itself for internal use\n            result.$$state = state;\n            result.$$controllerAs = view.controllerAs;\n            result.$$resolveAs = view.resolveAs;\n            dst[name] = result;\n          }));\n        });\n\n        return $q.all(viewsPromises).then(function(){\n          return dst.globals;\n        });\n      }\n\n      // Wait for all the promises and then return the activation object\n      return $q.all(promises).then(resolveViews).then(function (values) {\n        return dst;\n      });\n    }\n\n    return $state;\n  }\n\n  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {\n    // Return true if there are no differences in non-search (path/object) params, false if there are differences\n    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {\n      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.\n      function notSearchParam(key) {\n        return fromAndToState.params[key].location != \"search\";\n      }\n      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);\n      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));\n      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);\n      return nonQueryParamSet.$$equals(fromParams, toParams);\n    }\n\n    // If reload was not explicitly requested\n    // and we're transitioning to the same state we're already in\n    // and    the locals didn't change\n    //     or they changed in a way that doesn't merit reloading\n    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)\n    // Then return true.\n    if (!options.reload && to === from &&\n      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {\n      return true;\n    }\n  }\n}\n\nangular.module('ui.router.state')\n  .factory('$stateParams', function () { return {}; })\n  .constant(\"$state.runtime\", { autoinject: true })\n  .provider('$state', $StateProvider)\n  // Inject $state to initialize when entering runtime. #2574\n  .run(['$injector', function ($injector) {\n    // Allow tests (stateSpec.js) to turn this off by defining this constant\n    if ($injector.get(\"$state.runtime\").autoinject) {\n      $injector.get('$state');\n    }\n  }]);\n\n\n$ViewProvider.$inject = [];\nfunction $ViewProvider() {\n\n  this.$get = $get;\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$view\n   *\n   * @requires ui.router.util.$templateFactory\n   * @requires $rootScope\n   *\n   * @description\n   *\n   */\n  $get.$inject = ['$rootScope', '$templateFactory'];\n  function $get(   $rootScope,   $templateFactory) {\n    return {\n      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$view#load\n       * @methodOf ui.router.state.$view\n       *\n       * @description\n       *\n       * @param {string} name name\n       * @param {object} options option object.\n       */\n      load: function load(name, options) {\n        var result, defaults = {\n          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}\n        };\n        options = extend(defaults, options);\n\n        if (options.view) {\n          result = $templateFactory.fromConfig(options.view, options.params, options.locals);\n        }\n        return result;\n      }\n    };\n  }\n}\n\nangular.module('ui.router.state').provider('$view', $ViewProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-view\n *\n * @requires ui.router.state.$state\n * @requires $compile\n * @requires $controller\n * @requires $injector\n * @requires ui.router.state.$uiViewScroll\n * @requires $document\n *\n * @restrict ECA\n *\n * @description\n * The ui-view directive tells $state where to place your templates.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @example\n * A view can be unnamed or named.\n * <pre>\n * <!-- Unnamed -->\n * <div ui-view></div>\n *\n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * </pre>\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a\n * single view and it is unnamed then you can populate it like so:\n * <pre>\n * <div ui-view></div>\n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * </pre>\n *\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}\n * config property, by name, in this case an empty name:\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * But typically you'll only use the views property if you name your view or have more than one view\n * in the same template. There's not really a compelling reason to name a view if its the only one,\n * but you could if you wanted, like so:\n * <pre>\n * <div ui-view=\"main\"></div>\n * </pre>\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Really though, you'll use views to set up multiple views:\n * <pre>\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div>\n * <div ui-view=\"data\"></div>\n * </pre>\n *\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Examples for `autoscroll`:\n *\n * <pre>\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * </pre>\n *\n * Resolve data:\n *\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n *\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n * depends on `$resolve` data.\n *\n * Example usage of $resolve in a view template\n * <pre>\n * $stateProvider.state('home', {\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\n *   resolve: {\n *     user: function(UserService) { return UserService.fetchUser(); }\n *   }\n * });\n * </pre>\n */\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate,   $q) {\n\n  function getService() {\n    return ($injector.has) ? function(service) {\n      return $injector.has(service) ? $injector.get(service) : null;\n    } : function(service) {\n      try {\n        return $injector.get(service);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n\n  var service = getService(),\n      $animator = service('$animator'),\n      $animate = service('$animate');\n\n  // Returns a set of DOM manipulation functions based on which Angular version\n  // it should use\n  function getRenderer(attrs, scope) {\n    var statics = function() {\n      return {\n        enter: function (element, target, cb) { target.after(element); cb(); },\n        leave: function (element, cb) { element.remove(); cb(); }\n      };\n    };\n\n    if ($animate) {\n      return {\n        enter: function(element, target, cb) {\n          if (angular.version.minor > 2) {\n            $animate.enter(element, null, target).then(cb);\n          } else {\n            $animate.enter(element, null, target, cb);\n          }\n        },\n        leave: function(element, cb) {\n          if (angular.version.minor > 2) {\n            $animate.leave(element).then(cb);\n          } else {\n            $animate.leave(element, cb);\n          }\n        }\n      };\n    }\n\n    if ($animator) {\n      var animate = $animator && $animator(scope, attrs);\n\n      return {\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },\n        leave: function(element, cb) { animate.leave(element); cb(); }\n      };\n    }\n\n    return statics();\n  }\n\n  var directive = {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n      return function (scope, $element, attrs) {\n        var previousEl, currentEl, currentScope, latestLocals,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope),\n            inherited     = $element.inheritedData('$uiView');\n\n        scope.$on('$stateChangeSuccess', function() {\n          updateView(false);\n        });\n\n        updateView(true);\n\n        function cleanupLastView() {\n          if (previousEl) {\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            var $uiViewData = currentEl.data('$uiViewAnim');\n            renderer.leave(currentEl, function() {\n              $uiViewData.$$animLeave.resolve();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(firstTime) {\n          var newScope,\n              name            = getUiViewName(scope, attrs, $element, $interpolate),\n              previousLocals  = name && $state.$current && $state.$current.locals[name];\n\n          if (!firstTime && previousLocals === latestLocals) return; // nothing to do\n          newScope = scope.$new();\n          latestLocals = $state.$current.locals[name];\n\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoading\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           *\n           * Fired once the view **begins loading**, *before* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          newScope.$emit('$viewContentLoading', name);\n\n          var clone = $transclude(newScope, function(clone) {\n            var animEnter = $q.defer(), animLeave = $q.defer();\n            var viewAnimData = {\n              $animEnter: animEnter.promise,\n              $animLeave: animLeave.promise,\n              $$animLeave: animLeave\n            };\n\n            clone.data('$uiViewAnim', viewAnimData);\n            renderer.enter(clone, $element, function onUiViewEnter() {\n              animEnter.resolve();\n              if(currentScope) {\n                currentScope.$emit('$viewContentAnimationEnded');\n              }\n\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            cleanupLastView();\n          });\n\n          currentEl = clone;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          currentScope.$emit('$viewContentLoaded', name);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      var initial = tElement.html();\n      return function (scope, $element, attrs) {\n        var current = $state.$current,\n            name = getUiViewName(scope, attrs, $element, $interpolate),\n            locals  = current && current.locals[name];\n\n        if (! locals) {\n          return;\n        }\n\n        $element.data('$uiView', { name: name, state: locals.$$state });\n        $element.html(locals.$template ? locals.$template : initial);\n\n        var resolveData = angular.extend({}, locals);\n        scope[locals.$$resolveAs] = resolveData;\n\n        var link = $compile($element.contents());\n\n        if (locals.$$controller) {\n          locals.$scope = scope;\n          locals.$element = $element;\n          var controller = $controller(locals.$$controller, locals);\n          if (locals.$$controllerAs) {\n            scope[locals.$$controllerAs] = controller;\n            scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;\n          }\n          if (isFunction(controller.$onInit)) controller.$onInit();\n          $element.data('$ngControllerController', controller);\n          $element.children().data('$ngControllerController', controller);\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/**\n * Shared ui-view code for both directives:\n * Given scope, element, and its attributes, return the view's name\n */\nfunction getUiViewName(scope, attrs, element, $interpolate) {\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n  var uiViewCreatedBy = element.inheritedData('$uiView');\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));\n}\n\nangular.module('ui.router.state').directive('uiView', $ViewDirective);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\nfunction parseStateRef(ref, current) {\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\nfunction stateContext(el) {\n  var stateData = el.parent().inheritedData('$uiView');\n\n  if (stateData && stateData.state && stateData.state.name) {\n    return stateData.state;\n  }\n}\n\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\nfunction clickHook(el, $state, $timeout, type, current) {\n  return function(e) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\nfunction defaultOpts(el, $state) {\n  return { relative: stateContext(el) || $state.$current, inherit: true };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref\n *\n * @requires ui.router.state.$state\n * @requires $timeout\n *\n * @restrict A\n *\n * @description\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n * URL, the directive will automatically generate & update the `href` attribute via\n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n * the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`. You just need to be aware that the path is relative\n * to the state that the link lives in, in other words the state that loaded the\n * template containing the link.\n *\n * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n * and `reload`.\n *\n * @example\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n * following template:\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n */\n$StateRefDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def    = { state: ref.state, href: null, params: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n      var hookFn;\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element[element.on ? 'on' : 'bind'](\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element[element.off ? 'off' : 'unbind'](\"click\", hookFn);\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-state\n *\n * @requires ui.router.state.uiSref\n *\n * @restrict A\n *\n * @description\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}\n * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n */\n$StateRefDynamicDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDynamicDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def    = { state: null, params: null, options: null, href: null };\n      var unlinkInfoFn = null;\n      var hookFn;\n\n      function runStateRefLink (group) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });\n      element[element.on ? 'on' : 'bind'](\"click\", hookFn);\n      scope.$on('$destroy', function() {\n        element[element.off ? 'off' : 'unbind'](\"click\", hookFn);\n      });\n    }\n  };\n}\n\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use\n * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}\n *\n * @example\n * Given the following template:\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * @Example\n * Given the following template, with \"admin\" being an abstract state:\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active-eq\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate\n * when the exact target state used in the `ui-sref` is active; no child states.\n *\n */\n$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName, activeClass) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        var stateInfo = {\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        };\n\n        states.push(stateInfo);\n        activeClasses[stateHash] = activeClass;\n\n        return function removeState() {\n          var idx = states.indexOf(stateInfo);\n          if (idx !== -1) states.splice(idx, 1);\n        };\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state, params) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el, className) { el.removeClass(className); }\n      function anyMatch(state, params) { return $state.includes(state.name, params); }\n      function exactMatch(state, params) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}\n\nangular.module('ui.router.state')\n  .directive('uiSref', $StateRefDirective)\n  .directive('uiSrefActive', $StateRefActiveDirective)\n  .directive('uiSrefActiveEq', $StateRefActiveDirective)\n  .directive('uiState', $StateRefDynamicDirective);\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n  var isFilter = function (state, params) {\n    return $state.is(state, params);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n  var includesFilter = function (state, params, options) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n})(window, window.angular);","\n/*\n * Konva JavaScript Framework v1.2.2\n * http://konvajs.github.io/\n * Licensed under the MIT or GPL Version 2 licenses.\n * Date: Tue Sep 20 2016\n *\n * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)\n * Modified work Copyright (C) 2014 - 2015 by Anton Lavrenov (Konva)\n *\n * @license\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n// runtime check for already included Konva\n(function(global){\n    'use strict';\n    /**\n     * @namespace Konva\n     */\n\n    var PI_OVER_180 = Math.PI / 180;\n\n    var Konva = {\n        // public\n        version: '1.2.2',\n\n        // private\n        stages: [],\n        idCounter: 0,\n        ids: {},\n        names: {},\n        shapes: {},\n        listenClickTap: false,\n        inDblClickWindow: false,\n\n        // configurations\n        enableTrace: false,\n        traceArrMax: 100,\n        dblClickWindow: 400,\n        /**\n         * Global pixel ratio configuration. KonvaJS automatically detect pixel ratio of current device.\n         * But you may override such property, if you want to use your value.\n         * @property pixelRatio\n         * @default undefined\n         * @memberof Konva\n         * @example\n         * Konva.pixelRatio = 1;\n         */\n        pixelRatio: undefined,\n        /**\n         * Drag distance property. If you start to drag a node you may want to wait until pointer is moved to some distance from start point,\n         * only then start dragging.\n         * @property dragDistance\n         * @default 0\n         * @memberof Konva\n         * @example\n         * Konva.dragDistance = 10;\n         */\n        dragDistance: 0,\n        /**\n         * Use degree values for angle properties. You may set this property to false if you want to use radiant values.\n         * @property angleDeg\n         * @default true\n         * @memberof Konva\n         * @example\n         * node.rotation(45); // 45 degrees\n         * Konva.angleDeg = false;\n         * node.rotation(Math.PI / 2); // PI/2 radian\n         */\n        angleDeg: true,\n         /**\n         * Show different warnings about errors or wrong API usage\n         * @property showWarnings\n         * @default true\n         * @memberof Konva\n         * @example\n         * Konva.showWarnings = false;\n         */\n        showWarnings: true,\n\n\n\n        /**\n         * @namespace Filters\n         * @memberof Konva\n         */\n        Filters: {},\n\n        /**\n         * returns whether or not drag and drop is currently active\n         * @method\n         * @memberof Konva\n         */\n        isDragging: function() {\n            var dd = Konva.DD;\n\n            // if DD is not included with the build, then\n            // drag and drop is not even possible\n            if (dd) {\n                return dd.isDragging;\n            }\n            return false;\n        },\n        /**\n        * returns whether or not a drag and drop operation is ready, but may\n        *  not necessarily have started\n        * @method\n        * @memberof Konva\n        */\n        isDragReady: function() {\n            var dd = Konva.DD;\n\n            // if DD is not included with the build, then\n            // drag and drop is not even possible\n            if (dd) {\n                return !!dd.node;\n            }\n            return false;\n        },\n        _addId: function(node, id) {\n            if(id !== undefined) {\n                this.ids[id] = node;\n            }\n        },\n        _removeId: function(id) {\n            if(id !== undefined) {\n                delete this.ids[id];\n            }\n        },\n        _addName: function(node, name) {\n            if(name) {\n                if(!this.names[name]) {\n                    this.names[name] = [];\n                }\n                this.names[name].push(node);\n            }\n        },\n        _removeName: function(name, _id) {\n            if(!name) {\n                return;\n            }\n            var nodes = this.names[name];\n            if(!nodes) {\n                return;\n            }\n            for(var n = 0; n < nodes.length; n++) {\n                var no = nodes[n];\n                if(no._id === _id) {\n                    nodes.splice(n, 1);\n                }\n            }\n            if(nodes.length === 0) {\n                delete this.names[name];\n            }\n        },\n        getAngle: function(angle) {\n            return this.angleDeg ? angle * PI_OVER_180 : angle;\n        },\n        _detectIE: function(ua) {\n            var msie = ua.indexOf('msie ');\n            if (msie > 0) {\n                // IE 10 or older => return version number\n                return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n            }\n\n            var trident = ua.indexOf('trident/');\n            if (trident > 0) {\n                // IE 11 => return version number\n                var rv = ua.indexOf('rv:');\n                return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n            }\n\n            var edge = ua.indexOf('edge/');\n            if (edge > 0) {\n                // Edge (IE 12+) => return version number\n                return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n            }\n\n            // other browser\n            return false;\n        },\n        _parseUA: function(userAgent) {\n            var ua = userAgent.toLowerCase(),\n                // jQuery UA regex\n                match = /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\n                /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\n                /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\n                /(msie) ([\\w.]+)/.exec( ua ) ||\n                ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\n                [],\n\n                // adding mobile flag as well\n                mobile = !!(userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i)),\n                ieMobile = !!(userAgent.match(/IEMobile/i));\n\n            return {\n                browser: match[ 1 ] || '',\n                version: match[ 2 ] || '0',\n                isIE: Konva._detectIE(ua),\n                // adding mobile flab\n                mobile: mobile,\n                ieMobile: ieMobile  // If this is true (i.e., WP8), then Konva touch events are executed instead of equivalent Konva mouse events\n            };\n        },\n        // user agent\n        UA: undefined\n    };\n\n    var glob =\n        typeof window !== 'undefined' ? window :\n        typeof global !== 'undefined' ? global :\n        typeof WorkerGlobalScope !== 'undefined' ? self : {};\n\n\n    Konva.UA = Konva._parseUA((glob.navigator && glob.navigator.userAgent) || '');\n\n\n    if (glob.Konva) {\n        console.error(\n            'Konva instance is already exist in current eviroment. ' +\n            'Please use only one instance.'\n        );\n    }\n    glob.Konva = Konva;\n    Konva.global = glob;\n\n\n    if( typeof exports === 'object') {\n        // runtime-check for browserify and nw.js (node-webkit)\n        if(glob.window && glob.window.document) {\n            Konva.document = glob.window.document;\n            Konva.window = glob.window;\n        } else {\n            // Node. Does not work with strict CommonJS, but\n            // only CommonJS-like enviroments that support module.exports,\n            // like Node.\n            var Canvas = require('canvas');\n            var jsdom = require('jsdom').jsdom;\n\n            Konva.window = jsdom('<!DOCTYPE html><html><head></head><body></body></html>').defaultView;\n            Konva.document = Konva.window.document;\n            Konva.window.Image = Canvas.Image;\n            Konva._nodeCanvas = Canvas;\n        }\n        module.exports = Konva;\n        return;\n    }\n    else if( typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(function() {\n            return Konva;\n        });\n    }\n    Konva.document = document;\n    Konva.window = window;\n})(typeof window !== 'undefined' ? window : global);\n\n/*eslint-disable  eqeqeq, no-cond-assign, no-empty*/\n(function() {\n    'use strict';\n    /**\n     * Collection constructor.  Collection extends\n     *  Array.  This class is used in conjunction with {@link Konva.Container#get}\n     * @constructor\n     * @memberof Konva\n     */\n    Konva.Collection = function() {\n        var args = [].slice.call(arguments), length = args.length, i = 0;\n\n        this.length = length;\n        for(; i < length; i++) {\n            this[i] = args[i];\n        }\n        return this;\n    };\n    Konva.Collection.prototype = [];\n    /**\n     * iterate through node array and run a function for each node.\n     *  The node and index is passed into the function\n     * @method\n     * @memberof Konva.Collection.prototype\n     * @param {Function} func\n     * @example\n     * // get all nodes with name foo inside layer, and set x to 10 for each\n     * layer.get('.foo').each(function(shape, n) {\n     *   shape.setX(10);\n     * });\n     */\n    Konva.Collection.prototype.each = function(func) {\n        for(var n = 0; n < this.length; n++) {\n            func(this[n], n);\n        }\n    };\n    /**\n     * convert collection into an array\n     * @method\n     * @memberof Konva.Collection.prototype\n     */\n    Konva.Collection.prototype.toArray = function() {\n        var arr = [],\n            len = this.length,\n            n;\n\n        for(n = 0; n < len; n++) {\n            arr.push(this[n]);\n        }\n        return arr;\n    };\n    /**\n     * convert array into a collection\n     * @method\n     * @memberof Konva.Collection\n     * @param {Array} arr\n     */\n    Konva.Collection.toCollection = function(arr) {\n        var collection = new Konva.Collection(),\n            len = arr.length,\n            n;\n\n        for(n = 0; n < len; n++) {\n            collection.push(arr[n]);\n        }\n        return collection;\n    };\n\n    // map one method by it's name\n    Konva.Collection._mapMethod = function(methodName) {\n        Konva.Collection.prototype[methodName] = function() {\n            var len = this.length,\n                i;\n\n            var args = [].slice.call(arguments);\n            for(i = 0; i < len; i++) {\n                this[i][methodName].apply(this[i], args);\n            }\n\n            return this;\n        };\n    };\n\n    Konva.Collection.mapMethods = function(constructor) {\n        var prot = constructor.prototype;\n        for(var methodName in prot) {\n            Konva.Collection._mapMethod(methodName);\n        }\n    };\n\n    /*\n    * Last updated November 2011\n    * By Simon Sarris\n    * www.simonsarris.com\n    * sarris@acm.org\n    *\n    * Free to use and distribute at will\n    * So long as you are nice to people, etc\n    */\n\n    /*\n    * The usage of this class was inspired by some of the work done by a forked\n    * project, KineticJS-Ext by Wappworks, which is based on Simon's Transform\n    * class.  Modified by Eric Rowell\n    */\n\n    /**\n     * Transform constructor\n     * @constructor\n     * @param {Array} [m] Optional six-element matrix\n     * @memberof Konva\n     */\n    Konva.Transform = function(m) {\n        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];\n    };\n\n    Konva.Transform.prototype = {\n        /**\n         * Copy Konva.Transform object\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @returns {Konva.Transform}\n         */\n        copy: function() {\n            return new Konva.Transform(this.m);\n        },\n        /**\n         * Transform point\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Object} point 2D point(x, y)\n         * @returns {Object} 2D point(x, y)\n         */\n        point: function(point) {\n            var m = this.m;\n            return {\n                x: m[0] * point.x + m[2] * point.y + m[4],\n                y: m[1] * point.x + m[3] * point.y + m[5]\n            };\n        },\n        /**\n         * Apply translation\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Number} x\n         * @param {Number} y\n         * @returns {Konva.Transform}\n         */\n        translate: function(x, y) {\n            this.m[4] += this.m[0] * x + this.m[2] * y;\n            this.m[5] += this.m[1] * x + this.m[3] * y;\n            return this;\n        },\n        /**\n         * Apply scale\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Number} sx\n         * @param {Number} sy\n         * @returns {Konva.Transform}\n         */\n        scale: function(sx, sy) {\n            this.m[0] *= sx;\n            this.m[1] *= sx;\n            this.m[2] *= sy;\n            this.m[3] *= sy;\n            return this;\n        },\n        /**\n         * Apply rotation\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Number} rad  Angle in radians\n         * @returns {Konva.Transform}\n         */\n        rotate: function(rad) {\n            var c = Math.cos(rad);\n            var s = Math.sin(rad);\n            var m11 = this.m[0] * c + this.m[2] * s;\n            var m12 = this.m[1] * c + this.m[3] * s;\n            var m21 = this.m[0] * -s + this.m[2] * c;\n            var m22 = this.m[1] * -s + this.m[3] * c;\n            this.m[0] = m11;\n            this.m[1] = m12;\n            this.m[2] = m21;\n            this.m[3] = m22;\n            return this;\n        },\n        /**\n         * Returns the translation\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @returns {Object} 2D point(x, y)\n         */\n        getTranslation: function() {\n            return {\n                x: this.m[4],\n                y: this.m[5]\n            };\n        },\n        /**\n         * Apply skew\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Number} sx\n         * @param {Number} sy\n         * @returns {Konva.Transform}\n         */\n        skew: function(sx, sy) {\n            var m11 = this.m[0] + this.m[2] * sy;\n            var m12 = this.m[1] + this.m[3] * sy;\n            var m21 = this.m[2] + this.m[0] * sx;\n            var m22 = this.m[3] + this.m[1] * sx;\n            this.m[0] = m11;\n            this.m[1] = m12;\n            this.m[2] = m21;\n            this.m[3] = m22;\n            return this;\n         },\n        /**\n         * Transform multiplication\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @param {Konva.Transform} matrix\n         * @returns {Konva.Transform}\n         */\n        multiply: function(matrix) {\n            var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];\n            var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];\n\n            var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];\n            var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];\n\n            var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];\n            var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];\n\n            this.m[0] = m11;\n            this.m[1] = m12;\n            this.m[2] = m21;\n            this.m[3] = m22;\n            this.m[4] = dx;\n            this.m[5] = dy;\n            return this;\n        },\n        /**\n         * Invert the matrix\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @returns {Konva.Transform}\n         */\n        invert: function() {\n            var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);\n            var m0 = this.m[3] * d;\n            var m1 = -this.m[1] * d;\n            var m2 = -this.m[2] * d;\n            var m3 = this.m[0] * d;\n            var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);\n            var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\n            this.m[0] = m0;\n            this.m[1] = m1;\n            this.m[2] = m2;\n            this.m[3] = m3;\n            this.m[4] = m4;\n            this.m[5] = m5;\n            return this;\n        },\n        /**\n         * return matrix\n         * @method\n         * @memberof Konva.Transform.prototype\n         */\n        getMatrix: function() {\n            return this.m;\n        },\n        /**\n         * set to absolute position via translation\n         * @method\n         * @memberof Konva.Transform.prototype\n         * @returns {Konva.Transform}\n         * @author ericdrowell\n         */\n        setAbsolutePosition: function(x, y) {\n            var m0 = this.m[0],\n                m1 = this.m[1],\n                m2 = this.m[2],\n                m3 = this.m[3],\n                m4 = this.m[4],\n                m5 = this.m[5],\n                yt = ((m0 * (y - m5)) - (m1 * (x - m4))) / ((m0 * m3) - (m1 * m2)),\n                xt = (x - m4 - (m2 * yt)) / m0;\n\n            return this.translate(xt, yt);\n        }\n    };\n\n    // CONSTANTS\n    var CONTEXT_2D = '2d',\n        OBJECT_ARRAY = '[object Array]',\n        OBJECT_NUMBER = '[object Number]',\n        OBJECT_STRING = '[object String]',\n        PI_OVER_DEG180 = Math.PI / 180,\n        DEG180_OVER_PI = 180 / Math.PI,\n        HASH = '#',\n        EMPTY_STRING = '',\n        ZERO = '0',\n        KONVA_WARNING = 'Konva warning: ',\n        KONVA_ERROR = 'Konva error: ',\n        RGB_PAREN = 'rgb(',\n        COLORS = {\n            aliceblue: [240, 248, 255],\n            antiquewhite: [250, 235, 215],\n            aqua: [0, 255, 255],\n            aquamarine: [127, 255, 212],\n            azure: [240, 255, 255],\n            beige: [245, 245, 220],\n            bisque: [255, 228, 196],\n            black: [0, 0, 0],\n            blanchedalmond: [255, 235, 205],\n            blue: [0, 0, 255],\n            blueviolet: [138, 43, 226],\n            brown: [165, 42, 42],\n            burlywood: [222, 184, 135],\n            cadetblue: [95, 158, 160],\n            chartreuse: [127, 255, 0],\n            chocolate: [210, 105, 30],\n            coral: [255, 127, 80],\n            cornflowerblue: [100, 149, 237],\n            cornsilk: [255, 248, 220],\n            crimson: [220, 20, 60],\n            cyan: [0, 255, 255],\n            darkblue: [0, 0, 139],\n            darkcyan: [0, 139, 139],\n            darkgoldenrod: [184, 132, 11],\n            darkgray: [169, 169, 169],\n            darkgreen: [0, 100, 0],\n            darkgrey: [169, 169, 169],\n            darkkhaki: [189, 183, 107],\n            darkmagenta: [139, 0, 139],\n            darkolivegreen: [85, 107, 47],\n            darkorange: [255, 140, 0],\n            darkorchid: [153, 50, 204],\n            darkred: [139, 0, 0],\n            darksalmon: [233, 150, 122],\n            darkseagreen: [143, 188, 143],\n            darkslateblue: [72, 61, 139],\n            darkslategray: [47, 79, 79],\n            darkslategrey: [47, 79, 79],\n            darkturquoise: [0, 206, 209],\n            darkviolet: [148, 0, 211],\n            deeppink: [255, 20, 147],\n            deepskyblue: [0, 191, 255],\n            dimgray: [105, 105, 105],\n            dimgrey: [105, 105, 105],\n            dodgerblue: [30, 144, 255],\n            firebrick: [178, 34, 34],\n            floralwhite: [255, 255, 240],\n            forestgreen: [34, 139, 34],\n            fuchsia: [255, 0, 255],\n            gainsboro: [220, 220, 220],\n            ghostwhite: [248, 248, 255],\n            gold: [255, 215, 0],\n            goldenrod: [218, 165, 32],\n            gray: [128, 128, 128],\n            green: [0, 128, 0],\n            greenyellow: [173, 255, 47],\n            grey: [128, 128, 128],\n            honeydew: [240, 255, 240],\n            hotpink: [255, 105, 180],\n            indianred: [205, 92, 92],\n            indigo: [75, 0, 130],\n            ivory: [255, 255, 240],\n            khaki: [240, 230, 140],\n            lavender: [230, 230, 250],\n            lavenderblush: [255, 240, 245],\n            lawngreen: [124, 252, 0],\n            lemonchiffon: [255, 250, 205],\n            lightblue: [173, 216, 230],\n            lightcoral: [240, 128, 128],\n            lightcyan: [224, 255, 255],\n            lightgoldenrodyellow: [250, 250, 210],\n            lightgray: [211, 211, 211],\n            lightgreen: [144, 238, 144],\n            lightgrey: [211, 211, 211],\n            lightpink: [255, 182, 193],\n            lightsalmon: [255, 160, 122],\n            lightseagreen: [32, 178, 170],\n            lightskyblue: [135, 206, 250],\n            lightslategray: [119, 136, 153],\n            lightslategrey: [119, 136, 153],\n            lightsteelblue: [176, 196, 222],\n            lightyellow: [255, 255, 224],\n            lime: [0, 255, 0],\n            limegreen: [50, 205, 50],\n            linen: [250, 240, 230],\n            magenta: [255, 0, 255],\n            maroon: [128, 0, 0],\n            mediumaquamarine: [102, 205, 170],\n            mediumblue: [0, 0, 205],\n            mediumorchid: [186, 85, 211],\n            mediumpurple: [147, 112, 219],\n            mediumseagreen: [60, 179, 113],\n            mediumslateblue: [123, 104, 238],\n            mediumspringgreen: [0, 250, 154],\n            mediumturquoise: [72, 209, 204],\n            mediumvioletred: [199, 21, 133],\n            midnightblue: [25, 25, 112],\n            mintcream: [245, 255, 250],\n            mistyrose: [255, 228, 225],\n            moccasin: [255, 228, 181],\n            navajowhite: [255, 222, 173],\n            navy: [0, 0, 128],\n            oldlace: [253, 245, 230],\n            olive: [128, 128, 0],\n            olivedrab: [107, 142, 35],\n            orange: [255, 165, 0],\n            orangered: [255, 69, 0],\n            orchid: [218, 112, 214],\n            palegoldenrod: [238, 232, 170],\n            palegreen: [152, 251, 152],\n            paleturquoise: [175, 238, 238],\n            palevioletred: [219, 112, 147],\n            papayawhip: [255, 239, 213],\n            peachpuff: [255, 218, 185],\n            peru: [205, 133, 63],\n            pink: [255, 192, 203],\n            plum: [221, 160, 203],\n            powderblue: [176, 224, 230],\n            purple: [128, 0, 128],\n            rebeccapurple: [102, 51, 153],\n            red: [255, 0, 0],\n            rosybrown: [188, 143, 143],\n            royalblue: [65, 105, 225],\n            saddlebrown: [139, 69, 19],\n            salmon: [250, 128, 114],\n            sandybrown: [244, 164, 96],\n            seagreen: [46, 139, 87],\n            seashell: [255, 245, 238],\n            sienna: [160, 82, 45],\n            silver: [192, 192, 192],\n            skyblue: [135, 206, 235],\n            slateblue: [106, 90, 205],\n            slategray: [119, 128, 144],\n            slategrey: [119, 128, 144],\n            snow: [255, 255, 250],\n            springgreen: [0, 255, 127],\n            steelblue: [70, 130, 180],\n            tan: [210, 180, 140],\n            teal: [0, 128, 128],\n            thistle: [216, 191, 216],\n            transparent: [255, 255, 255, 0],\n            tomato: [255, 99, 71],\n            turquoise: [64, 224, 208],\n            violet: [238, 130, 238],\n            wheat: [245, 222, 179],\n            white: [255, 255, 255],\n            whitesmoke: [245, 245, 245],\n            yellow: [255, 255, 0],\n            yellowgreen: [154, 205, 5]\n        },\n\n        RGB_REGEX = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/;\n\n    /**\n     * @namespace Util\n     * @memberof Konva\n     */\n    Konva.Util = {\n        /*\n         * cherry-picked utilities from underscore.js\n         */\n        _isElement: function(obj) {\n            return !!(obj && obj.nodeType == 1);\n        },\n        _isFunction: function(obj) {\n            return !!(obj && obj.constructor && obj.call && obj.apply);\n        },\n        _isObject: function(obj) {\n            return (!!obj && obj.constructor === Object);\n        },\n        _isArray: function(obj) {\n            return Object.prototype.toString.call(obj) === OBJECT_ARRAY;\n        },\n        _isNumber: function(obj) {\n            return Object.prototype.toString.call(obj) === OBJECT_NUMBER;\n        },\n        _isString: function(obj) {\n            return Object.prototype.toString.call(obj) === OBJECT_STRING;\n        },\n        // Returns a function, that, when invoked, will only be triggered at most once\n        // during a given window of time. Normally, the throttled function will run\n        // as much as it can, without ever going more than once per `wait` duration;\n        // but if you'd like to disable the execution on the leading edge, pass\n        // `{leading: false}`. To disable execution on the trailing edge, ditto.\n        _throttle: function(func, wait, opts) {\n            var context, args, result;\n            var timeout = null;\n            var previous = 0;\n            var options = opts || {};\n            var later = function() {\n                previous = options.leading === false ? 0 : new Date().getTime();\n                timeout = null;\n                result = func.apply(context, args);\n                context = args = null;\n            };\n            return function() {\n                var now = new Date().getTime();\n                if (!previous && options.leading === false) {\n                    previous = now;\n                }\n                var remaining = wait - (now - previous);\n                context = this;\n                args = arguments;\n                if (remaining <= 0) {\n                  clearTimeout(timeout);\n                  timeout = null;\n                  previous = now;\n                  result = func.apply(context, args);\n                  context = args = null;\n                } else if (!timeout && options.trailing !== false) {\n                  timeout = setTimeout(later, remaining);\n                }\n                return result;\n            };\n        },\n        /*\n         * other utils\n         */\n        _hasMethods: function(obj) {\n            var names = [],\n                key;\n\n            for(key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n                if(this._isFunction(obj[key])) {\n                    names.push(key);\n                }\n            }\n            return names.length > 0;\n        },\n        isValidSelector: function(selector) {\n            if (typeof selector !== 'string') {\n                return false;\n            }\n            var firstChar = selector[0];\n            return firstChar === '#' || firstChar === '.' || firstChar === firstChar.toUpperCase();\n        },\n        createCanvasElement: function() {\n            var canvas = Konva.document.createElement('canvas');\n            // on some environments canvas.style is readonly\n            try {\n                canvas.style = canvas.style || {};\n            } catch (e) {\n            }\n            return canvas;\n        },\n        isBrowser: function() {\n            return (typeof exports !== 'object');\n        },\n        _isInDocument: function(el) {\n            while(el = el.parentNode) {\n                if(el == Konva.document) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _simplifyArray: function(arr) {\n            var retArr = [],\n                len = arr.length,\n                util = Konva.Util,\n                n, val;\n\n            for (n = 0; n < len; n++) {\n                val = arr[n];\n                if (util._isNumber(val)) {\n                    val = Math.round(val * 1000) / 1000;\n                }\n                else if (!util._isString(val)) {\n                    val = val.toString();\n                }\n\n                retArr.push(val);\n            }\n\n            return retArr;\n        },\n        /*\n         * arg can be an image object or image data\n         */\n        _getImage: function(arg, callback) {\n            var imageObj, canvas;\n\n            // if arg is null or undefined\n            if(!arg) {\n                callback(null);\n            }\n\n            // if arg is already an image object\n            else if(this._isElement(arg)) {\n                callback(arg);\n            }\n\n            // if arg is a string, then it's a data url\n            else if(this._isString(arg)) {\n                imageObj = new Konva.window.Image();\n                imageObj.onload = function() {\n                    callback(imageObj);\n                };\n                imageObj.src = arg;\n            }\n\n            //if arg is an object that contains the data property, it's an image object\n            else if(arg.data) {\n                canvas = Konva.Util.createCanvasElement();\n                canvas.width = arg.width;\n                canvas.height = arg.height;\n                var _context = canvas.getContext(CONTEXT_2D);\n                _context.putImageData(arg, 0, 0);\n                this._getImage(canvas.toDataURL(), callback);\n            }\n            else {\n                callback(null);\n            }\n        },\n        _getRGBAString: function(obj) {\n            var red = obj.red || 0,\n                green = obj.green || 0,\n                blue = obj.blue || 0,\n                alpha = obj.alpha || 1;\n\n            return [\n                'rgba(',\n                red,\n                ',',\n                green,\n                ',',\n                blue,\n                ',',\n                alpha,\n                ')'\n            ].join(EMPTY_STRING);\n        },\n        _rgbToHex: function(r, g, b) {\n            return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n        },\n        _hexToRgb: function(hex) {\n            hex = hex.replace(HASH, EMPTY_STRING);\n            var bigint = parseInt(hex, 16);\n            return {\n                r: (bigint >> 16) & 255,\n                g: (bigint >> 8) & 255,\n                b: bigint & 255\n            };\n        },\n        /**\n         * return random hex color\n         * @method\n         * @memberof Konva.Util.prototype\n         */\n        getRandomColor: function() {\n            var randColor = (Math.random() * 0xFFFFFF << 0).toString(16);\n            while (randColor.length < 6) {\n                randColor = ZERO + randColor;\n            }\n            return HASH + randColor;\n        },\n        /**\n         * return value with default fallback\n         * @method\n         * @memberof Konva.Util.prototype\n         */\n        get: function(val, def) {\n            if (val === undefined) {\n                return def;\n            }\n            else {\n                return val;\n            }\n        },\n        /**\n         * get RGB components of a color\n         * @method\n         * @memberof Konva.Util.prototype\n         * @param {String} color\n         * @example\n         * // each of the following examples return {r:0, g:0, b:255}\n         * var rgb = Konva.Util.getRGB('blue');\n         * var rgb = Konva.Util.getRGB('#0000ff');\n         * var rgb = Konva.Util.getRGB('rgb(0,0,255)');\n         */\n        getRGB: function(color) {\n            var rgb;\n            // color string\n            if (color in COLORS) {\n                rgb = COLORS[color];\n                return {\n                    r: rgb[0],\n                    g: rgb[1],\n                    b: rgb[2]\n                };\n            }\n            // hex\n            else if (color[0] === HASH) {\n                return this._hexToRgb(color.substring(1));\n            }\n            // rgb string\n            else if (color.substr(0, 4) === RGB_PAREN) {\n                rgb = RGB_REGEX.exec(color.replace(/ /g, ''));\n                return {\n                    r: parseInt(rgb[1], 10),\n                    g: parseInt(rgb[2], 10),\n                    b: parseInt(rgb[3], 10)\n                };\n            }\n            // default\n            else {\n                return {\n                    r: 0,\n                    g: 0,\n                    b: 0\n                };\n            }\n        },\n        // convert any color string to RGBA object\n        // from https://github.com/component/color-parser\n        colorToRGBA: function(str) {\n            str = str || 'black';\n            return Konva.Util._namedColorToRBA(str)\n                || Konva.Util._hex3ColorToRGBA(str)\n                || Konva.Util._hex6ColorToRGBA(str)\n                || Konva.Util._rgbColorToRGBA(str)\n                || Konva.Util._rgbaColorToRGBA(str);\n        },\n        // Parse named css color. Like \"green\"\n        _namedColorToRBA: function(str) {\n            var c = COLORS[str.toLowerCase()];\n            if (!c) {\n                return null;\n            }\n            return {\n                r: c[0],\n                g: c[1],\n                b: c[2],\n                a: 1\n            };\n        },\n        // Parse rgb(n, n, n)\n        _rgbColorToRGBA: function(str) {\n            if (str.indexOf('rgb(') === 0) {\n                str = str.match(/rgb\\(([^)]+)\\)/)[1];\n                var parts = str.split(/ *, */).map(Number);\n                return {\n                    r: parts[0],\n                    g: parts[1],\n                    b: parts[2],\n                    a: 1\n                };\n            }\n        },\n        // Parse rgba(n, n, n, n)\n        _rgbaColorToRGBA: function(str) {\n            if (str.indexOf('rgba(') === 0) {\n                str = str.match(/rgba\\(([^)]+)\\)/)[1];\n                var parts = str.split(/ *, */).map(Number);\n                return {\n                    r: parts[0],\n                    g: parts[1],\n                    b: parts[2],\n                    a: parts[3]\n                };\n            }\n\n        },\n        // Parse #nnnnnn\n        _hex6ColorToRGBA: function(str) {\n            if ((str[0] === '#') && (str.length === 7)) {\n                return {\n                    r: parseInt(str.slice(1, 3), 16),\n                    g: parseInt(str.slice(3, 5), 16),\n                    b: parseInt(str.slice(5, 7), 16),\n                    a: 1\n                };\n            }\n        },\n        // Parse #nnn\n        _hex3ColorToRGBA: function(str) {\n            if ((str[0] === '#') && (str.length === 4)) {\n                return {\n                    r: parseInt(str[1] + str[1], 16),\n                    g: parseInt(str[2] + str[2], 16),\n                    b: parseInt(str[3] + str[3], 16),\n                    a: 1\n                };\n            }\n        },\n        // o1 takes precedence over o2\n        _merge: function(o1, o2) {\n            var retObj = this._clone(o2);\n            for(var key in o1) {\n                if(this._isObject(o1[key])) {\n                    retObj[key] = this._merge(o1[key], retObj[key]);\n                }\n                else {\n                    retObj[key] = o1[key];\n                }\n            }\n            return retObj;\n        },\n        cloneObject: function(obj) {\n            var retObj = {};\n            for(var key in obj) {\n                if(this._isObject(obj[key])) {\n                    retObj[key] = this.cloneObject(obj[key]);\n                }\n                else if (this._isArray(obj[key])) {\n                    retObj[key] = this.cloneArray(obj[key]);\n                } else {\n                    retObj[key] = obj[key];\n                }\n            }\n            return retObj;\n        },\n        cloneArray: function(arr) {\n            return arr.slice(0);\n        },\n        _degToRad: function(deg) {\n            return deg * PI_OVER_DEG180;\n        },\n        _radToDeg: function(rad) {\n            return rad * DEG180_OVER_PI;\n        },\n        _capitalize: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n        throw: function(str) {\n            throw new Error(KONVA_ERROR + str);\n        },\n        error: function(str) {\n          console.error(KONVA_ERROR + str);\n        },\n        warn: function(str) {\n            /*\n             * IE9 on Windows7 64bit will throw a JS error\n             * if we don't use window.console in the conditional\n             */\n            if(Konva.global.console && console.warn && Konva.showWarnings) {\n                console.warn(KONVA_WARNING + str);\n            }\n        },\n        extend: function(child, parent) {\n            function Ctor() {\n                this.constructor = child;\n            }\n            Ctor.prototype = parent.prototype;\n            var oldProto = child.prototype;\n            child.prototype = new Ctor();\n            for (var key in oldProto) {\n                if (oldProto.hasOwnProperty(key)) {\n                    child.prototype[key] = oldProto[key];\n                }\n            }\n            child.__super__ = parent.prototype;\n            // create reference to parent\n            child.super = parent;\n        },\n        /**\n         * adds methods to a constructor prototype\n         * @method\n         * @memberof Konva.Util.prototype\n         * @param {Function} constructor\n         * @param {Object} methods\n         */\n        addMethods: function(constructor, methods) {\n            var key;\n\n            for (key in methods) {\n                constructor.prototype[key] = methods[key];\n            }\n        },\n        _getControlPoints: function(x0, y0, x1, y1, x2, y2, t) {\n            var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)),\n                d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),\n                fa = t * d01 / (d01 + d12),\n                fb = t * d12 / (d01 + d12),\n                p1x = x1 - fa * (x2 - x0),\n                p1y = y1 - fa * (y2 - y0),\n                p2x = x1 + fb * (x2 - x0),\n                p2y = y1 + fb * (y2 - y0);\n\n            return [p1x, p1y, p2x, p2y];\n        },\n        _expandPoints: function(p, tension) {\n            var len = p.length,\n                allPoints = [],\n                n, cp;\n\n            for (n = 2; n < len - 2; n += 2) {\n                cp = Konva.Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);\n                allPoints.push(cp[0]);\n                allPoints.push(cp[1]);\n                allPoints.push(p[n]);\n                allPoints.push(p[n + 1]);\n                allPoints.push(cp[2]);\n                allPoints.push(cp[3]);\n            }\n\n            return allPoints;\n        },\n        _removeLastLetter: function(str) {\n            return str.substring(0, str.length - 1);\n        },\n        each: function(obj, func) {\n            for (var key in obj) {\n                func(key, obj[key]);\n            }\n        },\n        _getProjectionToSegment: function(x1, y1, x2, y2, x3, y3) {\n            var x, y, dist;\n\n            var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n            if(pd2 == 0) {\n                x = x1;\n                y = y1;\n                dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);\n            } else {\n                var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;\n                if(u < 0) {\n                    x = x1;\n                    y = y1;\n                    dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);\n                } else if (u > 1.0) {\n                    x = x2;\n                    y = y2;\n                    dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);\n                } else {\n                    x = x1 + u * (x2 - x1);\n                    y = y1 + u * (y2 - y1);\n                    dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);\n                }\n            }\n            return [x, y, dist];\n        },\n        // line as array of points.\n        // line might be closed\n        _getProjectionToLine: function(pt, line, isClosed) {\n            var pc = Konva.Util.cloneObject(pt);\n            var dist = Number.MAX_VALUE;\n            line.forEach(function(p1, i) {\n                if (!isClosed && i === line.length - 1) {\n                    return;\n                }\n                var p2 = line[(i + 1) % line.length];\n                var proj = Konva.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);\n                var px = proj[0], py = proj[1], pdist = proj[2];\n                if (pdist < dist) {\n                    pc.x = px;\n                    pc.y = py;\n                    dist = pdist;\n                }\n            });\n            return pc;\n        },\n        _prepareArrayForTween: function(startArray, endArray, isClosed) {\n            var n, start = [], end = [];\n            if (startArray.length > endArray.length) {\n                var temp = endArray;\n                endArray = startArray;\n                startArray = temp;\n            }\n            for (n = 0; n < startArray.length; n += 2) {\n                start.push({\n                    x: startArray[n],\n                    y: startArray[n + 1]\n                });\n            }\n            for (n = 0; n < endArray.length; n += 2) {\n                end.push({\n                    x: endArray[n],\n                    y: endArray[n + 1]\n                });\n            }\n\n\n            var newStart = [];\n            end.forEach(function(point) {\n                var pr = Konva.Util._getProjectionToLine(point, start, isClosed);\n                newStart.push(pr.x);\n                newStart.push(pr.y);\n            });\n            return newStart;\n        },\n        _prepareToStringify: function(obj) {\n            var desc;\n\n            obj.visitedByCircularReferenceRemoval = true;\n\n            for(var key in obj) {\n                if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {\n                    continue;\n                }\n                desc = Object.getOwnPropertyDescriptor(obj, key);\n                if (obj[key].visitedByCircularReferenceRemoval || Konva.Util._isElement(obj[key])) {\n                    if (desc.configurable) {\n                        delete obj[key];\n                    } else {\n                        return null;\n                    }\n                } else if (Konva.Util._prepareToStringify(obj[key]) === null) {\n                    if (desc.configurable) {\n                        delete obj[key];\n                    } else {\n                        return null;\n                    }\n                }\n            }\n\n            delete obj.visitedByCircularReferenceRemoval;\n\n            return obj;\n        }\n    };\n})();\n\n(function() {\n    'use strict';\n    // calculate pixel ratio\n    var canvas = Konva.Util.createCanvasElement(),\n        context = canvas.getContext('2d'),\n        _pixelRatio = (function(){\n            var devicePixelRatio = Konva.window.devicePixelRatio || 1,\n            backingStoreRatio = context.webkitBackingStorePixelRatio\n                || context.mozBackingStorePixelRatio\n                || context.msBackingStorePixelRatio\n                || context.oBackingStorePixelRatio\n                || context.backingStorePixelRatio\n                || 1;\n            return devicePixelRatio / backingStoreRatio;\n        })();\n\n    /**\n     * Canvas Renderer constructor\n     * @constructor\n     * @abstract\n     * @memberof Konva\n     * @param {Object} config\n     * @param {Number} config.width\n     * @param {Number} config.height\n     * @param {Number} config.pixelRatio KonvaJS automatically handles pixel ratio adjustments in order to render crisp drawings\n     *  on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios\n     *  of 1.  Some high end tablets and phones, like iPhones and iPads (not the mini) have a device pixel ratio\n     *  of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel\n     *  ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise\n     *  specified, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel\n     *  ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.\n     */\n    Konva.Canvas = function(config) {\n        this.init(config);\n    };\n\n    Konva.Canvas.prototype = {\n        init: function(config) {\n            var conf = config || {};\n\n            var pixelRatio = conf.pixelRatio || Konva.pixelRatio || _pixelRatio;\n\n            this.pixelRatio = pixelRatio;\n            this._canvas = Konva.Util.createCanvasElement();\n\n            // set inline styles\n            this._canvas.style.padding = 0;\n            this._canvas.style.margin = 0;\n            this._canvas.style.border = 0;\n            this._canvas.style.background = 'transparent';\n            this._canvas.style.position = 'absolute';\n            this._canvas.style.top = 0;\n            this._canvas.style.left = 0;\n        },\n        /**\n         * get canvas context\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @returns {CanvasContext} context\n         */\n        getContext: function() {\n            return this.context;\n        },\n        /**\n         * get pixel ratio\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @returns {Number} pixel ratio\n         */\n        getPixelRatio: function() {\n            return this.pixelRatio;\n        },\n        /**\n         * get pixel ratio\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @param {Number} pixelRatio KonvaJS automatically handles pixel ratio adustments in order to render crisp drawings\n         *  on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios\n         *  of 1.  Some high end tablets and phones, like iPhones and iPads have a device pixel ratio\n         *  of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel\n         *  ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise\n         *  specificed, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel\n         *  ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.\n         */\n        setPixelRatio: function(pixelRatio) {\n            var previousRatio = this.pixelRatio;\n            this.pixelRatio = pixelRatio;\n            this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n        },\n        /**\n         * set width\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @param {Number} width\n         */\n        setWidth: function(width) {\n            // take into account pixel ratio\n            this.width = this._canvas.width = width * this.pixelRatio;\n            this._canvas.style.width = width + 'px';\n\n            var pixelRatio = this.pixelRatio,\n                _context = this.getContext()._context;\n            _context.scale(pixelRatio, pixelRatio);\n        },\n        /**\n         * set height\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @param {Number} height\n         */\n        setHeight: function(height) {\n            // take into account pixel ratio\n            this.height = this._canvas.height = height * this.pixelRatio;\n            this._canvas.style.height = height + 'px';\n            var pixelRatio = this.pixelRatio,\n                _context = this.getContext()._context;\n            _context.scale(pixelRatio, pixelRatio);\n        },\n        /**\n         * get width\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @returns {Number} width\n         */\n        getWidth: function() {\n            return this.width;\n        },\n        /**\n         * get height\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @returns {Number} height\n         */\n        getHeight: function() {\n            return this.height;\n        },\n        /**\n         * set size\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @param {Number} width\n         * @param {Number} height\n         */\n        setSize: function(width, height) {\n            this.setWidth(width);\n            this.setHeight(height);\n        },\n        /**\n         * to data url\n         * @method\n         * @memberof Konva.Canvas.prototype\n         * @param {String} mimeType\n         * @param {Number} quality between 0 and 1 for jpg mime types\n         * @returns {String} data url string\n         */\n        toDataURL: function(mimeType, quality) {\n            try {\n                // If this call fails (due to browser bug, like in Firefox 3.6),\n                // then revert to previous no-parameter image/png behavior\n                return this._canvas.toDataURL(mimeType, quality);\n            }\n            catch(e) {\n                try {\n                    return this._canvas.toDataURL();\n                }\n                catch(err) {\n                    Konva.Util.warn('Unable to get data URL. ' + err.message);\n                    return '';\n                }\n            }\n        }\n    };\n\n    Konva.SceneCanvas = function(config) {\n        var conf = config || {};\n        var width = conf.width || 0,\n            height = conf.height || 0;\n\n        Konva.Canvas.call(this, conf);\n        this.context = new Konva.SceneContext(this);\n        this.setSize(width, height);\n    };\n\n    Konva.Util.extend(Konva.SceneCanvas, Konva.Canvas);\n\n    Konva.HitCanvas = function(config) {\n        var conf = config || {};\n        var width = conf.width || 0,\n            height = conf.height || 0;\n\n        Konva.Canvas.call(this, conf);\n        this.context = new Konva.HitContext(this);\n        this.setSize(width, height);\n        this.hitCanvas = true;\n    };\n    Konva.Util.extend(Konva.HitCanvas, Konva.Canvas);\n\n})();\n\n(function() {\n    'use strict';\n    var COMMA = ',',\n        OPEN_PAREN = '(',\n        CLOSE_PAREN = ')',\n        OPEN_PAREN_BRACKET = '([',\n        CLOSE_BRACKET_PAREN = '])',\n        SEMICOLON = ';',\n        DOUBLE_PAREN = '()',\n        // EMPTY_STRING = '',\n        EQUALS = '=',\n        // SET = 'set',\n        CONTEXT_METHODS = [\n            'arc',\n            'arcTo',\n            'beginPath',\n            'bezierCurveTo',\n            'clearRect',\n            'clip',\n            'closePath',\n            'createLinearGradient',\n            'createPattern',\n            'createRadialGradient',\n            'drawImage',\n            'fill',\n            'fillText',\n            'getImageData',\n            'createImageData',\n            'lineTo',\n            'moveTo',\n            'putImageData',\n            'quadraticCurveTo',\n            'rect',\n            'restore',\n            'rotate',\n            'save',\n            'scale',\n            'setLineDash',\n            'setTransform',\n            'stroke',\n            'strokeText',\n            'transform',\n            'translate'\n        ];\n\n    var CONTEXT_PROPERTIES = ['fillStyle', 'strokeStyle', 'shadowColor', 'shadowBlur', 'shadowOffsetX',\n        'shadowOffsetY', 'lineCap', 'lineJoin', 'lineWidth', 'miterLimit', 'font', 'textAlign', 'textBaseline',\n        'globalAlpha', 'globalCompositeOperation'];\n\n    /**\n     * Canvas Context constructor\n     * @constructor\n     * @abstract\n     * @memberof Konva\n     */\n    Konva.Context = function(canvas) {\n        this.init(canvas);\n    };\n\n    Konva.Context.prototype = {\n        init: function(canvas) {\n            this.canvas = canvas;\n            this._context = canvas._canvas.getContext('2d');\n\n            if (Konva.enableTrace) {\n                this.traceArr = [];\n                this._enableTrace();\n            }\n        },\n        /**\n         * fill shape\n         * @method\n         * @memberof Konva.Context.prototype\n         * @param {Konva.Shape} shape\n         */\n        fillShape: function(shape) {\n            if(shape.getFillEnabled()) {\n                this._fill(shape);\n            }\n        },\n        /**\n         * stroke shape\n         * @method\n         * @memberof Konva.Context.prototype\n         * @param {Konva.Shape} shape\n         */\n        strokeShape: function(shape) {\n            if(shape.getStrokeEnabled()) {\n                this._stroke(shape);\n            }\n        },\n        /**\n         * fill then stroke\n         * @method\n         * @memberof Konva.Context.prototype\n         * @param {Konva.Shape} shape\n         */\n        fillStrokeShape: function(shape) {\n            var fillEnabled = shape.getFillEnabled();\n            if(fillEnabled) {\n                this._fill(shape);\n            }\n            if(shape.getStrokeEnabled()) {\n                this._stroke(shape);\n            }\n        },\n        /**\n         * get context trace if trace is enabled\n         * @method\n         * @memberof Konva.Context.prototype\n         * @param {Boolean} relaxed if false, return strict context trace, which includes method names, method parameters\n         *  properties, and property values.  If true, return relaxed context trace, which only returns method names and\n         *  properites.\n         * @returns {String}\n         */\n        getTrace: function(relaxed) {\n            var traceArr = this.traceArr,\n                len = traceArr.length,\n                str = '',\n                n, trace, method, args;\n\n            for (n = 0; n < len; n++) {\n                trace = traceArr[n];\n                method = trace.method;\n\n                // methods\n                if (method) {\n                    args = trace.args;\n                    str += method;\n                    if (relaxed) {\n                        str += DOUBLE_PAREN;\n                    }\n                    else {\n                        if (Konva.Util._isArray(args[0])) {\n                            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n                        }\n                        else {\n                            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n                        }\n                    }\n                }\n                // properties\n                else {\n                    str += trace.property;\n                    if (!relaxed) {\n                        str += EQUALS + trace.val;\n                    }\n                }\n\n                str += SEMICOLON;\n            }\n\n            return str;\n        },\n        /**\n         * clear trace if trace is enabled\n         * @method\n         * @memberof Konva.Context.prototype\n         */\n        clearTrace: function() {\n            this.traceArr = [];\n        },\n        _trace: function(str) {\n            var traceArr = this.traceArr,\n                len;\n\n            traceArr.push(str);\n            len = traceArr.length;\n\n            if (len >= Konva.traceArrMax) {\n                traceArr.shift();\n            }\n        },\n        /**\n         * reset canvas context transform\n         * @method\n         * @memberof Konva.Context.prototype\n         */\n        reset: function() {\n            var pixelRatio = this.getCanvas().getPixelRatio();\n            this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n        },\n        /**\n         * get canvas\n         * @method\n         * @memberof Konva.Context.prototype\n         * @returns {Konva.Canvas}\n         */\n        getCanvas: function() {\n            return this.canvas;\n        },\n        /**\n         * clear canvas\n         * @method\n         * @memberof Konva.Context.prototype\n         * @param {Object} [bounds]\n         * @param {Number} [bounds.x]\n         * @param {Number} [bounds.y]\n         * @param {Number} [bounds.width]\n         * @param {Number} [bounds.height]\n         */\n        clear: function(bounds) {\n            var canvas = this.getCanvas();\n\n            if (bounds) {\n                this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n            }\n            else {\n                this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n            }\n        },\n        _applyLineCap: function(shape) {\n            var lineCap = shape.getLineCap();\n            if(lineCap) {\n                this.setAttr('lineCap', lineCap);\n            }\n        },\n        _applyOpacity: function(shape) {\n            var absOpacity = shape.getAbsoluteOpacity();\n            if(absOpacity !== 1) {\n                this.setAttr('globalAlpha', absOpacity);\n            }\n        },\n        _applyLineJoin: function(shape) {\n            var lineJoin = shape.getLineJoin();\n            if(lineJoin) {\n                this.setAttr('lineJoin', lineJoin);\n            }\n        },\n        setAttr: function(attr, val) {\n            this._context[attr] = val;\n        },\n\n        // context pass through methods\n        arc: function() {\n            var a = arguments;\n            this._context.arc(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        beginPath: function() {\n            this._context.beginPath();\n        },\n        bezierCurveTo: function() {\n            var a = arguments;\n            this._context.bezierCurveTo(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        clearRect: function() {\n            var a = arguments;\n            this._context.clearRect(a[0], a[1], a[2], a[3]);\n        },\n        clip: function() {\n            this._context.clip();\n        },\n        closePath: function() {\n            this._context.closePath();\n        },\n        createImageData: function() {\n            var a = arguments;\n            if(a.length === 2) {\n                return this._context.createImageData(a[0], a[1]);\n            }\n            else if(a.length === 1) {\n                return this._context.createImageData(a[0]);\n            }\n        },\n        createLinearGradient: function() {\n            var a = arguments;\n            return this._context.createLinearGradient(a[0], a[1], a[2], a[3]);\n        },\n        createPattern: function() {\n            var a = arguments;\n            return this._context.createPattern(a[0], a[1]);\n        },\n        createRadialGradient: function() {\n            var a = arguments;\n            return this._context.createRadialGradient(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        drawImage: function() {\n            var a = arguments,\n                _context = this._context;\n\n            if(a.length === 3) {\n                _context.drawImage(a[0], a[1], a[2]);\n            }\n            else if(a.length === 5) {\n                _context.drawImage(a[0], a[1], a[2], a[3], a[4]);\n            }\n            else if(a.length === 9) {\n                _context.drawImage(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n            }\n        },\n        isPointInPath: function(x, y) {\n            return this._context.isPointInPath(x, y);\n        },\n        fill: function() {\n            this._context.fill();\n        },\n        fillRect: function(x, y, width, height) {\n            this._context.fillRect(x, y, width, height);\n        },\n        strokeRect: function(x, y, width, height) {\n            this._context.strokeRect(x, y, width, height);\n        },\n        fillText: function() {\n            var a = arguments;\n            this._context.fillText(a[0], a[1], a[2]);\n        },\n        measureText: function(text) {\n            return this._context.measureText(text);\n        },\n        getImageData: function() {\n            var a = arguments;\n            return this._context.getImageData(a[0], a[1], a[2], a[3]);\n        },\n        lineTo: function() {\n            var a = arguments;\n            this._context.lineTo(a[0], a[1]);\n        },\n        moveTo: function() {\n            var a = arguments;\n            this._context.moveTo(a[0], a[1]);\n        },\n        rect: function() {\n            var a = arguments;\n            this._context.rect(a[0], a[1], a[2], a[3]);\n        },\n        putImageData: function() {\n            var a = arguments;\n            this._context.putImageData(a[0], a[1], a[2]);\n        },\n        quadraticCurveTo: function() {\n            var a = arguments;\n            this._context.quadraticCurveTo(a[0], a[1], a[2], a[3]);\n        },\n        restore: function() {\n            this._context.restore();\n        },\n        rotate: function() {\n            var a = arguments;\n            this._context.rotate(a[0]);\n        },\n        save: function() {\n            this._context.save();\n        },\n        scale: function() {\n            var a = arguments;\n            this._context.scale(a[0], a[1]);\n        },\n        setLineDash: function() {\n            var a = arguments,\n                _context = this._context;\n\n            // works for Chrome and IE11\n            if(this._context.setLineDash) {\n                _context.setLineDash(a[0]);\n            }\n            // verified that this works in firefox\n            else if('mozDash' in _context) {\n                _context.mozDash = a[0];\n            }\n            // does not currently work for Safari\n            else if('webkitLineDash' in _context) {\n                _context.webkitLineDash = a[0];\n            }\n\n            // no support for IE9 and IE10\n        },\n        getLineDash: function() {\n            return this._context.getLineDash();\n        },\n        setTransform: function() {\n            var a = arguments;\n            this._context.setTransform(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        stroke: function() {\n            this._context.stroke();\n        },\n        strokeText: function() {\n            var a = arguments;\n            this._context.strokeText(a[0], a[1], a[2]);\n        },\n        transform: function() {\n            var a = arguments;\n            this._context.transform(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        translate: function() {\n            var a = arguments;\n            this._context.translate(a[0], a[1]);\n        },\n        _enableTrace: function() {\n            var that = this,\n                len = CONTEXT_METHODS.length,\n                _simplifyArray = Konva.Util._simplifyArray,\n                origSetter = this.setAttr,\n                n, args;\n\n            // to prevent creating scope function at each loop\n            var func = function(methodName) {\n                    var origMethod = that[methodName],\n                        ret;\n\n                    that[methodName] = function() {\n                        args = _simplifyArray(Array.prototype.slice.call(arguments, 0));\n                        ret = origMethod.apply(that, arguments);\n\n                        that._trace({\n                            method: methodName,\n                            args: args\n                        });\n\n                        return ret;\n                    };\n            };\n            // methods\n            for (n = 0; n < len; n++) {\n                func(CONTEXT_METHODS[n]);\n            }\n\n            // attrs\n            that.setAttr = function() {\n                origSetter.apply(that, arguments);\n                that._trace({\n                    property: arguments[0],\n                    val: arguments[1]\n                });\n            };\n        }\n    };\n\n    CONTEXT_PROPERTIES.forEach(function(prop) {\n        Object.defineProperty(Konva.Context.prototype, prop, {\n            get: function () {\n                return this._context[prop];\n            },\n            set: function (val) {\n                this._context[prop] = val;\n            }\n        });\n    });\n\n    Konva.SceneContext = function(canvas) {\n        Konva.Context.call(this, canvas);\n    };\n\n    Konva.SceneContext.prototype = {\n        _fillColor: function(shape) {\n            var fill = shape.fill();\n\n            this.setAttr('fillStyle', fill);\n            shape._fillFunc(this);\n        },\n        _fillPattern: function(shape) {\n            var fillPatternX = shape.getFillPatternX(),\n                fillPatternY = shape.getFillPatternY(),\n                fillPatternScale = shape.getFillPatternScale(),\n                fillPatternRotation = Konva.getAngle(shape.getFillPatternRotation()),\n                fillPatternOffset = shape.getFillPatternOffset();\n\n            if(fillPatternX || fillPatternY) {\n                this.translate(fillPatternX || 0, fillPatternY || 0);\n            }\n            if(fillPatternRotation) {\n                this.rotate(fillPatternRotation);\n            }\n            if(fillPatternScale) {\n                this.scale(fillPatternScale.x, fillPatternScale.y);\n            }\n            if(fillPatternOffset) {\n                this.translate(-1 * fillPatternOffset.x, -1 * fillPatternOffset.y);\n            }\n\n            this.setAttr('fillStyle', this.createPattern(shape.getFillPatternImage(), shape.getFillPatternRepeat() || 'repeat'));\n            this.fill();\n        },\n        _fillLinearGradient: function(shape) {\n            var start = shape.getFillLinearGradientStartPoint(),\n                end = shape.getFillLinearGradientEndPoint(),\n                colorStops = shape.getFillLinearGradientColorStops(),\n                grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n\n            if (colorStops) {\n                // build color stops\n                for(var n = 0; n < colorStops.length; n += 2) {\n                    grd.addColorStop(colorStops[n], colorStops[n + 1]);\n                }\n                this.setAttr('fillStyle', grd);\n                shape._fillFunc(this);\n            }\n        },\n        _fillRadialGradient: function(shape) {\n            var start = shape.getFillRadialGradientStartPoint(),\n                end = shape.getFillRadialGradientEndPoint(),\n                startRadius = shape.getFillRadialGradientStartRadius(),\n                endRadius = shape.getFillRadialGradientEndRadius(),\n                colorStops = shape.getFillRadialGradientColorStops(),\n                grd = this.createRadialGradient(start.x, start.y, startRadius, end.x, end.y, endRadius);\n\n            // build color stops\n            for(var n = 0; n < colorStops.length; n += 2) {\n                grd.addColorStop(colorStops[n], colorStops[n + 1]);\n            }\n            this.setAttr('fillStyle', grd);\n            this.fill();\n        },\n        _fill: function(shape) {\n            var hasColor = shape.fill(),\n                hasPattern = shape.getFillPatternImage(),\n                hasLinearGradient = shape.getFillLinearGradientColorStops(),\n                hasRadialGradient = shape.getFillRadialGradientColorStops(),\n                fillPriority = shape.getFillPriority();\n\n            // priority fills\n            if(hasColor && fillPriority === 'color') {\n                this._fillColor(shape);\n            }\n            else if(hasPattern && fillPriority === 'pattern') {\n                this._fillPattern(shape);\n            }\n            else if(hasLinearGradient && fillPriority === 'linear-gradient') {\n                this._fillLinearGradient(shape);\n            }\n            else if(hasRadialGradient && fillPriority === 'radial-gradient') {\n                this._fillRadialGradient(shape);\n            }\n            // now just try and fill with whatever is available\n            else if(hasColor) {\n                this._fillColor(shape);\n            }\n            else if(hasPattern) {\n                this._fillPattern(shape);\n            }\n            else if(hasLinearGradient) {\n                this._fillLinearGradient(shape);\n            }\n            else if(hasRadialGradient) {\n                this._fillRadialGradient(shape);\n            }\n        },\n        _stroke: function(shape) {\n            var dash = shape.dash(),\n                // ignore strokeScaleEnabled for Text\n                strokeScaleEnabled = (shape.getStrokeScaleEnabled() || (shape instanceof Konva.Text));\n\n            if(shape.hasStroke()) {\n                if (!strokeScaleEnabled) {\n                    this.save();\n                    this.setTransform(1, 0, 0, 1, 0, 0);\n                }\n\n                this._applyLineCap(shape);\n                if(dash && shape.dashEnabled()) {\n                    this.setLineDash(dash);\n                }\n\n                this.setAttr('lineWidth', shape.strokeWidth());\n                this.setAttr('strokeStyle', shape.stroke());\n\n                if (!shape.getShadowForStrokeEnabled()) {\n                    this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n                }\n                shape._strokeFunc(this);\n\n                if (!strokeScaleEnabled) {\n                    this.restore();\n                }\n            }\n        },\n        _applyShadow: function(shape) {\n            var util = Konva.Util,\n                color = util.get(shape.getShadowRGBA(), 'black'),\n                blur = util.get(shape.getShadowBlur(), 5),\n                offset = util.get(shape.getShadowOffset(), {\n                    x: 0,\n                    y: 0\n                }),\n                // TODO: get this info from transform??\n                scale = shape.getAbsoluteScale(),\n                scaleX = scale.x,\n                scaleY = scale.y;\n\n            this.setAttr('shadowColor', color);\n            this.setAttr('shadowBlur', blur);\n            this.setAttr('shadowOffsetX', offset.x * scaleX);\n            this.setAttr('shadowOffsetY', offset.y * scaleY);\n        }\n    };\n    Konva.Util.extend(Konva.SceneContext, Konva.Context);\n\n    Konva.HitContext = function(canvas) {\n        Konva.Context.call(this, canvas);\n    };\n\n    Konva.HitContext.prototype = {\n        _fill: function(shape) {\n            this.save();\n            this.setAttr('fillStyle', shape.colorKey);\n            shape._fillFuncHit(this);\n            this.restore();\n        },\n        _stroke: function(shape) {\n            if(shape.hasStroke() && shape.strokeHitEnabled()) {\n                // ignore strokeScaleEnabled for Text\n                var strokeScaleEnabled = (shape.getStrokeScaleEnabled() || (shape instanceof Konva.Text));\n                if (!strokeScaleEnabled) {\n                    this.save();\n                    this.setTransform(1, 0, 0, 1, 0, 0);\n                }\n                this._applyLineCap(shape);\n                this.setAttr('lineWidth', shape.strokeWidth());\n                this.setAttr('strokeStyle', shape.colorKey);\n                shape._strokeFuncHit(this);\n                if (!strokeScaleEnabled) {\n                    this.restore();\n                }\n            }\n        }\n    };\n    Konva.Util.extend(Konva.HitContext, Konva.Context);\n})();\n\n(function() {\n    'use strict';\n    // CONSTANTS\n    var GET = 'get',\n        SET = 'set';\n\n    Konva.Factory = {\n        addGetterSetter: function(constructor, attr, def, validator, after) {\n            this.addGetter(constructor, attr, def);\n            this.addSetter(constructor, attr, validator, after);\n            this.addOverloadedGetterSetter(constructor, attr);\n        },\n        addGetter: function(constructor, attr, def) {\n            var method = GET + Konva.Util._capitalize(attr);\n\n            constructor.prototype[method] = function() {\n                var val = this.attrs[attr];\n                return val === undefined ? def : val;\n            };\n        },\n        addSetter: function(constructor, attr, validator, after) {\n            var method = SET + Konva.Util._capitalize(attr);\n\n            constructor.prototype[method] = function(val) {\n                if (validator) {\n                    val = validator.call(this, val);\n                }\n\n                this._setAttr(attr, val);\n\n                if (after) {\n                    after.call(this);\n                }\n\n                return this;\n            };\n        },\n        addComponentsGetterSetter: function(constructor, attr, components, validator, after) {\n            var len = components.length,\n                capitalize = Konva.Util._capitalize,\n                getter = GET + capitalize(attr),\n                setter = SET + capitalize(attr),\n                n, component;\n\n            // getter\n            constructor.prototype[getter] = function() {\n                var ret = {};\n\n                for (n = 0; n < len; n++) {\n                    component = components[n];\n                    ret[component] = this.getAttr(attr + capitalize(component));\n                }\n\n                return ret;\n            };\n\n            // setter\n            constructor.prototype[setter] = function(val) {\n                var oldVal = this.attrs[attr],\n                    key;\n\n                if (validator) {\n                    val = validator.call(this, val);\n                }\n\n                for (key in val) {\n                    if (!val.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    this._setAttr(attr + capitalize(key), val[key]);\n                }\n\n                this._fireChangeEvent(attr, oldVal, val);\n\n                if (after) {\n                    after.call(this);\n                }\n\n                return this;\n            };\n\n            this.addOverloadedGetterSetter(constructor, attr);\n        },\n        addOverloadedGetterSetter: function(constructor, attr) {\n            var capitalizedAttr = Konva.Util._capitalize(attr),\n                setter = SET + capitalizedAttr,\n                getter = GET + capitalizedAttr;\n\n            constructor.prototype[attr] = function() {\n                // setting\n                if (arguments.length) {\n                    this[setter](arguments[0]);\n                    return this;\n                }\n                // getting\n                return this[getter]();\n            };\n        },\n        addDeprecatedGetterSetter: function(constructor, attr, def, validator) {\n            var method = GET + Konva.Util._capitalize(attr);\n            var message = attr + ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n            constructor.prototype[method] = function() {\n                Konva.Util.error(message);\n                var val = this.attrs[attr];\n                return val === undefined ? def : val;\n            };\n            this.addSetter(constructor, attr, validator, function() {\n              Konva.Util.error(message);\n            });\n            this.addOverloadedGetterSetter(constructor, attr);\n        },\n        backCompat: function(constructor, methods) {\n            Konva.Util.each(methods, function(oldMethodName, newMethodName) {\n                var method = constructor.prototype[newMethodName];\n                constructor.prototype[oldMethodName] = function(){\n                    method.apply(this, arguments);\n                    Konva.Util.error(oldMethodName + ' method is deprecated and will be removed soon. Use ' + newMethodName + ' instead');\n                };\n            });\n        },\n        afterSetFilter: function() {\n            this._filterUpToDate = false;\n        }\n    };\n\n    Konva.Validators = {\n        /**\n         * @return {number}\n         */\n        RGBComponent: function(val) {\n            if (val > 255) {\n                return 255;\n            } else if (val < 0) {\n                return 0;\n            }\n            return Math.round(val);\n        },\n        alphaComponent: function(val) {\n            if (val > 1) {\n                return 1;\n            }\n            // chrome does not honor alpha values of 0\n            else if (val < 0.0001) {\n                return 0.0001;\n            }\n\n            return val;\n        }\n    };\n})();\n\n(function(Konva) {\n    'use strict';\n    // CONSTANTS\n    var ABSOLUTE_OPACITY = 'absoluteOpacity',\n        ABSOLUTE_TRANSFORM = 'absoluteTransform',\n        ABSOLUTE_SCALE = 'absoluteScale',\n        CHANGE = 'Change',\n        CHILDREN = 'children',\n        DOT = '.',\n        EMPTY_STRING = '',\n        GET = 'get',\n        ID = 'id',\n        KONVA = 'konva',\n        LISTENING = 'listening',\n        MOUSEENTER = 'mouseenter',\n        MOUSELEAVE = 'mouseleave',\n        NAME = 'name',\n        SET = 'set',\n        SHAPE = 'Shape',\n        SPACE = ' ',\n        STAGE = 'stage',\n        TRANSFORM = 'transform',\n        UPPER_STAGE = 'Stage',\n        VISIBLE = 'visible',\n        CLONE_BLACK_LIST = ['id'],\n\n        TRANSFORM_CHANGE_STR = [\n            'xChange.konva',\n            'yChange.konva',\n            'scaleXChange.konva',\n            'scaleYChange.konva',\n            'skewXChange.konva',\n            'skewYChange.konva',\n            'rotationChange.konva',\n            'offsetXChange.konva',\n            'offsetYChange.konva',\n            'transformsEnabledChange.konva'\n        ].join(SPACE),\n\n        SCALE_CHANGE_STR = [\n            'scaleXChange.konva',\n            'scaleYChange.konva'\n        ].join(SPACE);\n\n    /**\n     * Node constructor. Nodes are entities that can be transformed, layered,\n     * and have bound events. The stage, layers, groups, and shapes all extend Node.\n     * @constructor\n     * @memberof Konva\n     * @abstract\n     * @param {Object} config\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     */\n    Konva.Node = function(config) {\n        this._init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Node, {\n        _init: function(config) {\n            var that = this;\n            this._id = Konva.idCounter++;\n            this.eventListeners = {};\n            this.attrs = {};\n            this._cache = {};\n            this._filterUpToDate = false;\n            this.setAttrs(config);\n\n            // event bindings for cache handling\n            this.on(TRANSFORM_CHANGE_STR, function() {\n                this._clearCache(TRANSFORM);\n                that._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);\n            });\n\n            this.on(SCALE_CHANGE_STR, function() {\n                that._clearSelfAndDescendantCache(ABSOLUTE_SCALE);\n            });\n\n            this.on('visibleChange.konva', function() {\n                that._clearSelfAndDescendantCache(VISIBLE);\n            });\n            this.on('listeningChange.konva', function() {\n                that._clearSelfAndDescendantCache(LISTENING);\n            });\n            this.on('opacityChange.konva', function() {\n                that._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);\n            });\n        },\n        _clearCache: function(attr){\n            if (attr) {\n                delete this._cache[attr];\n            }\n            else {\n                this._cache = {};\n            }\n        },\n        _getCache: function(attr, privateGetter){\n            var cache = this._cache[attr];\n\n            // if not cached, we need to set it using the private getter method.\n            if (cache === undefined) {\n                this._cache[attr] = privateGetter.call(this);\n            }\n\n            return this._cache[attr];\n        },\n        /*\n         * when the logic for a cached result depends on ancestor propagation, use this\n         * method to clear self and children cache\n         */\n        _clearSelfAndDescendantCache: function(attr) {\n            this._clearCache(attr);\n\n            if (this.children) {\n                this.getChildren().each(function(node) {\n                    node._clearSelfAndDescendantCache(attr);\n                });\n            }\n        },\n        /**\n        * clear cached canvas\n        * @method\n        * @memberof Konva.Node.prototype\n        * @returns {Konva.Node}\n        * @example\n        * node.clearCache();\n        */\n        clearCache: function() {\n            delete this._cache.canvas;\n            this._filterUpToDate = false;\n            return this;\n        },\n        /**\n        *  cache node to improve drawing performance, apply filters, or create more accurate\n        *  hit regions. For all basic shapes size of cache canvas will be automatically detected.\n        *  If you need to cache your custom `Konva.Shape` instance you have to pass shape's bounding box\n        *  properties. Look at [link to demo page](link to demo page) for more information.\n        * @method\n        * @memberof Konva.Node.prototype\n        * @param {Object} [config]\n        * @param {Number} [config.x]\n        * @param {Number} [config.y]\n        * @param {Number} [config.width]\n        * @param {Number} [config.height]\n        * @param {Number} [config.offset]  increase canvas size by `offset` pixel in all directions.\n        * @param {Boolean} [config.drawBorder] when set to true, a red border will be drawn around the cached\n        *  region for debugging purposes\n        * @returns {Konva.Node}\n        * @example\n        * // cache a shape with the x,y position of the bounding box at the center and\n        * // the width and height of the bounding box equal to the width and height of\n        * // the shape obtained from shape.width() and shape.height()\n        * image.cache();\n        *\n        * // cache a node and define the bounding box position and size\n        * node.cache({\n        *   x: -30,\n        *   y: -30,\n        *   width: 100,\n        *   height: 200\n        * });\n        *\n        * // cache a node and draw a red border around the bounding box\n        * // for debugging purposes\n        * node.cache({\n        *   x: -30,\n        *   y: -30,\n        *   width: 100,\n        *   height: 200,\n        *   offset : 10,\n        *   drawBorder: true\n        * });\n        */\n        cache: function(config) {\n            var conf = config || {},\n                rect = this.getClientRect(true),\n                width = conf.width || rect.width,\n                height = conf.height || rect.height,\n                x = conf.x || rect.x,\n                y = conf.y || rect.y,\n                offset = conf.offset || 0,\n                drawBorder = conf.drawBorder || false;\n\n            if (!width || !height) {\n                throw new Error('Width or height of caching configuration equals 0.');\n            }\n\n            width += offset * 2;\n            height += offset * 2;\n\n            x -= offset;\n            y -= offset;\n\n\n            var cachedSceneCanvas = new Konva.SceneCanvas({\n                width: width,\n                height: height\n            }),\n            cachedFilterCanvas = new Konva.SceneCanvas({\n                width: width,\n                height: height\n            }),\n            cachedHitCanvas = new Konva.HitCanvas({\n                pixelRatio: 1,\n                width: width,\n                height: height\n            }),\n            sceneContext = cachedSceneCanvas.getContext(),\n            hitContext = cachedHitCanvas.getContext();\n\n            cachedHitCanvas.isCache = true;\n\n            this.clearCache();\n\n            sceneContext.save();\n            hitContext.save();\n\n            sceneContext.translate(-x, -y);\n            hitContext.translate(-x, -y);\n\n            this.drawScene(cachedSceneCanvas, this, true);\n            this.drawHit(cachedHitCanvas, this, true);\n\n            sceneContext.restore();\n            hitContext.restore();\n\n            // this will draw a red border around the cached box for\n            // debugging purposes\n            if (drawBorder) {\n                sceneContext.save();\n                sceneContext.beginPath();\n                sceneContext.rect(0, 0, width, height);\n                sceneContext.closePath();\n                sceneContext.setAttr('strokeStyle', 'red');\n                sceneContext.setAttr('lineWidth', 5);\n                sceneContext.stroke();\n                sceneContext.restore();\n            }\n\n            this._cache.canvas = {\n                scene: cachedSceneCanvas,\n                filter: cachedFilterCanvas,\n                hit: cachedHitCanvas,\n                x: x,\n                y: y\n            };\n\n            return this;\n        },\n        /**\n         * Return client rectangle {x, y, width, height} of node. This rectangle also include all styling (strokes, shadows, etc).\n         * The rectangle position is relative to parent container.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Boolean} [skipTransform] flag should we skip transformation to rectangle\n         * @returns {Object} rect with {x, y, width, height} properties\n         * @example\n         * var rect = new Konva.Rect({\n         *      width : 100,\n         *      height : 100,\n         *      x : 50,\n         *      y : 50,\n         *      strokeWidth : 4,\n         *      stroke : 'black',\n         *      offsetX : 50,\n         *      scaleY : 2\n         * });\n         *\n         * // get client rect without think off transformations (position, rotation, scale, offset, etc)\n         * rect.getClientRect(true);\n         * // returns {\n         * //     x : -2,   // two pixels for stroke / 2\n         * //     y : -2,\n         * //     width : 104, // increased by 4 for stroke\n         * //     height : 104\n         * //}\n         *\n         * // get client rect with transformation applied\n         * rect.getClientRect();\n         * // returns Object {x: -2, y: 46, width: 104, height: 208}\n         */\n        getClientRect: function() {\n            // abstract method\n            // redefine in Container and Shape\n            throw new Error('abstract \"getClientRect\" method call');\n        },\n        _transformedRect: function(rect) {\n            var points = [\n                {x: rect.x, y: rect.y},\n                {x: rect.x + rect.width, y: rect.y},\n                {x: rect.x + rect.width, y: rect.y + rect.height},\n                {x: rect.x, y: rect.y + rect.height}\n            ];\n            var minX, minY, maxX, maxY;\n            var trans = this.getTransform();\n            points.forEach(function(point) {\n                var transformed = trans.point(point);\n                if (minX === undefined) {\n                    minX = maxX = transformed.x;\n                    minY = maxY = transformed.y;\n                }\n                minX = Math.min(minX, transformed.x);\n                minY = Math.min(minY, transformed.y);\n                maxX = Math.max(maxX, transformed.x);\n                maxY = Math.max(maxY, transformed.y);\n            });\n            return {\n                x: minX,\n                y: minY,\n                width: maxX - minX,\n                height: maxY - minY\n            };\n        },\n        _drawCachedSceneCanvas: function(context) {\n            context.save();\n            context._applyOpacity(this);\n            context.translate(\n                this._cache.canvas.x,\n                this._cache.canvas.y\n            );\n\n            var cacheCanvas = this._getCachedSceneCanvas();\n            var ratio = cacheCanvas.pixelRatio;\n\n            context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);\n            context.restore();\n        },\n        _drawCachedHitCanvas: function(context) {\n            var cachedCanvas = this._cache.canvas,\n                hitCanvas = cachedCanvas.hit;\n            context.save();\n            context.translate(\n                this._cache.canvas.x,\n                this._cache.canvas.y\n            );\n            context.drawImage(hitCanvas._canvas, 0, 0);\n            context.restore();\n        },\n        _getCachedSceneCanvas: function() {\n            var filters = this.filters(),\n                cachedCanvas = this._cache.canvas,\n                sceneCanvas = cachedCanvas.scene,\n                filterCanvas = cachedCanvas.filter,\n                filterContext = filterCanvas.getContext(),\n                len, imageData, n, filter;\n\n            if (filters) {\n                if (!this._filterUpToDate) {\n                    var ratio = sceneCanvas.pixelRatio;\n\n                    try {\n                        len = filters.length;\n                        filterContext.clear();\n\n                        // copy cached canvas onto filter context\n                        filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);\n                        imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());\n\n                        // apply filters to filter context\n                        for (n = 0; n < len; n++) {\n                            filter = filters[n];\n                            if (typeof filter !== 'function') {\n                                Konva.Util.error(\n                                  'Filter should be type of function, but got ' +\n                                  (typeof filter) + ' insted. Please check correct filters'\n                                );\n                                continue;\n                            }\n                            filter.call(this, imageData);\n                            filterContext.putImageData(imageData, 0, 0);\n                        }\n                    }\n                    catch(e) {\n                        Konva.Util.error('Unable to apply filter. ' + e.message);\n                    }\n\n                    this._filterUpToDate = true;\n                }\n\n                return filterCanvas;\n            }\n            return sceneCanvas;\n        },\n        /**\n         * bind events to the node. KonvaJS supports mouseover, mousemove,\n         *  mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, click, dblclick, touchstart, touchmove,\n         *  touchend, tap, dbltap, dragstart, dragmove, and dragend events. The Konva Stage supports\n         *  contentMouseover, contentMousemove, contentMouseout, contentMousedown, contentMouseup, contentWheel\n         *  contentClick, contentDblclick, contentTouchstart, contentTouchmove, contentTouchend, contentTap,\n         *  and contentDblTap.  Pass in a string of events delimmited by a space to bind multiple events at once\n         *  such as 'mousedown mouseup mousemove'. Include a namespace to bind an\n         *  event by name such as 'click.foobar'.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} evtStr e.g. 'click', 'mousedown touchstart', 'mousedown.foo touchstart.foo'\n         * @param {Function} handler The handler function is passed an event object\n         * @returns {Konva.Node}\n         * @example\n         * // add click listener\n         * node.on('click', function() {\n         *   console.log('you clicked me!');\n         * });\n         *\n         * // get the target node\n         * node.on('click', function(evt) {\n         *   console.log(evt.target);\n         * });\n         *\n         * // stop event propagation\n         * node.on('click', function(evt) {\n         *   evt.cancelBubble = true;\n         * });\n         *\n         * // bind multiple listeners\n         * node.on('click touchstart', function() {\n         *   console.log('you clicked/touched me!');\n         * });\n         *\n         * // namespace listener\n         * node.on('click.foo', function() {\n         *   console.log('you clicked/touched me!');\n         * });\n         *\n         * // get the event type\n         * node.on('click tap', function(evt) {\n         *   var eventType = evt.type;\n         * });\n         *\n         * // get native event object\n         * node.on('click tap', function(evt) {\n         *   var nativeEvent = evt.evt;\n         * });\n         *\n         * // for change events, get the old and new val\n         * node.on('xChange', function(evt) {\n         *   var oldVal = evt.oldVal;\n         *   var newVal = evt.newVal;\n         * });\n         *\n         * // get event targets\n         * // with event delegations\n         * layer.on('click', 'Group', function(evt) {\n         *   var shape = evt.target;\n         *   var group = evtn.currentTarger;\n         * });\n         */\n        on: function(evtStr, handler) {\n            if (arguments.length === 3) {\n                return this._delegate.apply(this, arguments);\n            }\n            var events = evtStr.split(SPACE),\n                len = events.length,\n                n, event, parts, baseEvent, name;\n\n             /*\n             * loop through types and attach event listeners to\n             * each one.  eg. 'click mouseover.namespace mouseout'\n             * will create three event bindings\n             */\n            for(n = 0; n < len; n++) {\n                event = events[n];\n                parts = event.split(DOT);\n                baseEvent = parts[0];\n                name = parts[1] || EMPTY_STRING;\n\n                // create events array if it doesn't exist\n                if(!this.eventListeners[baseEvent]) {\n                    this.eventListeners[baseEvent] = [];\n                }\n\n                this.eventListeners[baseEvent].push({\n                    name: name,\n                    handler: handler\n                });\n            }\n\n            return this;\n        },\n        /**\n         * remove event bindings from the node. Pass in a string of\n         *  event types delimmited by a space to remove multiple event\n         *  bindings at once such as 'mousedown mouseup mousemove'.\n         *  include a namespace to remove an event binding by name\n         *  such as 'click.foobar'. If you only give a name like '.foobar',\n         *  all events in that namespace will be removed.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} evtStr e.g. 'click', 'mousedown touchstart', '.foobar'\n         * @returns {Konva.Node}\n         * @example\n         * // remove listener\n         * node.off('click');\n         *\n         * // remove multiple listeners\n         * node.off('click touchstart');\n         *\n         * // remove listener by name\n         * node.off('click.foo');\n         */\n        off: function(evtStr) {\n            var events = (evtStr || '').split(SPACE),\n                len = events.length,\n                n, t, event, parts, baseEvent, name;\n\n            if (!evtStr) {\n                // remove all events\n                for(t in this.eventListeners) {\n                    this._off(t);\n                }\n            }\n            for(n = 0; n < len; n++) {\n                event = events[n];\n                parts = event.split(DOT);\n                baseEvent = parts[0];\n                name = parts[1];\n\n                if(baseEvent) {\n                    if(this.eventListeners[baseEvent]) {\n                        this._off(baseEvent, name);\n                    }\n                }\n                else {\n                    for(t in this.eventListeners) {\n                        this._off(t, name);\n                    }\n                }\n            }\n            return this;\n        },\n        // some event aliases for third party integration like HammerJS\n        dispatchEvent: function(evt) {\n            var e = {\n              target: this,\n              type: evt.type,\n              evt: evt\n            };\n            this.fire(evt.type, e);\n            return this;\n        },\n        addEventListener: function(type, handler) {\n            // we have to pass native event to handler\n            this.on(type, function(evt){\n                handler.call(this, evt.evt);\n            });\n            return this;\n        },\n        removeEventListener: function(type) {\n            this.off(type);\n            return this;\n        },\n        // like node.on\n        _delegate: function(event, selector, handler) {\n            var stopNode = this;\n            this.on(event, function(evt) {\n                var targets = evt.target.findAncestors(selector, true, stopNode);\n                for(var i = 0; i < targets.length; i++) {\n                    evt = Konva.Util.cloneObject(evt);\n                    evt.currentTarget = targets[i];\n                    handler.call(targets[i], evt);\n                }\n            });\n        },\n        /**\n         * remove self from parent, but don't destroy\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Node}\n         * @example\n         * node.remove();\n         */\n        remove: function() {\n            var parent = this.getParent();\n\n            if(parent && parent.children) {\n                parent.children.splice(this.index, 1);\n                parent._setChildrenIndices();\n                delete this.parent;\n            }\n\n            // every cached attr that is calculated via node tree\n            // traversal must be cleared when removing a node\n            this._clearSelfAndDescendantCache(STAGE);\n            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);\n            this._clearSelfAndDescendantCache(VISIBLE);\n            this._clearSelfAndDescendantCache(LISTENING);\n            this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);\n\n            return this;\n        },\n        /**\n         * remove and destroy self\n         * @method\n         * @memberof Konva.Node.prototype\n         * @example\n         * node.destroy();\n         */\n        destroy: function() {\n            // remove from ids and names hashes\n            Konva._removeId(this.getId());\n            Konva._removeName(this.getName(), this._id);\n\n            this.remove();\n            return this;\n        },\n        /**\n         * get attr\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} attr\n         * @returns {Integer|String|Object|Array}\n         * @example\n         * var x = node.getAttr('x');\n         */\n        getAttr: function(attr) {\n            var method = GET + Konva.Util._capitalize(attr);\n            if(Konva.Util._isFunction(this[method])) {\n                return this[method]();\n            }\n            // otherwise get directly\n            return this.attrs[attr];\n        },\n        /**\n        * get ancestors\n        * @method\n        * @memberof Konva.Node.prototype\n        * @returns {Konva.Collection}\n        * @example\n        * shape.getAncestors().each(function(node) {\n        *   console.log(node.getId());\n        * })\n        */\n        getAncestors: function() {\n            var parent = this.getParent(),\n                ancestors = new Konva.Collection();\n\n            while (parent) {\n                ancestors.push(parent);\n                parent = parent.getParent();\n            }\n\n            return ancestors;\n        },\n        /**\n         * get attrs object literal\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Object}\n         */\n        getAttrs: function() {\n            return this.attrs || {};\n        },\n        /**\n         * set multiple attrs at once using an object literal\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} config object containing key value pairs\n         * @returns {Konva.Node}\n         * @example\n         * node.setAttrs({\n         *   x: 5,\n         *   fill: 'red'\n         * });\n         */\n        setAttrs: function(config) {\n            var key, method;\n\n            if(!config) {\n                return this;\n            }\n            for(key in config) {\n                if (key === CHILDREN) {\n                    continue;\n                }\n                method = SET + Konva.Util._capitalize(key);\n                // use setter if available\n                if(Konva.Util._isFunction(this[method])) {\n                    this[method](config[key]);\n                }\n                // otherwise set directly\n                else {\n                    this._setAttr(key, config[key]);\n                }\n            }\n            return this;\n        },\n        /**\n         * determine if node is listening for events by taking into account ancestors.\n         *\n         * Parent    | Self      | isListening\n         * listening | listening |\n         * ----------+-----------+------------\n         * T         | T         | T\n         * T         | F         | F\n         * F         | T         | T\n         * F         | F         | F\n         * ----------+-----------+------------\n         * T         | I         | T\n         * F         | I         | F\n         * I         | I         | T\n         *\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        isListening: function() {\n            return this._getCache(LISTENING, this._isListening);\n        },\n        _isListening: function() {\n            var listening = this.getListening(),\n                parent = this.getParent();\n\n            // the following conditions are a simplification of the truth table above.\n            // please modify carefully\n            if (listening === 'inherit') {\n                if (parent) {\n                    return parent.isListening();\n                }\n                else {\n                    return true;\n                }\n            }\n            else {\n                return listening;\n            }\n        },\n        /**\n         * determine if node is visible by taking into account ancestors.\n         *\n         * Parent    | Self      | isVisible\n         * visible   | visible   |\n         * ----------+-----------+------------\n         * T         | T         | T\n         * T         | F         | F\n         * F         | T         | T\n         * F         | F         | F\n         * ----------+-----------+------------\n         * T         | I         | T\n         * F         | I         | F\n         * I         | I         | T\n\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        isVisible: function() {\n            return this._getCache(VISIBLE, this._isVisible);\n        },\n        _isVisible: function() {\n            var visible = this.getVisible(),\n                parent = this.getParent();\n\n            // the following conditions are a simplification of the truth table above.\n            // please modify carefully\n            if (visible === 'inherit') {\n                if (parent) {\n                    return parent.isVisible();\n                }\n                else {\n                    return true;\n                }\n            }\n            else {\n                return visible;\n            }\n        },\n        /**\n         * determine if listening is enabled by taking into account descendants.  If self or any children\n         * have _isListeningEnabled set to true, then self also has listening enabled.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        shouldDrawHit: function(canvas) {\n            var layer = this.getLayer();\n            return (canvas && canvas.isCache) || (layer && layer.hitGraphEnabled())\n                && this.isListening() && this.isVisible();\n        },\n        /**\n         * show node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Node}\n         */\n        show: function() {\n            this.setVisible(true);\n            return this;\n        },\n        /**\n         * hide node.  Hidden nodes are no longer detectable\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Node}\n         */\n        hide: function() {\n            this.setVisible(false);\n            return this;\n        },\n        /**\n         * get zIndex relative to the node's siblings who share the same parent\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Integer}\n         */\n        getZIndex: function() {\n            return this.index || 0;\n        },\n        /**\n         * get absolute z-index which takes into account sibling\n         *  and ancestor indices\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Integer}\n         */\n        getAbsoluteZIndex: function() {\n            var depth = this.getDepth(),\n                that = this,\n                index = 0,\n                nodes, len, n, child;\n\n            function addChildren(children) {\n                nodes = [];\n                len = children.length;\n                for(n = 0; n < len; n++) {\n                    child = children[n];\n                    index++;\n\n                    if(child.nodeType !== SHAPE) {\n                        nodes = nodes.concat(child.getChildren().toArray());\n                    }\n\n                    if(child._id === that._id) {\n                        n = len;\n                    }\n                }\n\n                if(nodes.length > 0 && nodes[0].getDepth() <= depth) {\n                    addChildren(nodes);\n                }\n            }\n            if(that.nodeType !== UPPER_STAGE) {\n                addChildren(that.getStage().getChildren());\n            }\n\n            return index;\n        },\n        /**\n         * get node depth in node tree.  Returns an integer.\n         *  e.g. Stage depth will always be 0.  Layers will always be 1.  Groups and Shapes will always\n         *  be >= 2\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Integer}\n         */\n        getDepth: function() {\n            var depth = 0,\n                parent = this.parent;\n\n            while(parent) {\n                depth++;\n                parent = parent.parent;\n            }\n            return depth;\n        },\n        setPosition: function(pos) {\n            this.setX(pos.x);\n            this.setY(pos.y);\n            return this;\n        },\n        getPosition: function() {\n            return {\n                x: this.getX(),\n                y: this.getY()\n            };\n        },\n        /**\n         * get absolute position relative to the top left corner of the stage container div\n         * or relative to passed node\n         * @method\n         * @param {Object} [top] optional parent node\n         * @memberof Konva.Node.prototype\n         * @returns {Object}\n         */\n        getAbsolutePosition: function(top) {\n            var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(),\n                absoluteTransform = new Konva.Transform(),\n                offset = this.offset();\n\n            // clone the matrix array\n            absoluteTransform.m = absoluteMatrix.slice();\n            absoluteTransform.translate(offset.x, offset.y);\n\n            return absoluteTransform.getTranslation();\n        },\n        /**\n         * set absolute position\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} pos\n         * @param {Number} pos.x\n         * @param {Number} pos.y\n         * @returns {Konva.Node}\n         */\n        setAbsolutePosition: function(pos) {\n            var origTrans = this._clearTransform(),\n                it;\n\n            // don't clear translation\n            this.attrs.x = origTrans.x;\n            this.attrs.y = origTrans.y;\n            delete origTrans.x;\n            delete origTrans.y;\n\n            // unravel transform\n            it = this.getAbsoluteTransform();\n\n            it.invert();\n            it.translate(pos.x, pos.y);\n            pos = {\n                x: this.attrs.x + it.getTranslation().x,\n                y: this.attrs.y + it.getTranslation().y\n            };\n\n            this.setPosition({x: pos.x, y: pos.y});\n            this._setTransform(origTrans);\n\n            return this;\n        },\n        _setTransform: function(trans) {\n            var key;\n\n            for(key in trans) {\n                this.attrs[key] = trans[key];\n            }\n\n            this._clearCache(TRANSFORM);\n            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);\n        },\n        _clearTransform: function() {\n            var trans = {\n                x: this.getX(),\n                y: this.getY(),\n                rotation: this.getRotation(),\n                scaleX: this.getScaleX(),\n                scaleY: this.getScaleY(),\n                offsetX: this.getOffsetX(),\n                offsetY: this.getOffsetY(),\n                skewX: this.getSkewX(),\n                skewY: this.getSkewY()\n            };\n\n            this.attrs.x = 0;\n            this.attrs.y = 0;\n            this.attrs.rotation = 0;\n            this.attrs.scaleX = 1;\n            this.attrs.scaleY = 1;\n            this.attrs.offsetX = 0;\n            this.attrs.offsetY = 0;\n            this.attrs.skewX = 0;\n            this.attrs.skewY = 0;\n\n            this._clearCache(TRANSFORM);\n            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);\n\n            // return original transform\n            return trans;\n        },\n        /**\n         * move node by an amount relative to its current position\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} change\n         * @param {Number} change.x\n         * @param {Number} change.y\n         * @returns {Konva.Node}\n         * @example\n         * // move node in x direction by 1px and y direction by 2px\n         * node.move({\n         *   x: 1,\n         *   y: 2)\n         * });\n         */\n        move: function(change) {\n            var changeX = change.x,\n                changeY = change.y,\n                x = this.getX(),\n                y = this.getY();\n\n            if(changeX !== undefined) {\n                x += changeX;\n            }\n\n            if(changeY !== undefined) {\n                y += changeY;\n            }\n\n            this.setPosition({x: x, y: y});\n            return this;\n        },\n        _eachAncestorReverse: function(func, top) {\n            var family = [],\n                parent = this.getParent(),\n                len, n;\n\n            // if top node is defined, and this node is top node,\n            // there's no need to build a family tree.  just execute\n            // func with this because it will be the only node\n            if (top && top._id === this._id) {\n                func(this);\n                return true;\n            }\n\n            family.unshift(this);\n\n            while(parent && (!top || parent._id !== top._id)) {\n                family.unshift(parent);\n                parent = parent.parent;\n            }\n\n            len = family.length;\n            for(n = 0; n < len; n++) {\n                func(family[n]);\n            }\n        },\n        /**\n         * rotate node by an amount in degrees relative to its current rotation\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Number} theta\n         * @returns {Konva.Node}\n         */\n        rotate: function(theta) {\n            this.setRotation(this.getRotation() + theta);\n            return this;\n        },\n        /**\n         * move node to the top of its siblings\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        moveToTop: function() {\n            if (!this.parent) {\n                Konva.Util.warn('Node has no parent. moveToTop function is ignored.');\n                return false;\n            }\n            var index = this.index;\n            this.parent.children.splice(index, 1);\n            this.parent.children.push(this);\n            this.parent._setChildrenIndices();\n            return true;\n        },\n        /**\n         * move node up\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean} flag is moved or not\n         */\n        moveUp: function() {\n            if (!this.parent) {\n                Konva.Util.warn('Node has no parent. moveUp function is ignored.');\n                return false;\n            }\n            var index = this.index,\n                len = this.parent.getChildren().length;\n            if(index < len - 1) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index + 1, 0, this);\n                this.parent._setChildrenIndices();\n                return true;\n            }\n            return false;\n        },\n        /**\n         * move node down\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        moveDown: function() {\n            if (!this.parent) {\n                Konva.Util.warn('Node has no parent. moveDown function is ignored.');\n                return false;\n            }\n            var index = this.index;\n            if(index > 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index - 1, 0, this);\n                this.parent._setChildrenIndices();\n                return true;\n            }\n            return false;\n        },\n        /**\n         * move node to the bottom of its siblings\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Boolean}\n         */\n        moveToBottom: function() {\n            if (!this.parent) {\n                Konva.Util.warn('Node has no parent. moveToBottom function is ignored.');\n                return false;\n            }\n            var index = this.index;\n            if(index > 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.unshift(this);\n                this.parent._setChildrenIndices();\n                return true;\n            }\n            return false;\n        },\n        /**\n         * set zIndex relative to siblings\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Integer} zIndex\n         * @returns {Konva.Node}\n         */\n        setZIndex: function(zIndex) {\n            if (!this.parent) {\n                Konva.Util.warn('Node has no parent. zIndex parameter is ignored.');\n                return false;\n            }\n            var index = this.index;\n            this.parent.children.splice(index, 1);\n            this.parent.children.splice(zIndex, 0, this);\n            this.parent._setChildrenIndices();\n            return this;\n        },\n        /**\n         * get absolute opacity\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Number}\n         */\n        getAbsoluteOpacity: function() {\n            return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);\n        },\n        _getAbsoluteOpacity: function() {\n            var absOpacity = this.getOpacity();\n            if(this.getParent()) {\n                absOpacity *= this.getParent().getAbsoluteOpacity();\n            }\n            return absOpacity;\n        },\n        /**\n         * move node to another container\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Container} newContainer\n         * @returns {Konva.Node}\n         * @example\n         * // move node from current layer into layer2\n         * node.moveTo(layer2);\n         */\n        moveTo: function(newContainer) {\n            // do nothing if new container is already parent\n            if (this.getParent() !== newContainer) {\n                this.remove();\n                newContainer.add(this);\n            }\n            return this;\n        },\n        /**\n         * convert Node into an object for serialization.  Returns an object.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Object}\n         */\n        toObject: function() {\n            var obj = {},\n                attrs = this.getAttrs(),\n                key, val, getter, defaultValue;\n\n            obj.attrs = {};\n\n            for(key in attrs) {\n                val = attrs[key];\n                getter = this[key];\n                // remove attr value so that we can extract the default value from the getter\n                delete attrs[key];\n                defaultValue = getter ? getter.call(this) : null;\n                // restore attr value\n                attrs[key] = val;\n                if (defaultValue !== val) {\n                    obj.attrs[key] = val;\n                }\n            }\n\n            obj.className = this.getClassName();\n            return Konva.Util._prepareToStringify(obj);\n        },\n        /**\n         * convert Node into a JSON string.  Returns a JSON string.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {String}}\n         */\n        toJSON: function() {\n            return JSON.stringify(this.toObject());\n        },\n        /**\n         * get parent container\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Node}\n         */\n        getParent: function() {\n            return this.parent;\n        },\n        /**\n         * get all ancestros (parent then parent of the parent, etc) of the node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} [selector] selector for search\n         * @param {Boolean} [includeSelf] show we think that node is ancestro itself?\n         * @param {Konva.Node} [stopNode] optional node where we need to stop searching (one of ancestors)\n         * @returns {Array} [ancestors]\n         * @example\n         * // get one of the parent group\n         * var parentGroups = node.findAncestors('Group');\n         */\n        findAncestors: function(selector, includeSelf, stopNode) {\n            var res = [];\n\n            if (includeSelf && this._isMatch(selector)) {\n                res.push(this);\n            }\n            var ancestor = this.parent;\n            while(ancestor) {\n                if (ancestor === stopNode) {\n                    return res;\n                }\n                if (ancestor._isMatch(selector)) {\n                    res.push(ancestor);\n                }\n                ancestor = ancestor.parent;\n            }\n            return res;\n        },\n        /**\n         * get ancestor (parent or parent of the parent, etc) of the node that match passed selector\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} [selector] selector for search\n         * @param {Boolean} [includeSelf] show we think that node is ancestro itself?\n         * @param {Konva.Node} [stopNode] optional node where we need to stop searching (one of ancestors)\n         * @returns {Konva.Node} ancestor\n         * @example\n         * // get one of the parent group\n         * var group = node.findAncestors('.mygroup');\n         */\n        findAncestor: function(selector, includeSelf, stopNode) {\n            return this.findAncestors(selector, includeSelf, stopNode)[0];\n        },\n        // is current node match passed selector?\n        _isMatch: function(selector) {\n            if (!selector) {\n                return false;\n            }\n            var selectorArr = selector.replace(/ /g, '').split(','),\n                len = selectorArr.length,\n                n, sel;\n\n            for (n = 0; n < len; n++) {\n                sel = selectorArr[n];\n                if (!Konva.Util.isValidSelector(sel)) {\n                    Konva.Util.warn('Selector \"' + sel + '\" is invalid. Allowed selectors examples are \"#foo\", \".bar\" or \"Group\".');\n                    Konva.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like \"Triangle\".');\n                    Konva.Util.warn('Konva is awesome, right?');\n                }\n                // id selector\n                if(sel.charAt(0) === '#') {\n                    if (this.id() === sel.slice(1)) {\n                        return true;\n                    }\n                }\n                // name selector\n                else if(sel.charAt(0) === '.') {\n                    if (this.hasName(sel.slice(1))) {\n                        return true;\n                    }\n                } else if (this._get(sel).length !== 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * get layer ancestor\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Layer}\n         */\n        getLayer: function() {\n            var parent = this.getParent();\n            return parent ? parent.getLayer() : null;\n        },\n        /**\n         * get stage ancestor\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Stage}\n         */\n        getStage: function() {\n            return this._getCache(STAGE, this._getStage);\n        },\n        _getStage: function() {\n            var parent = this.getParent();\n            if(parent) {\n                return parent.getStage();\n            }\n            else {\n                return undefined;\n            }\n        },\n        /**\n         * fire event\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} eventType event type.  can be a regular event, like click, mouseover, or mouseout, or it can be a custom event, like myCustomEvent\n         * @param {Event} [evt] event object\n         * @param {Boolean} [bubble] setting the value to false, or leaving it undefined, will result in the event\n         *  not bubbling.  Setting the value to true will result in the event bubbling.\n         * @returns {Konva.Node}\n         * @example\n         * // manually fire click event\n         * node.fire('click');\n         *\n         * // fire custom event\n         * node.fire('foo');\n         *\n         * // fire custom event with custom event object\n         * node.fire('foo', {\n         *   bar: 10\n         * });\n         *\n         * // fire click event that bubbles\n         * node.fire('click', null, true);\n         */\n        fire: function(eventType, evt, bubble) {\n            evt = evt || {};\n            evt.target = evt.target || this;\n            // bubble\n            if (bubble) {\n                this._fireAndBubble(eventType, evt);\n            }\n            // no bubble\n            else {\n                this._fire(eventType, evt);\n            }\n            return this;\n        },\n        /**\n         * get absolute transform of the node which takes into\n         *  account its ancestor transforms\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Transform}\n         */\n        getAbsoluteTransform: function(top) {\n            // if using an argument, we can't cache the result.\n            if (top) {\n                return this._getAbsoluteTransform(top);\n            }\n            // if no argument, we can cache the result\n            else {\n                return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);\n            }\n        },\n        _getAbsoluteTransform: function(top) {\n            var at = new Konva.Transform(),\n                transformsEnabled, trans;\n\n            // start with stage and traverse downwards to self\n            this._eachAncestorReverse(function(node) {\n                transformsEnabled = node.transformsEnabled();\n                trans = node.getTransform();\n\n                if (transformsEnabled === 'all') {\n                    at.multiply(trans);\n                }\n                else if (transformsEnabled === 'position') {\n                    at.translate(node.x(), node.y());\n                }\n            }, top);\n            return at;\n        },\n        /**\n         * get absolute scale of the node which takes into\n         *  account its ancestor scales\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Transform}\n         */\n        getAbsoluteScale: function(top) {\n            // if using an argument, we can't cache the result.\n            if (top) {\n                return this._getAbsoluteTransform(top);\n            }\n            // if no argument, we can cache the result\n            else {\n                return this._getCache(ABSOLUTE_SCALE, this._getAbsoluteScale);\n            }\n        },\n        _getAbsoluteScale: function(top) {\n            var scaleX = 1, scaleY = 1;\n\n            // start with stage and traverse downwards to self\n            this._eachAncestorReverse(function(node) {\n                scaleX *= node.scaleX();\n                scaleY *= node.scaleY();\n            }, top);\n            return {\n                x: scaleX,\n                y: scaleY\n            };\n        },\n        /**\n         * get transform of the node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Transform}\n         */\n        getTransform: function() {\n            return this._getCache(TRANSFORM, this._getTransform);\n        },\n        _getTransform: function() {\n            var m = new Konva.Transform(),\n                x = this.getX(),\n                y = this.getY(),\n                rotation = Konva.getAngle(this.getRotation()),\n                scaleX = this.getScaleX(),\n                scaleY = this.getScaleY(),\n                skewX = this.getSkewX(),\n                skewY = this.getSkewY(),\n                offsetX = this.getOffsetX(),\n                offsetY = this.getOffsetY();\n\n            if(x !== 0 || y !== 0) {\n                m.translate(x, y);\n            }\n            if(rotation !== 0) {\n                m.rotate(rotation);\n            }\n            if(skewX !== 0 || skewY !== 0) {\n                m.skew(skewX, skewY);\n            }\n            if(scaleX !== 1 || scaleY !== 1) {\n                m.scale(scaleX, scaleY);\n            }\n            if(offsetX !== 0 || offsetY !== 0) {\n                m.translate(-1 * offsetX, -1 * offsetY);\n            }\n\n            return m;\n        },\n        /**\n         * clone node.  Returns a new Node instance with identical attributes.  You can also override\n         *  the node properties with an object literal, enabling you to use an existing node as a template\n         *  for another node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} obj override attrs\n         * @returns {Konva.Node}\n         * @example\n         * // simple clone\n         * var clone = node.clone();\n         *\n         * // clone a node and override the x position\n         * var clone = rect.clone({\n         *   x: 5\n         * });\n         */\n        clone: function(obj) {\n            // instantiate new node\n            var attrs = Konva.Util.cloneObject(this.attrs),\n                key, allListeners, len, n, listener;\n            // filter black attrs\n            for (var i in CLONE_BLACK_LIST) {\n                var blockAttr = CLONE_BLACK_LIST[i];\n                delete attrs[blockAttr];\n            }\n            // apply attr overrides\n            for (key in obj) {\n                attrs[key] = obj[key];\n            }\n\n            var node = new this.constructor(attrs);\n            // copy over listeners\n            for(key in this.eventListeners) {\n                allListeners = this.eventListeners[key];\n                len = allListeners.length;\n                for(n = 0; n < len; n++) {\n                    listener = allListeners[n];\n                    /*\n                     * don't include konva namespaced listeners because\n                     *  these are generated by the constructors\n                     */\n                    if(listener.name.indexOf(KONVA) < 0) {\n                        // if listeners array doesn't exist, then create it\n                        if(!node.eventListeners[key]) {\n                            node.eventListeners[key] = [];\n                        }\n                        node.eventListeners[key].push(listener);\n                    }\n                }\n            }\n            return node;\n        },\n        /**\n         * Creates a composite data URL. If MIME type is not\n         * specified, then \"image/png\" will result. For \"image/jpeg\", specify a quality\n         * level as quality (range 0.0 - 1.0)\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} config\n         * @param {String} [config.mimeType] can be \"image/png\" or \"image/jpeg\".\n         *  \"image/png\" is the default\n         * @param {Number} [config.x] x position of canvas section\n         * @param {Number} [config.y] y position of canvas section\n         * @param {Number} [config.width] width of canvas section\n         * @param {Number} [config.height] height of canvas section\n         * @param {Number} [config.quality] jpeg quality.  If using an \"image/jpeg\" mimeType,\n         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n         *  is very high quality\n         * @paremt {Number} [config.pixelRatio] pixelRatio of ouput image url. Default is 1\n         * @returns {String}\n         */\n        toDataURL: function(config) {\n            config = config || {};\n\n            var mimeType = config.mimeType || null,\n                quality = config.quality || null,\n                stage = this.getStage(),\n                x = config.x || 0,\n                y = config.y || 0,\n                pixelRatio = config.pixelRatio || 1,\n                canvas = new Konva.SceneCanvas({\n                    width: config.width || this.getWidth() || (stage ? stage.getWidth() : 0),\n                    height: config.height || this.getHeight() || (stage ? stage.getHeight() : 0),\n                    pixelRatio: pixelRatio\n                }),\n                context = canvas.getContext();\n\n            context.save();\n\n            if(x || y) {\n                context.translate(-1 * x, -1 * y);\n            }\n\n            this.drawScene(canvas);\n            context.restore();\n\n            return canvas.toDataURL(mimeType, quality);\n        },\n        /**\n         * converts node into an image.  Since the toImage\n         *  method is asynchronous, a callback is required.  toImage is most commonly used\n         *  to cache complex drawings as an image so that they don't have to constantly be redrawn\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {Object} config\n         * @param {Function} config.callback function executed when the composite has completed\n         * @param {String} [config.mimeType] can be \"image/png\" or \"image/jpeg\".\n         *  \"image/png\" is the default\n         * @param {Number} [config.x] x position of canvas section\n         * @param {Number} [config.y] y position of canvas section\n         * @param {Number} [config.width] width of canvas section\n         * @param {Number} [config.height] height of canvas section\n         * @param {Number} [config.quality] jpeg quality.  If using an \"image/jpeg\" mimeType,\n         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n         *  is very high quality\n         * @paremt {Number} [config.pixelRatio] pixelRatio of ouput image.  Default is 1.\n         * @example\n         * var image = node.toImage({\n         *   callback: function(img) {\n         *     // do stuff with img\n         *   }\n         * });\n         */\n        toImage: function(config) {\n            if (!config || !config.callback) {\n                throw 'callback required for toImage method config argument';\n            }\n            Konva.Util._getImage(this.toDataURL(config), function(img) {\n                config.callback(img);\n            });\n        },\n        setSize: function(size) {\n            this.setWidth(size.width);\n            this.setHeight(size.height);\n            return this;\n        },\n        getSize: function() {\n            return {\n                width: this.getWidth(),\n                height: this.getHeight()\n            };\n        },\n        getWidth: function() {\n            return this.attrs.width || 0;\n        },\n        getHeight: function() {\n            return this.attrs.height || 0;\n        },\n        /**\n         * get class name, which may return Stage, Layer, Group, or shape class names like Rect, Circle, Text, etc.\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {String}\n         */\n        getClassName: function() {\n            return this.className || this.nodeType;\n        },\n        /**\n         * get the node type, which may return Stage, Layer, Group, or Node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {String}\n         */\n        getType: function() {\n            return this.nodeType;\n        },\n        getDragDistance: function() {\n            // compare with undefined because we need to track 0 value\n            if (this.attrs.dragDistance !== undefined) {\n                return this.attrs.dragDistance;\n            } else if (this.parent) {\n                return this.parent.getDragDistance();\n            } else {\n                return Konva.dragDistance;\n            }\n        },\n        _get: function(selector) {\n            return this.className === selector || this.nodeType === selector ? [this] : [];\n        },\n        _off: function(type, name) {\n            var evtListeners = this.eventListeners[type],\n                i, evtName;\n\n            for(i = 0; i < evtListeners.length; i++) {\n                evtName = evtListeners[i].name;\n                // the following two conditions must be true in order to remove a handler:\n                // 1) the current event name cannot be konva unless the event name is konva\n                //    this enables developers to force remove a konva specific listener for whatever reason\n                // 2) an event name is not specified, or if one is specified, it matches the current event name\n                if((evtName !== 'konva' || name === 'konva') && (!name || evtName === name)) {\n                    evtListeners.splice(i, 1);\n                    if(evtListeners.length === 0) {\n                        delete this.eventListeners[type];\n                        break;\n                    }\n                    i--;\n                }\n            }\n        },\n        _fireChangeEvent: function(attr, oldVal, newVal) {\n            this._fire(attr + CHANGE, {\n                oldVal: oldVal,\n                newVal: newVal\n            });\n        },\n        setId: function(id) {\n            var oldId = this.getId();\n\n            Konva._removeId(oldId);\n            Konva._addId(this, id);\n            this._setAttr(ID, id);\n            return this;\n        },\n        setName: function(name) {\n            var oldNames = (this.getName() || '').split(/\\s/g);\n            var newNames = (name || '').split(/\\s/g);\n            var subname, i;\n            // remove all subnames\n            for(i = 0; i < oldNames.length; i++) {\n                subname = oldNames[i];\n                if ((newNames.indexOf(subname)) === -1 && subname) {\n                    Konva._removeName(subname, this._id);\n                }\n            }\n\n            // add new names\n            for(i = 0; i < newNames.length; i++) {\n                subname = newNames[i];\n                if ((oldNames.indexOf(subname) === -1) && subname) {\n                    Konva._addName(this, subname);\n                }\n            }\n\n            this._setAttr(NAME, name);\n            return this;\n        },\n        // naming methods\n        /**\n         * add name to node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} name\n         * @returns {Konva.Node}\n         * @example\n         * node.name('red');\n         * node.addName('selected');\n         * node.name(); // return 'red selected'\n         */\n        addName: function(name) {\n            if (!this.hasName(name)) {\n                var oldName = this.name();\n                var newName = oldName ? (oldName + ' ' + name) : name;\n                this.setName(newName);\n            }\n            return this;\n        },\n        /**\n         * check is node has name\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} name\n         * @returns {Boolean}\n         * @example\n         * node.name('red');\n         * node.hasName('red');   // return true\n         * node.hasName('selected'); // return false\n         */\n        hasName: function(name) {\n            var names = (this.name() || '').split(/\\s/g);\n            return names.indexOf(name) !== -1;\n        },\n        /**\n         * remove name from node\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} name\n         * @returns {Konva.Node}\n         * @example\n         * node.name('red selected');\n         * node.removeName('selected');\n         * node.hasName('selected'); // return false\n         * node.name(); // return 'red'\n         */\n        removeName: function(name) {\n            var names = (this.name() || '').split(/\\s/g);\n            var index = names.indexOf(name);\n            if (index !== -1) {\n                names.splice(index, 1);\n                this.setName(names.join(' '));\n            }\n            return this;\n        },\n        /**\n         * set attr\n         * @method\n         * @memberof Konva.Node.prototype\n         * @param {String} attr\n         * @param {*} val\n         * @returns {Konva.Node}\n         * @example\n         * node.setAttr('x', 5);\n         */\n        setAttr: function(attr, val) {\n            var method = SET + Konva.Util._capitalize(attr),\n                func = this[method];\n\n            if(Konva.Util._isFunction(func)) {\n                func.call(this, val);\n            }\n            // otherwise set directly\n            else {\n                this._setAttr(attr, val);\n            }\n            return this;\n        },\n        _setAttr: function(key, val) {\n            var oldVal;\n            oldVal = this.attrs[key];\n            if (oldVal === val) {\n                return;\n            }\n            if (val === undefined || val === null) {\n              delete this.attrs[key];\n            } else {\n              this.attrs[key] = val;\n            }\n            this._fireChangeEvent(key, oldVal, val);\n        },\n        _setComponentAttr: function(key, component, val) {\n            var oldVal;\n            if(val !== undefined) {\n                oldVal = this.attrs[key];\n\n                if (!oldVal) {\n                    // set value to default value using getAttr\n                    this.attrs[key] = this.getAttr(key);\n                }\n\n                this.attrs[key][component] = val;\n                this._fireChangeEvent(key, oldVal, val);\n            }\n        },\n        _fireAndBubble: function(eventType, evt, compareShape) {\n            var okayToRun = true;\n\n            if(evt && this.nodeType === SHAPE) {\n                evt.target = this;\n            }\n\n            if(eventType === MOUSEENTER && compareShape && (this._id === compareShape._id || (this.isAncestorOf && this.isAncestorOf(compareShape)))) {\n                okayToRun = false;\n            }\n            else if(eventType === MOUSELEAVE && compareShape && (this._id === compareShape._id || (this.isAncestorOf && this.isAncestorOf(compareShape)))) {\n                okayToRun = false;\n            }\n            if(okayToRun) {\n                this._fire(eventType, evt);\n\n                // simulate event bubbling\n                var stopBubble =\n                    (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&\n                    ((compareShape && compareShape.isAncestorOf && compareShape.isAncestorOf(this) && !compareShape.isAncestorOf(this.parent)));\n                if((evt && !evt.cancelBubble || !evt) && this.parent && this.parent.isListening() && (!stopBubble)) {\n                    if (compareShape && compareShape.parent) {\n                        this._fireAndBubble.call(this.parent, eventType, evt, compareShape.parent);\n                    }\n                    else {\n                        this._fireAndBubble.call(this.parent, eventType, evt);\n                    }\n                }\n            }\n        },\n        _fire: function(eventType, evt) {\n            var events = this.eventListeners[eventType],\n                i;\n\n            evt = evt || {};\n            evt.currentTarget = this;\n            evt.type = eventType;\n\n            if (events) {\n                for(i = 0; i < events.length; i++) {\n                    events[i].handler.call(this, evt);\n                }\n            }\n        },\n        /**\n         * draw both scene and hit graphs.  If the node being drawn is the stage, all of the layers will be cleared and redrawn\n         * @method\n         * @memberof Konva.Node.prototype\n         * @returns {Konva.Node}\n         */\n        draw: function() {\n            this.drawScene();\n            this.drawHit();\n            return this;\n        }\n    });\n\n    /**\n     * create node with JSON string or an Object.  De-serializtion does not generate custom\n     *  shape drawing functions, images, or event handlers (this would make the\n     *  serialized object huge).  If your app uses custom shapes, images, and\n     *  event handlers (it probably does), then you need to select the appropriate\n     *  shapes after loading the stage and set these properties via on(), setDrawFunc(),\n     *  and setImage() methods\n     * @method\n     * @memberof Konva.Node\n     * @param {String|Object} json string or object\n     * @param {Element} [container] optional container dom element used only if you're\n     *  creating a stage node\n     */\n    Konva.Node.create = function(data, container) {\n        if (Konva.Util._isString(data)) {\n            data = JSON.parse(data);\n        }\n        return this._createNode(data, container);\n    };\n    Konva.Node._createNode = function(obj, container) {\n        var className = Konva.Node.prototype.getClassName.call(obj),\n            children = obj.children,\n            no, len, n;\n\n        // if container was passed in, add it to attrs\n        if(container) {\n            obj.attrs.container = container;\n        }\n\n        no = new Konva[className](obj.attrs);\n        if(children) {\n            len = children.length;\n            for(n = 0; n < len; n++) {\n                no.add(this._createNode(children[n]));\n            }\n        }\n\n        return no;\n    };\n\n\n    // =========================== add getters setters ===========================\n\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'position');\n    /**\n     * get/set node position relative to parent\n     * @name position\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Object} pos\n     * @param {Number} pos.x\n     * @param {Number} pos.y\n     * @returns {Object}\n     * @example\n     * // get position\n     * var position = node.position();\n     *\n     * // set position\n     * node.position({\n     *   x: 5\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'x', 0);\n\n    /**\n     * get/set x position\n     * @name x\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} x\n     * @returns {Object}\n     * @example\n     * // get x\n     * var x = node.x();\n     *\n     * // set x\n     * node.x(5);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'y', 0);\n\n    /**\n     * get/set y position\n     * @name y\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} y\n     * @returns {Integer}\n     * @example\n     * // get y\n     * var y = node.y();\n     *\n     * // set y\n     * node.y(5);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'opacity', 1);\n\n    /**\n     * get/set opacity.  Opacity values range from 0 to 1.\n     *  A node with an opacity of 0 is fully transparent, and a node\n     *  with an opacity of 1 is fully opaque\n     * @name opacity\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Object} opacity\n     * @returns {Number}\n     * @example\n     * // get opacity\n     * var opacity = node.opacity();\n     *\n     * // set opacity\n     * node.opacity(0.5);\n     */\n\n    Konva.Factory.addGetter(Konva.Node, 'name');\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'name');\n\n    /**\n     * get/set name\n     * @name name\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {String} name\n     * @returns {String}\n     * @example\n     * // get name\n     * var name = node.name();\n     *\n     * // set name\n     * node.name('foo');\n     *\n     * // also node may have multiple names (as css classes)\n     * node.name('foo bar');\n     */\n\n    Konva.Factory.addGetter(Konva.Node, 'id');\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'id');\n\n    /**\n     * get/set id. Id is global for whole page.\n     * @name id\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {String} id\n     * @returns {String}\n     * @example\n     * // get id\n     * var name = node.id();\n     *\n     * // set id\n     * node.id('foo');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'rotation', 0);\n\n    /**\n     * get/set rotation in degrees\n     * @name rotation\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} rotation\n     * @returns {Number}\n     * @example\n     * // get rotation in degrees\n     * var rotation = node.rotation();\n     *\n     * // set rotation in degrees\n     * node.rotation(45);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'scale', ['x', 'y']);\n\n    /**\n     * get/set scale\n     * @name scale\n     * @param {Object} scale\n     * @param {Number} scale.x\n     * @param {Number} scale.y\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Object}\n     * @example\n     * // get scale\n     * var scale = node.scale();\n     *\n     * // set scale\n     * shape.scale({\n     *   x: 2\n     *   y: 3\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'scaleX', 1);\n\n    /**\n     * get/set scale x\n     * @name scaleX\n     * @param {Number} x\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Number}\n     * @example\n     * // get scale x\n     * var scaleX = node.scaleX();\n     *\n     * // set scale x\n     * node.scaleX(2);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'scaleY', 1);\n\n    /**\n     * get/set scale y\n     * @name scaleY\n     * @param {Number} y\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Number}\n     * @example\n     * // get scale y\n     * var scaleY = node.scaleY();\n     *\n     * // set scale y\n     * node.scaleY(2);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'skew', ['x', 'y']);\n\n    /**\n     * get/set skew\n     * @name skew\n     * @param {Object} skew\n     * @param {Number} skew.x\n     * @param {Number} skew.y\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Object}\n     * @example\n     * // get skew\n     * var skew = node.skew();\n     *\n     * // set skew\n     * node.skew({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'skewX', 0);\n\n    /**\n     * get/set skew x\n     * @name skewX\n     * @param {Number} x\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Number}\n     * @example\n     * // get skew x\n     * var skewX = node.skewX();\n     *\n     * // set skew x\n     * node.skewX(3);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'skewY', 0);\n\n    /**\n     * get/set skew y\n     * @name skewY\n     * @param {Number} y\n     * @method\n     * @memberof Konva.Node.prototype\n     * @returns {Number}\n     * @example\n     * // get skew y\n     * var skewY = node.skewY();\n     *\n     * // set skew y\n     * node.skewY(3);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Node, 'offset', ['x', 'y']);\n\n    /**\n     * get/set offset.  Offsets the default position and rotation point\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Object} offset\n     * @param {Number} offset.x\n     * @param {Number} offset.y\n     * @returns {Object}\n     * @example\n     * // get offset\n     * var offset = node.offset();\n     *\n     * // set offset\n     * node.offset({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'offsetX', 0);\n\n    /**\n     * get/set offset x\n     * @name offsetX\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get offset x\n     * var offsetX = node.offsetX();\n     *\n     * // set offset x\n     * node.offsetX(3);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'offsetY', 0);\n\n    /**\n     * get/set offset y\n     * @name offsetY\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get offset y\n     * var offsetY = node.offsetY();\n     *\n     * // set offset y\n     * node.offsetY(3);\n     */\n\n    Konva.Factory.addSetter(Konva.Node, 'dragDistance');\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'dragDistance');\n\n    /**\n     * get/set drag distance\n     * @name dragDistance\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} distance\n     * @returns {Number}\n     * @example\n     * // get drag distance\n     * var dragDistance = node.dragDistance();\n     *\n     * // set distance\n     * // node starts dragging only if pointer moved more then 3 pixels\n     * node.dragDistance(3);\n     * // or set globally\n     * Konva.dragDistance = 3;\n     */\n\n\n    Konva.Factory.addSetter(Konva.Node, 'width', 0);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'width');\n    /**\n     * get/set width\n     * @name width\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} width\n     * @returns {Number}\n     * @example\n     * // get width\n     * var width = node.width();\n     *\n     * // set width\n     * node.width(100);\n     */\n\n    Konva.Factory.addSetter(Konva.Node, 'height', 0);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'height');\n    /**\n     * get/set height\n     * @name height\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Number} height\n     * @returns {Number}\n     * @example\n     * // get height\n     * var height = node.height();\n     *\n     * // set height\n     * node.height(100);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'listening', 'inherit');\n    /**\n     * get/set listenig attr.  If you need to determine if a node is listening or not\n     *   by taking into account its parents, use the isListening() method\n     * @name listening\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Boolean|String} listening Can be \"inherit\", true, or false.  The default is \"inherit\".\n     * @returns {Boolean|String}\n     * @example\n     * // get listening attr\n     * var listening = node.listening();\n     *\n     * // stop listening for events\n     * node.listening(false);\n     *\n     * // listen for events\n     * node.listening(true);\n     *\n     * // listen to events according to the parent\n     * node.listening('inherit');\n     */\n\n\n\n     /**\n      * get/set preventDefault\n      * By default all shapes will prevent default behaviour\n      * of a browser on a pointer move or tap.\n      * that will prevent native scrolling when you are trying to drag&drop a node\n      * but sometimes you may need to enable default actions\n      * in that case you can set the property to false\n      * @name preventDefault\n      * @method\n      * @memberof Konva.Node.prototype\n      * @param {Number} preventDefault\n      * @returns {Number}\n      * @example\n      * // get preventDefault\n      * var shouldPrevent = shape.preventDefault();\n      *\n      * // set preventDefault\n      * shape.preventDefault(false);\n      */\n\n     Konva.Factory.addGetterSetter(Konva.Node, 'preventDefault', true);\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'filters', undefined, function(val) {this._filterUpToDate = false; return val; });\n    /**\n     * get/set filters.  Filters are applied to cached canvases\n     * @name filters\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Array} filters array of filters\n     * @returns {Array}\n     * @example\n     * // get filters\n     * var filters = node.filters();\n     *\n     * // set a single filter\n     * node.cache();\n     * node.filters([Konva.Filters.Blur]);\n     *\n     * // set multiple filters\n     * node.cache();\n     * node.filters([\n     *   Konva.Filters.Blur,\n     *   Konva.Filters.Sepia,\n     *   Konva.Filters.Invert\n     * ]);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'visible', 'inherit');\n    /**\n     * get/set visible attr.  Can be \"inherit\", true, or false.  The default is \"inherit\".\n     *   If you need to determine if a node is visible or not\n     *   by taking into account its parents, use the isVisible() method\n     * @name visible\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Boolean|String} visible\n     * @returns {Boolean|String}\n     * @example\n     * // get visible attr\n     * var visible = node.visible();\n     *\n     * // make invisible\n     * node.visible(false);\n     *\n     * // make visible\n     * node.visible(true);\n     *\n     * // make visible according to the parent\n     * node.visible('inherit');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'transformsEnabled', 'all');\n\n    /**\n     * get/set transforms that are enabled.  Can be \"all\", \"none\", or \"position\".  The default\n     *  is \"all\"\n     * @name transformsEnabled\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {String} enabled\n     * @returns {String}\n     * @example\n     * // enable position transform only to improve draw performance\n     * node.transformsEnabled('position');\n     *\n     * // enable all transforms\n     * node.transformsEnabled('all');\n     */\n\n\n\n    /**\n     * get/set node size\n     * @name size\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Object} size\n     * @param {Number} size.width\n     * @param {Number} size.height\n     * @returns {Object}\n     * @example\n     * // get node size\n     * var size = node.size();\n     * var x = size.x;\n     * var y = size.y;\n     *\n     * // set size\n     * node.size({\n     *   width: 100,\n     *   height: 200\n     * });\n     */\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'size');\n\n    Konva.Factory.backCompat(Konva.Node, {\n        rotateDeg: 'rotate',\n        setRotationDeg: 'setRotation',\n        getRotationDeg: 'getRotation'\n    });\n\n    Konva.Collection.mapMethods(Konva.Node);\n})(Konva);\n\n(function() {\r\n    'use strict';\r\n    /**\r\n    * Grayscale Filter\r\n    * @function\r\n    * @memberof Konva.Filters\r\n    * @param {Object} imageData\r\n    * @example\r\n    * node.cache();\r\n    * node.filters([Konva.Filters.Grayscale]);\r\n    */\r\n    Konva.Filters.Grayscale = function(imageData) {\r\n        var data = imageData.data,\r\n            len = data.length,\r\n            i, brightness;\r\n\r\n        for(i = 0; i < len; i += 4) {\r\n            brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];\r\n            // red\r\n            data[i] = brightness;\r\n            // green\r\n            data[i + 1] = brightness;\r\n            // blue\r\n            data[i + 2] = brightness;\r\n        }\r\n    };\r\n})();\r\n\n(function() {\n    'use strict';\n    /**\n     * Brighten Filter.\n     * @function\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Brighten]);\n     * node.brightness(0.8);\n     */\n    Konva.Filters.Brighten = function(imageData) {\n        var brightness = this.brightness() * 255,\n            data = imageData.data,\n            len = data.length,\n            i;\n\n        for(i = 0; i < len; i += 4) {\n            // red\n            data[i] += brightness;\n            // green\n            data[i + 1] += brightness;\n            // blue\n            data[i + 2] += brightness;\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'brightness', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set filter brightness.  The brightness is a number between -1 and 1.&nbsp; Positive values\n    *  brighten the pixels and negative values darken them. Use with {@link Konva.Filters.Brighten} filter.\n    * @name brightness\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} brightness value between -1 and 1\n    * @returns {Number}\n    */\n\n})();\n\n(function() {\r\n    'use strict';\r\n    /**\r\n    * Invert Filter\r\n    * @function\r\n    * @memberof Konva.Filters\r\n    * @param {Object} imageData\r\n    * @example\r\n    * node.cache();\r\n    * node.filters([Konva.Filters.Invert]);\r\n    */\r\n    Konva.Filters.Invert = function(imageData) {\r\n        var data = imageData.data,\r\n            len = data.length,\r\n            i;\r\n\r\n        for(i = 0; i < len; i += 4) {\r\n            // red\r\n            data[i] = 255 - data[i];\r\n            // green\r\n            data[i + 1] = 255 - data[i + 1];\r\n            // blue\r\n            data[i + 2] = 255 - data[i + 2];\r\n        }\r\n    };\r\n})();\r\n\n/*\n the Gauss filter\n master repo: https://github.com/pavelpower/kineticjsGaussFilter\n*/\n(function() {\n    'use strict';\n    /*\n\n     StackBlur - a fast almost Gaussian Blur For Canvas\n\n     Version:   0.5\n     Author:    Mario Klingemann\n     Contact:   mario@quasimondo.com\n     Website:   http://www.quasimondo.com/StackBlurForCanvas\n     Twitter:   @quasimondo\n\n     In case you find this class useful - especially in commercial projects -\n     I am not totally unhappy for a small donation to my PayPal account\n     mario@quasimondo.de\n\n     Or support me on flattr:\n     https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n     Copyright (c) 2010 Mario Klingemann\n\n     Permission is hereby granted, free of charge, to any person\n     obtaining a copy of this software and associated documentation\n     files (the \"Software\"), to deal in the Software without\n     restriction, including without limitation the rights to use,\n     copy, modify, merge, publish, distribute, sublicense, and/or sell\n     copies of the Software, and to permit persons to whom the\n     Software is furnished to do so, subject to the following\n     conditions:\n\n     The above copyright notice and this permission notice shall be\n     included in all copies or substantial portions of the Software.\n\n     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n     OTHER DEALINGS IN THE SOFTWARE.\n     */\n\n    function BlurStack() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.next = null;\n    }\n\n    var mul_table = [\n        512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512,\n        454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512,\n        482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456,\n        437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512,\n        497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328,\n        320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456,\n        446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335,\n        329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512,\n        505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405,\n        399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328,\n        324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271,\n        268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456,\n        451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388,\n        385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335,\n        332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,\n        289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259\n    ];\n\n    var shg_table = [\n        9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n        17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24\n    ];\n\n    function filterGaussBlurRGBA( imageData, radius) {\n\n        var pixels = imageData.data,\n            width = imageData.width,\n            height = imageData.height;\n\n        var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,\n            r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n            r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n            pr, pg, pb, pa, rbs;\n\n        var div = radius + radius + 1,\n            widthMinus1 = width - 1,\n            heightMinus1 = height - 1,\n            radiusPlus1 = radius + 1,\n            sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2,\n            stackStart = new BlurStack(),\n            stackEnd = null,\n            stack = stackStart,\n            stackIn = null,\n            stackOut = null,\n            mul_sum = mul_table[radius],\n            shg_sum = shg_table[radius];\n\n        for ( i = 1; i < div; i++ ) {\n            stack = stack.next = new BlurStack();\n            if ( i === radiusPlus1 ){\n                stackEnd = stack;\n            }\n        }\n\n        stack.next = stackStart;\n\n        yw = yi = 0;\n\n        for ( y = 0; y < height; y++ )\n        {\n            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n            r_out_sum = radiusPlus1 * ( pr = pixels[yi] );\n            g_out_sum = radiusPlus1 * ( pg = pixels[yi + 1] );\n            b_out_sum = radiusPlus1 * ( pb = pixels[yi + 2] );\n            a_out_sum = radiusPlus1 * ( pa = pixels[yi + 3] );\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for( i = 0; i < radiusPlus1; i++ )\n            {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            for( i = 1; i < radiusPlus1; i++ )\n            {\n                p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );\n                r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );\n                g_sum += ( stack.g = ( pg = pixels[p + 1])) * rbs;\n                b_sum += ( stack.b = ( pb = pixels[p + 2])) * rbs;\n                a_sum += ( stack.a = ( pa = pixels[p + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n            }\n\n\n            stackIn = stackStart;\n            stackOut = stackEnd;\n            for ( x = 0; x < width; x++ )\n            {\n                pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n                if ( pa !== 0 )\n                {\n                    pa = 255 / pa;\n                    pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n                } else {\n                    pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n                }\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = (yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;\n\n                r_in_sum += ( stackIn.r = pixels[p]);\n                g_in_sum += ( stackIn.g = pixels[p + 1]);\n                b_in_sum += ( stackIn.b = pixels[p + 2]);\n                a_in_sum += ( stackIn.a = pixels[p + 3]);\n\n                r_sum += r_in_sum;\n                g_sum += g_in_sum;\n                b_sum += b_in_sum;\n                a_sum += a_in_sum;\n\n                stackIn = stackIn.next;\n\n                r_out_sum += ( pr = stackOut.r );\n                g_out_sum += ( pg = stackOut.g );\n                b_out_sum += ( pb = stackOut.b );\n                a_out_sum += ( pa = stackOut.a );\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += 4;\n            }\n            yw += width;\n        }\n\n\n        for ( x = 0; x < width; x++ )\n        {\n            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n            yi = x << 2;\n            r_out_sum = radiusPlus1 * ( pr = pixels[yi]);\n            g_out_sum = radiusPlus1 * ( pg = pixels[yi + 1]);\n            b_out_sum = radiusPlus1 * ( pb = pixels[yi + 2]);\n            a_out_sum = radiusPlus1 * ( pa = pixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for( i = 0; i < radiusPlus1; i++ )\n            {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            yp = width;\n\n            for( i = 1; i <= radius; i++ )\n            {\n                yi = ( yp + x ) << 2;\n\n                r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );\n                g_sum += ( stack.g = ( pg = pixels[yi + 1])) * rbs;\n                b_sum += ( stack.b = ( pb = pixels[yi + 2])) * rbs;\n                a_sum += ( stack.a = ( pa = pixels[yi + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n\n                if( i < heightMinus1 )\n                {\n                    yp += width;\n                }\n            }\n\n            yi = x;\n            stackIn = stackStart;\n            stackOut = stackEnd;\n            for ( y = 0; y < height; y++ )\n            {\n                p = yi << 2;\n                pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n                if ( pa > 0 )\n                {\n                    pa = 255 / pa;\n                    pixels[p] = ((r_sum * mul_sum) >> shg_sum ) * pa;\n                    pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum ) * pa;\n                    pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum ) * pa;\n                } else {\n                    pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n                }\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;\n\n                r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));\n                g_sum += ( g_in_sum += ( stackIn.g = pixels[p + 1]));\n                b_sum += ( b_in_sum += ( stackIn.b = pixels[p + 2]));\n                a_sum += ( a_in_sum += ( stackIn.a = pixels[p + 3]));\n\n                stackIn = stackIn.next;\n\n                r_out_sum += ( pr = stackOut.r );\n                g_out_sum += ( pg = stackOut.g );\n                b_out_sum += ( pb = stackOut.b );\n                a_out_sum += ( pa = stackOut.a );\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += width;\n            }\n        }\n    }\n\n    /**\n     * Blur Filter\n     * @function\n     * @name Blur\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Blur]);\n     * node.blurRadius(10);\n     */\n    Konva.Filters.Blur = function Blur(imageData) {\n        var radius = Math.round(this.blurRadius());\n\n        if (radius > 0) {\n            filterGaussBlurRGBA(imageData, radius);\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'blurRadius', 0, null, Konva.Factory.afterSetFilter);\n\n    /**\n    * get/set blur radius. Use with {@link Konva.Filters.Blur} filter\n    * @name blurRadius\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} radius\n    * @returns {Integer}\n    */\n})();\n\n/*eslint-disable  max-depth */\n(function() {\n\t'use strict';\n\tfunction pixelAt(idata, x, y) {\n\t\tvar idx = (y * idata.width + x) * 4;\n\t\tvar d = [];\n\t\td.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);\n\t\treturn d;\n\t}\n\n\tfunction rgbDistance(p1, p2) {\n\t\treturn Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));\n\t}\n\n\tfunction rgbMean(pTab) {\n\t\tvar m = [0, 0, 0];\n\n\t\tfor (var i = 0; i < pTab.length; i++) {\n\t\t\tm[0] += pTab[i][0];\n\t\t\tm[1] += pTab[i][1];\n\t\t\tm[2] += pTab[i][2];\n\t\t}\n\n\t\tm[0] /= pTab.length;\n\t\tm[1] /= pTab.length;\n\t\tm[2] /= pTab.length;\n\n\t\treturn m;\n\t}\n\n\tfunction backgroundMask(idata, threshold) {\n\t\tvar rgbv_no = pixelAt(idata, 0, 0);\n\t\tvar rgbv_ne = pixelAt(idata, idata.width - 1, 0);\n\t\tvar rgbv_so = pixelAt(idata, 0, idata.height - 1);\n\t\tvar rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);\n\n\n\t\tvar thres = threshold || 10;\n\t\tif (rgbDistance(rgbv_no, rgbv_ne) < thres && rgbDistance(rgbv_ne, rgbv_se) < thres && rgbDistance(rgbv_se, rgbv_so) < thres && rgbDistance(rgbv_so, rgbv_no) < thres) {\n\n\t\t\t// Mean color\n\t\t\tvar mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);\n\n\t\t\t// Mask based on color distance\n\t\t\tvar mask = [];\n\t\t\tfor (var i = 0; i < idata.width * idata.height; i++) {\n\t\t\t\tvar d = rgbDistance(mean, [idata.data[i * 4], idata.data[i * 4 + 1], idata.data[i * 4 + 2]]);\n\t\t\t\tmask[i] = (d < thres) ? 0 : 255;\n\t\t\t}\n\n\t\t\treturn mask;\n\t\t}\n\t}\n\n\tfunction applyMask(idata, mask) {\n\t\tfor (var i = 0; i < idata.width * idata.height; i++) {\n\t\t\tidata.data[4 * i + 3] = mask[i];\n\t\t}\n\t}\n\n\tfunction erodeMask(mask, sw, sh) {\n\n\t\tvar weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];\n\t\tvar side = Math.round(Math.sqrt(weights.length));\n\t\tvar halfSide = Math.floor(side / 2);\n\n\t\tvar maskResult = [];\n\t\tfor (var y = 0; y < sh; y++) {\n\t\t\tfor (var x = 0; x < sw; x++) {\n\n\t\t\t\tvar so = y * sw + x;\n\t\t\t\tvar a = 0;\n\t\t\t\tfor (var cy = 0; cy < side; cy++) {\n\t\t\t\t\tfor (var cx = 0; cx < side; cx++) {\n\t\t\t\t\t\tvar scy = y + cy - halfSide;\n\t\t\t\t\t\tvar scx = x + cx - halfSide;\n\n\t\t\t\t\t\tif (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n\n\t\t\t\t\t\t\tvar srcOff = scy * sw + scx;\n\t\t\t\t\t\t\tvar wt = weights[cy * side + cx];\n\n\t\t\t\t\t\t\ta += mask[srcOff] * wt;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmaskResult[so] = (a === 255 * 8) ? 255 : 0;\n\t\t\t}\n\t\t}\n\n\t\treturn maskResult;\n\t}\n\n\tfunction dilateMask(mask, sw, sh) {\n\n\t\tvar weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];\n\t\tvar side = Math.round(Math.sqrt(weights.length));\n\t\tvar halfSide = Math.floor(side / 2);\n\n\t\tvar maskResult = [];\n\t\tfor (var y = 0; y < sh; y++) {\n\t\t\tfor (var x = 0; x < sw; x++) {\n\n\t\t\t\tvar so = y * sw + x;\n\t\t\t\tvar a = 0;\n\t\t\t\tfor (var cy = 0; cy < side; cy++) {\n\t\t\t\t\tfor (var cx = 0; cx < side; cx++) {\n\t\t\t\t\t\tvar scy = y + cy - halfSide;\n\t\t\t\t\t\tvar scx = x + cx - halfSide;\n\n\t\t\t\t\t\tif (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n\n\t\t\t\t\t\t\tvar srcOff = scy * sw + scx;\n\t\t\t\t\t\t\tvar wt = weights[cy * side + cx];\n\n\t\t\t\t\t\t\ta += mask[srcOff] * wt;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmaskResult[so] = (a >= 255 * 4) ? 255 : 0;\n\t\t\t}\n\t\t}\n\n\t\treturn maskResult;\n\t}\n\n\tfunction smoothEdgeMask(mask, sw, sh) {\n\n\t\tvar weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];\n\t\tvar side = Math.round(Math.sqrt(weights.length));\n\t\tvar halfSide = Math.floor(side / 2);\n\n\t\tvar maskResult = [];\n\t\tfor (var y = 0; y < sh; y++) {\n\t\t\tfor (var x = 0; x < sw; x++) {\n\n\t\t\t\tvar so = y * sw + x;\n\t\t\t\tvar a = 0;\n\t\t\t\tfor (var cy = 0; cy < side; cy++) {\n\t\t\t\t\tfor (var cx = 0; cx < side; cx++) {\n\t\t\t\t\t\tvar scy = y + cy - halfSide;\n\t\t\t\t\t\tvar scx = x + cx - halfSide;\n\n\t\t\t\t\t\tif (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n\n\t\t\t\t\t\t\tvar srcOff = scy * sw + scx;\n\t\t\t\t\t\t\tvar wt = weights[cy * side + cx];\n\n\t\t\t\t\t\t\ta += mask[srcOff] * wt;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmaskResult[so] = a;\n\t\t\t}\n\t\t}\n\n\t\treturn maskResult;\n\t}\n\n\t/**\n\t * Mask Filter\n\t * @function\n\t * @name Mask\n\t * @memberof Konva.Filters\n\t * @param {Object} imageData\n\t * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Mask]);\n     * node.threshold(200);\n\t */\n\tKonva.Filters.Mask = function(imageData) {\n\t\t// Detect pixels close to the background color\n\t\tvar threshold = this.threshold(),\n        mask = backgroundMask(imageData, threshold);\n\t\tif (mask) {\n\t\t\t// Erode\n\t\t\tmask = erodeMask(mask, imageData.width, imageData.height);\n\n\t\t\t// Dilate\n\t\t\tmask = dilateMask(mask, imageData.width, imageData.height);\n\n\t\t\t// Gradient\n\t\t\tmask = smoothEdgeMask(mask, imageData.width, imageData.height);\n\n\t\t\t// Apply mask\n\t\t\tapplyMask(imageData, mask);\n\n\t\t\t// todo : Update hit region function according to mask\n\t\t}\n\n\t\treturn imageData;\n\t};\n\n\tKonva.Factory.addGetterSetter(Konva.Node, 'threshold', 0, null, Konva.Factory.afterSetFilter);\n})();\n\n(function () {\n    'use strict';\n    /**\n     * RGB Filter\n     * @function\n     * @name RGB\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @author ippo615\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.RGB]);\n     * node.blue(120);\n     * node.green(200);\n     */\n    Konva.Filters.RGB = function (imageData) {\n        var data = imageData.data,\n            nPixels = data.length,\n            red = this.red(),\n            green = this.green(),\n            blue = this.blue(),\n            i, brightness;\n\n        for (i = 0; i < nPixels; i += 4) {\n            brightness = (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;\n            data[i] = brightness * red; // r\n            data[i + 1] = brightness * green; // g\n            data[i + 2] = brightness * blue; // b\n            data[i + 3] = data[i + 3]; // alpha\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'red', 0, function(val) {\n        this._filterUpToDate = false;\n        if (val > 255) {\n            return 255;\n        }\n        else if (val < 0) {\n            return 0;\n        }\n        else {\n            return Math.round(val);\n        }\n    });\n    /**\n    * get/set filter red value. Use with {@link Konva.Filters.RGB} filter.\n    * @name red\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} red value between 0 and 255\n    * @returns {Integer}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'green', 0, function(val) {\n        this._filterUpToDate = false;\n        if (val > 255) {\n            return 255;\n        }\n        else if (val < 0) {\n            return 0;\n        }\n        else {\n            return Math.round(val);\n        }\n    });\n    /**\n    * get/set filter green value. Use with {@link Konva.Filters.RGB} filter.\n    * @name green\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} green value between 0 and 255\n    * @returns {Integer}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'blue', 0, Konva.Validators.RGBComponent, Konva.Factory.afterSetFilter);\n    /**\n    * get/set filter blue value. Use with {@link Konva.Filters.RGB} filter.\n    * @name blue\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} blue value between 0 and 255\n    * @returns {Integer}\n    */\n})();\n\n(function () {\n    'use strict';\n    /**\n     * RGBA Filter\n     * @function\n     * @name RGBA\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @author codefo\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.RGBA]);\n     * node.blue(120);\n     * node.green(200);\n     * node.alpha(0.3);\n     */\n    Konva.Filters.RGBA = function (imageData) {\n        var data = imageData.data,\n            nPixels = data.length,\n            red = this.red(),\n            green = this.green(),\n            blue = this.blue(),\n            alpha = this.alpha(),\n            i, ia;\n\n        for (i = 0; i < nPixels; i += 4) {\n            ia = 1 - alpha;\n\n            data[i] = red * alpha + data[i] * ia; // r\n            data[i + 1] = green * alpha + data[i + 1] * ia; // g\n            data[i + 2] = blue * alpha + data[i + 2] * ia; // b\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'red', 0, function(val) {\n        this._filterUpToDate = false;\n        if (val > 255) {\n            return 255;\n        }\n        else if (val < 0) {\n            return 0;\n        }\n        else {\n            return Math.round(val);\n        }\n    });\n    /**\n    * get/set filter red value. Use with {@link Konva.Filters.RGBA} filter.\n    * @name red\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} red value between 0 and 255\n    * @returns {Integer}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'green', 0, function(val) {\n        this._filterUpToDate = false;\n        if (val > 255) {\n            return 255;\n        }\n        else if (val < 0) {\n            return 0;\n        }\n        else {\n            return Math.round(val);\n        }\n    });\n    /**\n    * get/set filter green value. Use with {@link Konva.Filters.RGBA} filter.\n    * @name green\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} green value between 0 and 255\n    * @returns {Integer}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'blue', 0, Konva.Validators.RGBComponent, Konva.Factory.afterSetFilter);\n    /**\n    * get/set filter blue value. Use with {@link Konva.Filters.RGBA} filter.\n    * @name blue\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} blue value between 0 and 255\n    * @returns {Integer}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'alpha', 1, function(val) {\n        this._filterUpToDate = false;\n        if (val > 1) {\n            return 1;\n        }\n        else if (val < 0) {\n            return 0;\n        }\n        else {\n            return val;\n        }\n    });\n    /**\n     * get/set filter alpha value. Use with {@link Konva.Filters.RGBA} filter.\n     * @name alpha\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Float} alpha value between 0 and 1\n     * @returns {Float}\n     */\n})();\n\n(function () {\n    'use strict';\n    /**\n    * HSV Filter. Adjusts the hue, saturation and value\n    * @function\n    * @name HSV\n    * @memberof Konva.Filters\n    * @param {Object} imageData\n    * @author ippo615\n    * @example\n    * image.filters([Konva.Filters.HSV]);\n    * image.value(200);\n    */\n\n    Konva.Filters.HSV = function (imageData) {\n        var data = imageData.data,\n            nPixels = data.length,\n            v = Math.pow(2, this.value()),\n            s = Math.pow(2, this.saturation()),\n            h = Math.abs((this.hue()) + 360) % 360,\n            i;\n\n        // Basis for the technique used:\n        // http://beesbuzz.biz/code/hsv_color_transforms.php\n        // V is the value multiplier (1 for none, 2 for double, 0.5 for half)\n        // S is the saturation multiplier (1 for none, 2 for double, 0.5 for half)\n        // H is the hue shift in degrees (0 to 360)\n        // vsu = V*S*cos(H*PI/180);\n        // vsw = V*S*sin(H*PI/180);\n        //[ .299V+.701vsu+.168vsw    .587V-.587vsu+.330vsw    .114V-.114vsu-.497vsw ] [R]\n        //[ .299V-.299vsu-.328vsw    .587V+.413vsu+.035vsw    .114V-.114vsu+.292vsw ]*[G]\n        //[ .299V-.300vsu+1.25vsw    .587V-.588vsu-1.05vsw    .114V+.886vsu-.203vsw ] [B]\n\n        // Precompute the values in the matrix:\n        var vsu = v * s * Math.cos(h * Math.PI / 180),\n            vsw = v * s * Math.sin(h * Math.PI / 180);\n        // (result spot)(source spot)\n        var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw,\n            rg = 0.587 * v - 0.587 * vsu + 0.330 * vsw,\n            rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;\n        var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw,\n            gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw,\n            gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;\n        var br = 0.299 * v - 0.300 * vsu + 1.250 * vsw,\n            bg = 0.587 * v - 0.586 * vsu - 1.050 * vsw,\n            bb = 0.114 * v + 0.886 * vsu - 0.200 * vsw;\n\n        var r, g, b, a;\n\n        for (i = 0; i < nPixels; i += 4) {\n            r = data[i + 0];\n            g = data[i + 1];\n            b = data[i + 2];\n            a = data[i + 3];\n\n            data[i + 0] = rr * r + rg * g + rb * b;\n            data[i + 1] = gr * r + gg * g + gb * b;\n            data[i + 2] = br * r + bg * g + bb * b;\n            data[i + 3] = a; // alpha\n        }\n\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'hue', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\n    * @name hue\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} hue value between 0 and 359\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'saturation', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\n    * @name saturation\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} saturation 0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'value', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsv value. Use with {@link Konva.Filters.HSV} filter.\n    * @name value\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} value 0 is no change, -1.0 halves the value, 1.0 doubles, etc..\n    * @returns {Number}\n    */\n\n})();\n\n(function () {\n    'use strict';\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'hue', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\n    * @name hue\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} hue value between 0 and 359\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'saturation', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\n    * @name saturation\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} saturation 0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'luminance', 0, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.\n    * @name value\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} value 0 is no change, -1.0 halves the value, 1.0 doubles, etc..\n    * @returns {Number}\n    */\n\n    /**\n    * HSL Filter. Adjusts the hue, saturation and luminance (or lightness)\n    * @function\n    * @memberof Konva.Filters\n    * @param {Object} imageData\n    * @author ippo615\n    * @example\n    * image.filters([Konva.Filters.HSL]);\n    * image.luminance(200);\n    */\n\n    Konva.Filters.HSL = function (imageData) {\n        var data = imageData.data,\n            nPixels = data.length,\n            v = 1,\n            s = Math.pow(2, this.saturation()),\n            h = Math.abs((this.hue()) + 360) % 360,\n            l = this.luminance() * 127,\n            i;\n\n        // Basis for the technique used:\n        // http://beesbuzz.biz/code/hsv_color_transforms.php\n        // V is the value multiplier (1 for none, 2 for double, 0.5 for half)\n        // S is the saturation multiplier (1 for none, 2 for double, 0.5 for half)\n        // H is the hue shift in degrees (0 to 360)\n        // vsu = V*S*cos(H*PI/180);\n        // vsw = V*S*sin(H*PI/180);\n        //[ .299V+.701vsu+.168vsw    .587V-.587vsu+.330vsw    .114V-.114vsu-.497vsw ] [R]\n        //[ .299V-.299vsu-.328vsw    .587V+.413vsu+.035vsw    .114V-.114vsu+.292vsw ]*[G]\n        //[ .299V-.300vsu+1.25vsw    .587V-.588vsu-1.05vsw    .114V+.886vsu-.203vsw ] [B]\n\n        // Precompute the values in the matrix:\n        var vsu = v * s * Math.cos(h * Math.PI / 180),\n            vsw = v * s * Math.sin(h * Math.PI / 180);\n        // (result spot)(source spot)\n        var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw,\n            rg = 0.587 * v - 0.587 * vsu + 0.330 * vsw,\n            rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;\n        var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw,\n            gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw,\n            gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;\n        var br = 0.299 * v - 0.300 * vsu + 1.250 * vsw,\n            bg = 0.587 * v - 0.586 * vsu - 1.050 * vsw,\n            bb = 0.114 * v + 0.886 * vsu - 0.200 * vsw;\n\n        var r, g, b, a;\n\n        for (i = 0; i < nPixels; i += 4) {\n            r = data[i + 0];\n            g = data[i + 1];\n            b = data[i + 2];\n            a = data[i + 3];\n\n            data[i + 0] = rr * r + rg * g + rb * b + l;\n            data[i + 1] = gr * r + gg * g + gb * b + l;\n            data[i + 2] = br * r + bg * g + bb * b + l;\n            data[i + 3] = a; // alpha\n        }\n    };\n})();\n\n(function () {\n    'use strict';\n    /**\n     * Emboss Filter.\n     * Pixastic Lib - Emboss filter - v0.1.0\n     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\n     * License: [http://www.pixastic.com/lib/license.txt]\n     * @function\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Emboss]);\n     * node.embossStrength(0.8);\n     * node.embossWhiteLevel(0.3);\n     * node.embossDirection('right');\n     * node.embossBlend(true);\n     */\n    Konva.Filters.Emboss = function (imageData) {\n\n        // pixastic strength is between 0 and 10.  I want it between 0 and 1\n        // pixastic greyLevel is between 0 and 255.  I want it between 0 and 1.  Also,\n        // a max value of greyLevel yields a white emboss, and the min value yields a black\n        // emboss.  Therefore, I changed greyLevel to whiteLevel\n        var strength = this.embossStrength() * 10,\n            greyLevel = this.embossWhiteLevel() * 255,\n            direction = this.embossDirection(),\n            blend = this.embossBlend(),\n            dirY = 0,\n            dirX = 0,\n            data = imageData.data,\n            w = imageData.width,\n            h = imageData.height,\n            w4 = w * 4,\n            y = h;\n\n        switch (direction) {\n            case 'top-left':\n                dirY = -1;\n                dirX = -1;\n                break;\n            case 'top':\n                dirY = -1;\n                dirX = 0;\n                break;\n            case 'top-right':\n                dirY = -1;\n                dirX = 1;\n                break;\n            case 'right':\n                dirY = 0;\n                dirX = 1;\n                break;\n            case 'bottom-right':\n                dirY = 1;\n                dirX = 1;\n                break;\n            case 'bottom':\n                dirY = 1;\n                dirX = 0;\n                break;\n            case 'bottom-left':\n                dirY = 1;\n                dirX = -1;\n                break;\n            case 'left':\n                dirY = 0;\n                dirX = -1;\n                break;\n            default:\n                Konva.Util.error('Unknwo emboss direction: ' + direction);\n        }\n\n        do {\n            var offsetY = (y - 1) * w4;\n\n            var otherY = dirY;\n            if (y + otherY < 1){\n                otherY = 0;\n            }\n            if (y + otherY > h) {\n                otherY = 0;\n            }\n\n            var offsetYOther = (y - 1 + otherY) * w * 4;\n\n            var x = w;\n            do {\n                var offset = offsetY + (x - 1) * 4;\n\n                var otherX = dirX;\n                if (x + otherX < 1){\n                    otherX = 0;\n                }\n                if (x + otherX > w) {\n                    otherX = 0;\n                }\n\n                var offsetOther = offsetYOther + (x - 1 + otherX) * 4;\n\n                var dR = data[offset] - data[offsetOther];\n                var dG = data[offset + 1] - data[offsetOther + 1];\n                var dB = data[offset + 2] - data[offsetOther + 2];\n\n                var dif = dR;\n                var absDif = dif > 0 ? dif : -dif;\n\n                var absG = dG > 0 ? dG : -dG;\n                var absB = dB > 0 ? dB : -dB;\n\n                if (absG > absDif) {\n                    dif = dG;\n                }\n                if (absB > absDif) {\n                    dif = dB;\n                }\n\n                dif *= strength;\n\n                if (blend) {\n                    var r = data[offset] + dif;\n                    var g = data[offset + 1] + dif;\n                    var b = data[offset + 2] + dif;\n\n                    data[offset] = (r > 255) ? 255 : (r < 0 ? 0 : r);\n                    data[offset + 1] = (g > 255) ? 255 : (g < 0 ? 0 : g);\n                    data[offset + 2] = (b > 255) ? 255 : (b < 0 ? 0 : b);\n                } else {\n                    var grey = greyLevel - dif;\n                    if (grey < 0) {\n                        grey = 0;\n                    } else if (grey > 255) {\n                        grey = 255;\n                    }\n\n                    data[offset] = data[offset + 1] = data[offset + 2] = grey;\n                }\n\n            } while (--x);\n        } while (--y);\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'embossStrength', 0.5, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.\n    * @name embossStrength\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} level between 0 and 1.  Default is 0.5\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'embossWhiteLevel', 0.5, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.\n    * @name embossWhiteLevel\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} embossWhiteLevel between 0 and 1.  Default is 0.5\n    * @returns {Number}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'embossDirection', 'top-left', null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.\n    * @name embossDirection\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {String} embossDirection can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\n    *   The default is top-left\n    * @returns {String}\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'embossBlend', false, null, Konva.Factory.afterSetFilter);\n    /**\n    * get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.\n    * @name embossBlend\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Boolean} embossBlend\n    * @returns {Boolean}\n    */\n})();\n\n(function () {\n    'use strict';\n    function remap(fromValue, fromMin, fromMax, toMin, toMax) {\n        // Compute the range of the data\n        var fromRange = fromMax - fromMin,\n          toRange = toMax - toMin,\n          toValue;\n\n        // If either range is 0, then the value can only be mapped to 1 value\n        if (fromRange === 0) {\n            return toMin + toRange / 2;\n        }\n        if (toRange === 0) {\n            return toMin;\n        }\n\n        // (1) untranslate, (2) unscale, (3) rescale, (4) retranslate\n        toValue = (fromValue - fromMin) / fromRange;\n        toValue = (toRange * toValue) + toMin;\n\n        return toValue;\n    }\n\n\n    /**\n    * Enhance Filter. Adjusts the colors so that they span the widest\n    *  possible range (ie 0-255). Performs w*h pixel reads and w*h pixel\n    *  writes.\n    * @function\n    * @name Enhance\n    * @memberof Konva.Filters\n    * @param {Object} imageData\n    * @author ippo615\n    * @example\n    * node.cache();\n    * node.filters([Konva.Filters.Enhance]);\n    * node.enhance(0.4);\n    */\n    Konva.Filters.Enhance = function (imageData) {\n        var data = imageData.data,\n            nSubPixels = data.length,\n            rMin = data[0], rMax = rMin, r,\n            gMin = data[1], gMax = gMin, g,\n            bMin = data[2], bMax = bMin, b,\n            i;\n\n        // If we are not enhancing anything - don't do any computation\n        var enhanceAmount = this.enhance();\n        if( enhanceAmount === 0 ){ return; }\n\n        // 1st Pass - find the min and max for each channel:\n        for (i = 0; i < nSubPixels; i += 4) {\n            r = data[i + 0];\n            if (r < rMin) { rMin = r; }\n            else if (r > rMax) { rMax = r; }\n            g = data[i + 1];\n            if (g < gMin) { gMin = g; } else\n            if (g > gMax) { gMax = g; }\n            b = data[i + 2];\n            if (b < bMin) { bMin = b; } else\n            if (b > bMax) { bMax = b; }\n            //a = data[i + 3];\n            //if (a < aMin) { aMin = a; } else\n            //if (a > aMax) { aMax = a; }\n        }\n\n        // If there is only 1 level - don't remap\n        if( rMax === rMin ){ rMax = 255; rMin = 0; }\n        if( gMax === gMin ){ gMax = 255; gMin = 0; }\n        if( bMax === bMin ){ bMax = 255; bMin = 0; }\n\n        var rMid, rGoalMax, rGoalMin,\n            gMid, gGoalMax, gGoalMin,\n            bMid, bGoalMax, bGoalMin;\n\n        // If the enhancement is positive - stretch the histogram\n        if ( enhanceAmount > 0 ){\n            rGoalMax = rMax + enhanceAmount * (255 - rMax);\n            rGoalMin = rMin - enhanceAmount * (rMin - 0);\n            gGoalMax = gMax + enhanceAmount * (255 - gMax);\n            gGoalMin = gMin - enhanceAmount * (gMin - 0);\n            bGoalMax = bMax + enhanceAmount * (255 - bMax);\n            bGoalMin = bMin - enhanceAmount * (bMin - 0);\n        // If the enhancement is negative -   compress the histogram\n        } else {\n            rMid = (rMax + rMin) * 0.5;\n            rGoalMax = rMax + enhanceAmount * (rMax - rMid);\n            rGoalMin = rMin + enhanceAmount * (rMin - rMid);\n            gMid = (gMax + gMin) * 0.5;\n            gGoalMax = gMax + enhanceAmount * (gMax - gMid);\n            gGoalMin = gMin + enhanceAmount * (gMin - gMid);\n            bMid = (bMax + bMin) * 0.5;\n            bGoalMax = bMax + enhanceAmount * (bMax - bMid);\n            bGoalMin = bMin + enhanceAmount * (bMin - bMid);\n        }\n\n        // Pass 2 - remap everything, except the alpha\n        for (i = 0; i < nSubPixels; i += 4) {\n            data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\n            data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\n            data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\n            //data[i + 3] = remap(data[i + 3], aMin, aMax, aGoalMin, aGoalMax);\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'enhance', 0, null, Konva.Factory.afterSetFilter);\n\n    /**\n    * get/set enhance. Use with {@link Konva.Filters.Enhance} filter.\n    * @name enhance\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Float} amount\n    * @returns {Float}\n    */\n})();\n\n(function () {\n    'use strict';\n    /**\n     * Posterize Filter. Adjusts the channels so that there are no more\n     *  than n different values for that channel. This is also applied\n     *  to the alpha channel.\n     * @function\n     * @name Posterize\n     * @author ippo615\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Posterize]);\n     * node.levels(0.8); // between 0 and 1\n     */\n\n    Konva.Filters.Posterize = function (imageData) {\n        // level must be between 1 and 255\n        var levels = Math.round(this.levels() * 254) + 1,\n            data = imageData.data,\n            len = data.length,\n            scale = (255 / levels),\n            i;\n\n        for (i = 0; i < len; i += 1) {\n            data[i] = Math.floor(data[i] / scale) * scale;\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'levels', 0.5, null, Konva.Factory.afterSetFilter);\n\n    /**\n    * get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.\n    * @name levels\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Number} level between 0 and 1\n    * @returns {Number}\n    */\n})();\n\n(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Noise Filter. Randomly adds or substracts to the color channels\r\n     * @function\r\n     * @name Noise\r\n     * @memberof Konva.Filters\r\n     * @param {Object} imageData\r\n     * @author ippo615\r\n     * @example\r\n     * node.cache();\r\n     * node.filters([Konva.Filters.Noise]);\r\n     * node.noise(0.8);\r\n     */\r\n    Konva.Filters.Noise = function (imageData) {\r\n        var amount = this.noise() * 255,\r\n            data = imageData.data,\r\n            nPixels = data.length,\r\n            half = amount / 2,\r\n            i;\r\n\r\n        for (i = 0; i < nPixels; i += 4) {\r\n            data[i + 0] += half - 2 * half * Math.random();\r\n            data[i + 1] += half - 2 * half * Math.random();\r\n            data[i + 2] += half - 2 * half * Math.random();\r\n        }\r\n    };\r\n\r\n    Konva.Factory.addGetterSetter(Konva.Node, 'noise', 0.2, null, Konva.Factory.afterSetFilter);\r\n\r\n    /**\r\n    * get/set noise amount.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Noise} filter.\r\n    * @name noise\r\n    * @method\r\n    * @memberof Konva.Node.prototype\r\n    * @param {Number} noise\r\n    * @returns {Number}\r\n    */\r\n})();\r\n\n/*eslint-disable max-depth */\r\n(function () {\r\n    'use strict';\r\n    /**\r\n     * Pixelate Filter. Averages groups of pixels and redraws\r\n     *  them as larger pixels\r\n     * @function\r\n     * @name Pixelate\r\n     * @memberof Konva.Filters\r\n     * @param {Object} imageData\r\n     * @author ippo615\r\n     * @example\r\n     * node.cache();\r\n     * node.filters([Konva.Filters.Pixelate]);\r\n     * node.pixelSize(10);\r\n     */\r\n\r\n    Konva.Filters.Pixelate = function (imageData) {\r\n\r\n        var pixelSize = Math.ceil(this.pixelSize()),\r\n            width = imageData.width,\r\n            height = imageData.height,\r\n            x, y, i,\r\n            //pixelsPerBin = pixelSize * pixelSize,\r\n            red, green, blue, alpha,\r\n            nBinsX = Math.ceil(width / pixelSize),\r\n            nBinsY = Math.ceil(height / pixelSize),\r\n            xBinStart, xBinEnd, yBinStart, yBinEnd,\r\n            xBin, yBin, pixelsInBin;\r\n        imageData = imageData.data;\r\n\r\n        if (pixelSize <= 0) {\r\n            Konva.Util.error('pixelSize value can not be <= 0');\r\n            return;\r\n        }\r\n\r\n        for (xBin = 0; xBin < nBinsX; xBin += 1) {\r\n            for (yBin = 0; yBin < nBinsY; yBin += 1) {\r\n\r\n                // Initialize the color accumlators to 0\r\n                red = 0;\r\n                green = 0;\r\n                blue = 0;\r\n                alpha = 0;\r\n\r\n                // Determine which pixels are included in this bin\r\n                xBinStart = xBin * pixelSize;\r\n                xBinEnd = xBinStart + pixelSize;\r\n                yBinStart = yBin * pixelSize;\r\n                yBinEnd = yBinStart + pixelSize;\r\n\r\n                // Add all of the pixels to this bin!\r\n                pixelsInBin = 0;\r\n                for (x = xBinStart; x < xBinEnd; x += 1) {\r\n                    if( x >= width ){ continue; }\r\n                    for (y = yBinStart; y < yBinEnd; y += 1) {\r\n                        if( y >= height ){ continue; }\r\n                        i = (width * y + x) * 4;\r\n                        red += imageData[i + 0];\r\n                        green += imageData[i + 1];\r\n                        blue += imageData[i + 2];\r\n                        alpha += imageData[i + 3];\r\n                        pixelsInBin += 1;\r\n                    }\r\n                }\r\n\r\n                // Make sure the channels are between 0-255\r\n                red = red / pixelsInBin;\r\n                green = green / pixelsInBin;\r\n                blue = blue / pixelsInBin;\r\n\r\n                // Draw this bin\r\n                for (x = xBinStart; x < xBinEnd; x += 1) {\r\n                    if( x >= width ){ continue; }\r\n                    for (y = yBinStart; y < yBinEnd; y += 1) {\r\n                        if( y >= height ){ continue; }\r\n                        i = (width * y + x) * 4;\r\n                        imageData[i + 0] = red;\r\n                        imageData[i + 1] = green;\r\n                        imageData[i + 2] = blue;\r\n                        imageData[i + 3] = alpha;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    Konva.Factory.addGetterSetter(Konva.Node, 'pixelSize', 8, null, Konva.Factory.afterSetFilter);\r\n\r\n    /**\r\n    * get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.\r\n    * @name pixelSize\r\n    * @method\r\n    * @memberof Konva.Node.prototype\r\n    * @param {Integer} pixelSize\r\n    * @returns {Integer}\r\n    */\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n    /**\r\n     * Threshold Filter. Pushes any value above the mid point to\r\n     *  the max and any value below the mid point to the min.\r\n     *  This affects the alpha channel.\r\n     * @function\r\n     * @name Threshold\r\n     * @memberof Konva.Filters\r\n     * @param {Object} imageData\r\n     * @author ippo615\r\n     * @example\r\n     * node.cache();\r\n     * node.filters([Konva.Filters.Threshold]);\r\n     * node.threshold(0.1);\r\n     */\r\n\r\n    Konva.Filters.Threshold = function (imageData) {\r\n        var level = this.threshold() * 255,\r\n            data = imageData.data,\r\n            len = data.length,\r\n            i;\r\n\r\n        for (i = 0; i < len; i += 1) {\r\n            data[i] = data[i] < level ? 0 : 255;\r\n        }\r\n    };\r\n\r\n    Konva.Factory.addGetterSetter(Konva.Node, 'threshold', 0.5, null, Konva.Factory.afterSetFilter);\r\n\r\n    /**\r\n    * get/set threshold.  Must be a value between 0 and 1. Use with {@link Konva.Filters.Threshold} or {@link Konva.Filters.Mask} filter.\r\n    * @name threshold\r\n    * @method\r\n    * @memberof Konva.Node.prototype\r\n    * @param {Number} threshold\r\n    * @returns {Number}\r\n    */\r\n})();\r\n\n(function() {\n    'use strict';\n    /**\n     * Sepia Filter\n     * Based on: Pixastic Lib - Sepia filter - v0.1.0\n     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\n     * @function\n     * @name Sepia\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @author Jacob Seidelin <jseidelin@nihilogic.dk>\n     * @license MPL v1.1 [http://www.pixastic.com/lib/license.txt]\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Sepia]);\n     */\n    Konva.Filters.Sepia = function (imageData) {\n        var data = imageData.data,\n            w = imageData.width,\n            y = imageData.height,\n            w4 = w * 4,\n            offsetY, x, offset, or, og, ob, r, g, b;\n\n        do {\n            offsetY = (y - 1) * w4;\n            x = w;\n            do {\n                offset = offsetY + (x - 1) * 4;\n\n                or = data[offset];\n                og = data[offset + 1];\n                ob = data[offset + 2];\n\n                r = or * 0.393 + og * 0.769 + ob * 0.189;\n                g = or * 0.349 + og * 0.686 + ob * 0.168;\n                b = or * 0.272 + og * 0.534 + ob * 0.131;\n\n                data[offset] = r > 255 ? 255 : r;\n                data[offset + 1] = g > 255 ? 255 : g;\n                data[offset + 2] = b > 255 ? 255 : b;\n                data[offset + 3] = data[offset + 3];\n            } while (--x);\n        } while (--y);\n    };\n})();\n\n(function () {\n    'use strict';\n    /**\n     * Solarize Filter\n     * Pixastic Lib - Solarize filter - v0.1.0\n     * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\n     * License: [http://www.pixastic.com/lib/license.txt]\n     * @function\n     * @name Solarize\n     * @memberof Konva.Filters\n     * @param {Object} imageData\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Solarize]);\n     */\n    Konva.Filters.Solarize = function (imageData) {\n        var data = imageData.data,\n            w = imageData.width,\n            h = imageData.height,\n            w4 = w * 4,\n            y = h;\n\n        do {\n            var offsetY = (y - 1) * w4;\n            var x = w;\n            do {\n                var offset = offsetY + (x - 1) * 4;\n                var r = data[offset];\n                var g = data[offset + 1];\n                var b = data[offset + 2];\n\n                if (r > 127) {\n                    r = 255 - r;\n                }\n                if (g > 127) {\n                    g = 255 - g;\n                }\n                if (b > 127) {\n                    b = 255 - b;\n                }\n\n                data[offset] = r;\n                data[offset + 1] = g;\n                data[offset + 2] = b;\n            } while (--x);\n        } while (--y);\n    };\n})();\n\n\n\n(function () {\n    'use strict';\n\n  /*\n   * ToPolar Filter. Converts image data to polar coordinates. Performs\n   *  w*h*4 pixel reads and w*h pixel writes. The r axis is placed along\n   *  what would be the y axis and the theta axis along the x axis.\n   * @function\n   * @author ippo615\n   * @memberof Konva.Filters\n   * @param {ImageData} src, the source image data (what will be transformed)\n   * @param {ImageData} dst, the destination image data (where it will be saved)\n   * @param {Object} opt\n   * @param {Number} [opt.polarCenterX] horizontal location for the center of the circle,\n   *  default is in the middle\n   * @param {Number} [opt.polarCenterY] vertical location for the center of the circle,\n   *  default is in the middle\n   */\n\n    var ToPolar = function(src, dst, opt){\n\n        var srcPixels = src.data,\n            dstPixels = dst.data,\n            xSize = src.width,\n            ySize = src.height,\n            xMid = opt.polarCenterX || xSize / 2,\n            yMid = opt.polarCenterY || ySize / 2,\n            i, x, y, r = 0, g = 0, b = 0, a = 0;\n\n        // Find the largest radius\n        var rad, rMax = Math.sqrt( xMid * xMid + yMid * yMid );\n        x = xSize - xMid;\n        y = ySize - yMid;\n        rad = Math.sqrt( x * x + y * y );\n        rMax = (rad > rMax) ? rad : rMax;\n\n        // We'll be uisng y as the radius, and x as the angle (theta=t)\n        var rSize = ySize,\n            tSize = xSize,\n            radius, theta;\n\n        // We want to cover all angles (0-360) and we need to convert to\n        // radians (*PI/180)\n        var conversion = 360 / tSize * Math.PI / 180, sin, cos;\n\n        // var x1, x2, x1i, x2i, y1, y2, y1i, y2i, scale;\n\n        for( theta = 0; theta < tSize; theta += 1 ){\n            sin = Math.sin(theta * conversion);\n            cos = Math.cos(theta * conversion);\n            for( radius = 0; radius < rSize; radius += 1 ){\n                x = Math.floor(xMid + rMax * radius / rSize * cos);\n                y = Math.floor(yMid + rMax * radius / rSize * sin);\n                i = (y * xSize + x) * 4;\n                r = srcPixels[i + 0];\n                g = srcPixels[i + 1];\n                b = srcPixels[i + 2];\n                a = srcPixels[i + 3];\n\n                // Store it\n                //i = (theta * xSize  +  radius) * 4;\n                i = (theta + radius * xSize) * 4;\n                dstPixels[i + 0] = r;\n                dstPixels[i + 1] = g;\n                dstPixels[i + 2] = b;\n                dstPixels[i + 3] = a;\n\n            }\n        }\n    };\n\n    /*\n     * FromPolar Filter. Converts image data from polar coordinates back to rectangular.\n     *  Performs w*h*4 pixel reads and w*h pixel writes.\n     * @function\n     * @author ippo615\n     * @memberof Konva.Filters\n     * @param {ImageData} src, the source image data (what will be transformed)\n     * @param {ImageData} dst, the destination image data (where it will be saved)\n     * @param {Object} opt\n     * @param {Number} [opt.polarCenterX] horizontal location for the center of the circle,\n     *  default is in the middle\n     * @param {Number} [opt.polarCenterY] vertical location for the center of the circle,\n     *  default is in the middle\n     * @param {Number} [opt.polarRotation] amount to rotate the image counterclockwis,\n     *  0 is no rotation, 360 degrees is a full rotation\n     */\n\n    var FromPolar = function(src, dst, opt){\n\n        var srcPixels = src.data,\n            dstPixels = dst.data,\n            xSize = src.width,\n            ySize = src.height,\n            xMid = opt.polarCenterX || xSize / 2,\n            yMid = opt.polarCenterY || ySize / 2,\n            i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;\n\n\n        // Find the largest radius\n        var rad, rMax = Math.sqrt( xMid * xMid + yMid * yMid );\n        x = xSize - xMid;\n        y = ySize - yMid;\n        rad = Math.sqrt( x * x + y * y );\n        rMax = (rad > rMax) ? rad : rMax;\n\n        // We'll be uisng x as the radius, and y as the angle (theta=t)\n        var rSize = ySize,\n        tSize = xSize,\n        radius, theta,\n        phaseShift = opt.polarRotation || 0;\n\n        // We need to convert to degrees and we need to make sure\n        // it's between (0-360)\n        // var conversion = tSize/360*180/Math.PI;\n        //var conversion = tSize/360*180/Math.PI;\n\n        var x1, y1;\n\n        for( x = 0; x < xSize; x += 1 ){\n            for( y = 0; y < ySize; y += 1 ){\n                dx = x - xMid;\n                dy = y - yMid;\n                radius = Math.sqrt(dx * dx + dy * dy) * rSize / rMax;\n                theta = (Math.atan2(dy, dx) * 180 / Math.PI + 360 + phaseShift) % 360;\n                theta = theta * tSize / 360;\n                x1 = Math.floor(theta);\n                y1 = Math.floor(radius);\n                i = (y1 * xSize + x1) * 4;\n                r = srcPixels[i + 0];\n                g = srcPixels[i + 1];\n                b = srcPixels[i + 2];\n                a = srcPixels[i + 3];\n\n                // Store it\n                i = (y * xSize + x) * 4;\n                dstPixels[i + 0] = r;\n                dstPixels[i + 1] = g;\n                dstPixels[i + 2] = b;\n                dstPixels[i + 3] = a;\n            }\n        }\n\n    };\n\n    //Konva.Filters.ToPolar = Konva.Util._FilterWrapDoubleBuffer(ToPolar);\n    //Konva.Filters.FromPolar = Konva.Util._FilterWrapDoubleBuffer(FromPolar);\n\n    // create a temporary canvas for working - shared between multiple calls\n    var tempCanvas = Konva.Util.createCanvasElement();\n\n    /*\n     * Kaleidoscope Filter.\n     * @function\n     * @name Kaleidoscope\n     * @author ippo615\n     * @memberof Konva.Filters\n     * @example\n     * node.cache();\n     * node.filters([Konva.Filters.Kaleidoscope]);\n     * node.kaleidoscopePower(3);\n     * node.kaleidoscopeAngle(45);\n     */\n    Konva.Filters.Kaleidoscope = function(imageData){\n        var xSize = imageData.width,\n            ySize = imageData.height;\n\n        var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n        var power = Math.round( this.kaleidoscopePower() );\n        var angle = Math.round( this.kaleidoscopeAngle() );\n        var offset = Math.floor(xSize * (angle % 360) / 360);\n\n        if( power < 1 ){return; }\n\n        // Work with our shared buffer canvas\n        tempCanvas.width = xSize;\n        tempCanvas.height = ySize;\n        var scratchData = tempCanvas.getContext('2d').getImageData(0, 0, xSize, ySize);\n\n        // Convert thhe original to polar coordinates\n        ToPolar( imageData, scratchData, {\n            polarCenterX: xSize / 2,\n            polarCenterY: ySize / 2\n        });\n\n        // Determine how big each section will be, if it's too small\n        // make it bigger\n        var minSectionSize = xSize / Math.pow(2, power);\n        while( minSectionSize <= 8){\n            minSectionSize = minSectionSize * 2;\n            power -= 1;\n        }\n        minSectionSize = Math.ceil(minSectionSize);\n        var sectionSize = minSectionSize;\n\n        // Copy the offset region to 0\n        // Depending on the size of filter and location of the offset we may need\n        // to copy the section backwards to prevent it from rewriting itself\n        var xStart = 0,\n          xEnd = sectionSize,\n          xDelta = 1;\n        if( offset + minSectionSize > xSize ){\n            xStart = sectionSize;\n            xEnd = 0;\n            xDelta = -1;\n        }\n        for( y = 0; y < ySize; y += 1 ){\n            for( x = xStart; x !== xEnd; x += xDelta ){\n                xoff = Math.round(x + offset) % xSize;\n                srcPos = (xSize * y + xoff) * 4;\n                r = scratchData.data[srcPos + 0];\n                g = scratchData.data[srcPos + 1];\n                b = scratchData.data[srcPos + 2];\n                a = scratchData.data[srcPos + 3];\n                dstPos = (xSize * y + x) * 4;\n                scratchData.data[dstPos + 0] = r;\n                scratchData.data[dstPos + 1] = g;\n                scratchData.data[dstPos + 2] = b;\n                scratchData.data[dstPos + 3] = a;\n            }\n        }\n\n        // Perform the actual effect\n        for( y = 0; y < ySize; y += 1 ){\n            sectionSize = Math.floor( minSectionSize );\n            for( i = 0; i < power; i += 1 ){\n                for( x = 0; x < sectionSize + 1; x += 1 ){\n                    srcPos = (xSize * y + x) * 4;\n                    r = scratchData.data[srcPos + 0];\n                    g = scratchData.data[srcPos + 1];\n                    b = scratchData.data[srcPos + 2];\n                    a = scratchData.data[srcPos + 3];\n                    dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n                    scratchData.data[dstPos + 0] = r;\n                    scratchData.data[dstPos + 1] = g;\n                    scratchData.data[dstPos + 2] = b;\n                    scratchData.data[dstPos + 3] = a;\n                }\n                sectionSize *= 2;\n            }\n        }\n\n        // Convert back from polar coordinates\n        FromPolar(scratchData, imageData, {polarRotation: 0});\n    };\n\n    /**\n    * get/set kaleidoscope power. Use with {@link Konva.Filters.Kaleidoscope} filter.\n    * @name kaleidoscopePower\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} power of kaleidoscope\n    * @returns {Integer}\n    */\n    Konva.Factory.addGetterSetter(Konva.Node, 'kaleidoscopePower', 2, null, Konva.Factory.afterSetFilter);\n\n    /**\n    * get/set kaleidoscope angle. Use with {@link Konva.Filters.Kaleidoscope} filter.\n    * @name kaleidoscopeAngle\n    * @method\n    * @memberof Konva.Node.prototype\n    * @param {Integer} degrees\n    * @returns {Integer}\n    */\n    Konva.Factory.addGetterSetter(Konva.Node, 'kaleidoscopeAngle', 0, null, Konva.Factory.afterSetFilter);\n\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Container constructor.&nbsp; Containers are used to contain nodes or other containers\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Node\n     * @abstract\n     * @param {Object} config\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * * @param {Object} [config.clip] set clip\n     * @param {Number} [config.clipX] set clip x\n     * @param {Number} [config.clipY] set clip y\n     * @param {Number} [config.clipWidth] set clip width\n     * @param {Number} [config.clipHeight] set clip height\n     * @param {Function} [config.clipFunc] set clip func\n\n     */\n    Konva.Container = function(config) {\n        this.__init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Container, {\n        __init: function(config) {\n            this.children = new Konva.Collection();\n            Konva.Node.call(this, config);\n        },\n        /**\n         * returns a {@link Konva.Collection} of direct descendant nodes\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {Function} [filterFunc] filter function\n         * @returns {Konva.Collection}\n         * @example\n         * // get all children\n         * var children = layer.getChildren();\n         *\n         * // get only circles\n         * var circles = layer.getChildren(function(node){\n         *    return node.getClassName() === 'Circle';\n         * });\n         */\n        getChildren: function(filterFunc) {\n            if (!filterFunc) {\n                return this.children;\n            }\n\n            var results = new Konva.Collection();\n            this.children.each(function(child){\n                if (filterFunc(child)) {\n                    results.push(child);\n                }\n            });\n            return results;\n        },\n        /**\n         * determine if node has children\n         * @method\n         * @memberof Konva.Container.prototype\n         * @returns {Boolean}\n         */\n        hasChildren: function() {\n            return this.getChildren().length > 0;\n        },\n        /**\n         * remove all children\n         * @method\n         * @memberof Konva.Container.prototype\n         */\n        removeChildren: function() {\n            var children = Konva.Collection.toCollection(this.children);\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                // reset parent to prevent many _setChildrenIndices calls\n                delete child.parent;\n                child.index = 0;\n                child.remove();\n            }\n            children = null;\n            this.children = new Konva.Collection();\n            return this;\n        },\n        /**\n         * destroy all children\n         * @method\n         * @memberof Konva.Container.prototype\n         */\n        destroyChildren: function() {\n           var children = Konva.Collection.toCollection(this.children);\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                // reset parent to prevent many _setChildrenIndices calls\n                delete child.parent;\n                child.index = 0;\n                child.destroy();\n            }\n            children = null;\n            this.children = new Konva.Collection();\n            return this;\n        },\n        /**\n         * Add node or nodes to container.\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {...Konva.Node} child\n         * @returns {Container}\n         * @example\n         * layer.add(shape1, shape2, shape3);\n         */\n        add: function(child) {\n            if (arguments.length > 1) {\n                for (var i = 0; i < arguments.length; i++) {\n                    this.add(arguments[i]);\n                }\n                return this;\n            }\n            if (child.getParent()) {\n                child.moveTo(this);\n                return this;\n            }\n            var children = this.children;\n            this._validateAdd(child);\n            child.index = children.length;\n            child.parent = this;\n            children.push(child);\n            this._fire('add', {\n                child: child\n            });\n\n            // if node under drag we need to update drag animation\n            if (Konva.DD && child.isDragging()) {\n                Konva.DD.anim.setLayers(child.getLayer());\n            }\n\n            // chainable\n            return this;\n        },\n        destroy: function() {\n            // destroy children\n            if (this.hasChildren()) {\n                this.destroyChildren();\n            }\n            // then destroy self\n            Konva.Node.prototype.destroy.call(this);\n            return this;\n        },\n        /**\n         * return a {@link Konva.Collection} of nodes that match the selector.  Use '#' for id selections\n         * and '.' for name selections.  You can also select by type or class name. Pass multiple selectors\n         * separated by a space.\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {String} selector\n         * @returns {Collection}\n         * @example\n         * // select node with id foo\n         * var node = stage.find('#foo');\n         *\n         * // select nodes with name bar inside layer\n         * var nodes = layer.find('.bar');\n         *\n         * // select all groups inside layer\n         * var nodes = layer.find('Group');\n         *\n         * // select all rectangles inside layer\n         * var nodes = layer.find('Rect');\n         *\n         * // select node with an id of foo or a name of bar inside layer\n         * var nodes = layer.find('#foo, .bar');\n         */\n        find: function(selector) {\n            var retArr = [],\n                selectorArr = selector.replace(/ /g, '').split(','),\n                len = selectorArr.length,\n                n, i, sel, arr, node, children, clen;\n\n            for (n = 0; n < len; n++) {\n                sel = selectorArr[n];\n                if (!Konva.Util.isValidSelector(sel)) {\n                    Konva.Util.warn('Selector \"' + sel + '\" is invalid. Allowed selectors examples are \"#foo\", \".bar\" or \"Group\".');\n                    Konva.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like \"Triangle\".');\n                    Konva.Util.warn('Konva is awesome, right?');\n                }\n                // id selector\n                if(sel.charAt(0) === '#') {\n                    node = this._getNodeById(sel.slice(1));\n                    if(node) {\n                        retArr.push(node);\n                    }\n                }\n                // name selector\n                else if(sel.charAt(0) === '.') {\n                    arr = this._getNodesByName(sel.slice(1));\n                    retArr = retArr.concat(arr);\n                }\n                // unrecognized selector, pass to children\n                else {\n                    children = this.getChildren();\n                    clen = children.length;\n                    for(i = 0; i < clen; i++) {\n                        retArr = retArr.concat(children[i]._get(sel));\n                    }\n                }\n            }\n\n            return Konva.Collection.toCollection(retArr);\n        },\n        /**\n         * return a first node from `find` method\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {String} selector\n         * @returns {Konva.Node}\n         * @example\n         * // select node with id foo\n         * var node = stage.findOne('#foo');\n         *\n         * // select node with name bar inside layer\n         * var nodes = layer.findOne('.bar');\n         */\n        findOne: function(selector) {\n            return this.find(selector)[0];\n        },\n        _getNodeById: function(key) {\n            var node = Konva.ids[key];\n\n            if(node !== undefined && this.isAncestorOf(node)) {\n                return node;\n            }\n            return null;\n        },\n        _getNodesByName: function(key) {\n            var arr = Konva.names[key] || [];\n            return this._getDescendants(arr);\n        },\n        _get: function(selector) {\n            var retArr = Konva.Node.prototype._get.call(this, selector);\n            var children = this.getChildren();\n            var len = children.length;\n            for(var n = 0; n < len; n++) {\n                retArr = retArr.concat(children[n]._get(selector));\n            }\n            return retArr;\n        },\n        // extenders\n        toObject: function() {\n            var obj = Konva.Node.prototype.toObject.call(this);\n\n            obj.children = [];\n\n            var children = this.getChildren();\n            var len = children.length;\n            for(var n = 0; n < len; n++) {\n                var child = children[n];\n                obj.children.push(child.toObject());\n            }\n\n            return obj;\n        },\n        _getDescendants: function(arr) {\n            var retArr = [];\n            var len = arr.length;\n            for(var n = 0; n < len; n++) {\n                var node = arr[n];\n                if(this.isAncestorOf(node)) {\n                    retArr.push(node);\n                }\n            }\n\n            return retArr;\n        },\n        /**\n         * determine if node is an ancestor\n         * of descendant\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {Konva.Node} node\n         */\n        isAncestorOf: function(node) {\n            var parent = node.getParent();\n            while(parent) {\n                if(parent._id === this._id) {\n                    return true;\n                }\n                parent = parent.getParent();\n            }\n\n            return false;\n        },\n        clone: function(obj) {\n            // call super method\n            var node = Konva.Node.prototype.clone.call(this, obj);\n\n            this.getChildren().each(function(no) {\n                node.add(no.clone());\n            });\n            return node;\n        },\n        /**\n         * get all shapes that intersect a point.  Note: because this method must clear a temporary\n         * canvas and redraw every shape inside the container, it should only be used for special sitations\n         * because it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n         * because it performs much better\n         * @method\n         * @memberof Konva.Container.prototype\n         * @param {Object} pos\n         * @param {Number} pos.x\n         * @param {Number} pos.y\n         * @returns {Array} array of shapes\n         */\n        getAllIntersections: function(pos) {\n            var arr = [];\n\n            this.find('Shape').each(function(shape) {\n                if(shape.isVisible() && shape.intersects(pos)) {\n                    arr.push(shape);\n                }\n            });\n\n            return arr;\n        },\n        _setChildrenIndices: function() {\n            this.children.each(function(child, n) {\n                child.index = n;\n            });\n        },\n        drawScene: function(can, top, caching) {\n            var layer = this.getLayer(),\n                canvas = can || (layer && layer.getCanvas()),\n                context = canvas && canvas.getContext(),\n                cachedCanvas = this._cache.canvas,\n                cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;\n\n            if (this.isVisible()) {\n                if (!caching && cachedSceneCanvas) {\n                    context.save();\n                    layer._applyTransform(this, context, top);\n                    this._drawCachedSceneCanvas(context);\n                    context.restore();\n                }\n                else {\n                    this._drawChildren(canvas, 'drawScene', top, false, caching);\n                }\n            }\n            return this;\n        },\n        drawHit: function(can, top, caching) {\n            var layer = this.getLayer(),\n                canvas = can || (layer && layer.hitCanvas),\n                context = canvas && canvas.getContext(),\n                cachedCanvas = this._cache.canvas,\n                cachedHitCanvas = cachedCanvas && cachedCanvas.hit;\n\n            if (this.shouldDrawHit(canvas)) {\n                if (layer) {\n                    layer.clearHitCache();\n                }\n                if (!caching && cachedHitCanvas) {\n                    context.save();\n                    layer._applyTransform(this, context, top);\n                    this._drawCachedHitCanvas(context);\n                    context.restore();\n                }\n                else {\n                    this._drawChildren(canvas, 'drawHit', top);\n                }\n            }\n            return this;\n        },\n        _drawChildren: function(canvas, drawMethod, top, caching, skipBuffer) {\n            var layer = this.getLayer(),\n                context = canvas && canvas.getContext(),\n                clipWidth = this.getClipWidth(),\n                clipHeight = this.getClipHeight(),\n                clipFunc = this.getClipFunc(),\n                hasClip = clipWidth && clipHeight || clipFunc,\n                clipX, clipY;\n\n            if (hasClip && layer) {\n                context.save();\n                layer._applyTransform(this, context);\n                context.beginPath();\n                if (clipFunc) {\n                  clipFunc.call(this, context, this);\n                } else {\n                  clipX = this.getClipX();\n                  clipY = this.getClipY();\n                  context.rect(clipX, clipY, clipWidth, clipHeight);\n                }\n                context.clip();\n                context.reset();\n            }\n\n            this.children.each(function(child) {\n                child[drawMethod](canvas, top, caching, skipBuffer);\n            });\n\n            if (hasClip) {\n                context.restore();\n            }\n        },\n        shouldDrawHit: function(canvas) {\n            var layer = this.getLayer();\n            var dd = Konva.DD;\n            var layerUnderDrag = dd && Konva.isDragging() && (Konva.DD.anim.getLayers().indexOf(layer) !== -1);\n            return (canvas && canvas.isCache) || (layer && layer.hitGraphEnabled())\n                && this.isVisible() && !layerUnderDrag;\n        },\n        getClientRect: function(skipTransform) {\n            var minX, minY, maxX, maxY;\n            var selfRect = {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0\n            };\n            this.children.each(function(child) {\n                var rect = child.getClientRect();\n\n                // skip invisible children (like empty groups)\n                // or don't skip... hmmm...\n                // if (rect.width === 0 && rect.height === 0) {\n                //     return;\n                // }\n\n                if (minX === undefined) { // initial value for first child\n                    minX = rect.x;\n                    minY = rect.y;\n                    maxX = rect.x + rect.width;\n                    maxY = rect.y + rect.height;\n                } else {\n                    minX = Math.min(minX, rect.x);\n                    minY = Math.min(minY, rect.y);\n                    maxX = Math.max(maxX, rect.x + rect.width);\n                    maxY = Math.max(maxY, rect.y + rect.height);\n                }\n\n            });\n\n            if (this.children.length !== 0) {\n                selfRect = {\n                    x: minX,\n                    y: minY,\n                    width: maxX - minX,\n                    height: maxY - minY\n                };\n            }\n\n            if (!skipTransform) {\n                return this._transformedRect(selfRect);\n            }\n            return selfRect;\n        }\n    });\n\n    Konva.Util.extend(Konva.Container, Konva.Node);\n    // deprecated methods\n    Konva.Container.prototype.get = Konva.Container.prototype.find;\n\n    // add getters setters\n    Konva.Factory.addComponentsGetterSetter(Konva.Container, 'clip', ['x', 'y', 'width', 'height']);\n    /**\n     * get/set clip\n     * @method\n     * @name clip\n     * @memberof Konva.Container.prototype\n     * @param {Object} clip\n     * @param {Number} clip.x\n     * @param {Number} clip.y\n     * @param {Number} clip.width\n     * @param {Number} clip.height\n     * @returns {Object}\n     * @example\n     * // get clip\n     * var clip = container.clip();\n     *\n     * // set clip\n     * container.setClip({\n     *   x: 20,\n     *   y: 20,\n     *   width: 20,\n     *   height: 20\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Container, 'clipX');\n    /**\n     * get/set clip x\n     * @name clipX\n     * @method\n     * @memberof Konva.Container.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get clip x\n     * var clipX = container.clipX();\n     *\n     * // set clip x\n     * container.clipX(10);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Container, 'clipY');\n    /**\n     * get/set clip y\n     * @name clipY\n     * @method\n     * @memberof Konva.Container.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get clip y\n     * var clipY = container.clipY();\n     *\n     * // set clip y\n     * container.clipY(10);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Container, 'clipWidth');\n    /**\n     * get/set clip width\n     * @name clipWidth\n     * @method\n     * @memberof Konva.Container.prototype\n     * @param {Number} width\n     * @returns {Number}\n     * @example\n     * // get clip width\n     * var clipWidth = container.clipWidth();\n     *\n     * // set clip width\n     * container.clipWidth(100);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Container, 'clipHeight');\n    /**\n     * get/set clip height\n     * @name clipHeight\n     * @method\n     * @memberof Konva.Container.prototype\n     * @param {Number} height\n     * @returns {Number}\n     * @example\n     * // get clip height\n     * var clipHeight = container.clipHeight();\n     *\n     * // set clip height\n     * container.clipHeight(100);\n     */\n\n     Konva.Factory.addGetterSetter(Konva.Container, 'clipFunc');\n     /**\n      * get/set clip function\n      * @name clipFunc\n      * @method\n      * @memberof Konva.Container.prototype\n      * @param {Function} function\n      * @returns {Function}\n      * @example\n      * // get clip function\n      * var clipFunction = container.clipFunc();\n      *\n      * // set clip height\n      * container.clipFunc(function(ctx) {\n      *   ctx.rect(0, 0, 100, 100);\n      * });\n      */\n\n    Konva.Collection.mapMethods(Konva.Container);\n})();\n\n(function(Konva) {\n    'use strict';\n    var HAS_SHADOW = 'hasShadow';\n    var SHADOW_RGBA = 'shadowRGBA';\n\n    function _fillFunc(context) {\n        context.fill();\n    }\n    function _strokeFunc(context) {\n        context.stroke();\n    }\n    function _fillFuncHit(context) {\n        context.fill();\n    }\n    function _strokeFuncHit(context) {\n        context.stroke();\n    }\n\n    function _clearHasShadowCache() {\n        this._clearCache(HAS_SHADOW);\n    }\n\n    function _clearGetShadowRGBACache() {\n        this._clearCache(SHADOW_RGBA);\n    }\n\n    /**\n     * Shape constructor.  Shapes are primitive objects such as rectangles,\n     *  circles, text, lines, etc.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Node\n     * @param {Object} config\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var customShape = new Konva.Shape({\n         *   x: 5,\n         *   y: 10,\n         *   fill: 'red',\n         *   // a Konva.Canvas renderer is passed into the drawFunc function\n         *   drawFunc: function(context) {\n         *     context.beginPath();\n         *     context.moveTo(200, 50);\n         *     context.lineTo(420, 80);\n         *     context.quadraticCurveTo(300, 100, 260, 170);\n         *     context.closePath();\n         *     context.fillStrokeShape(this);\n         *   }\n         *});\n     */\n    Konva.Shape = function(config) {\n        this.__init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Shape, {\n        __init: function(config) {\n            this.nodeType = 'Shape';\n            this._fillFunc = _fillFunc;\n            this._strokeFunc = _strokeFunc;\n            this._fillFuncHit = _fillFuncHit;\n            this._strokeFuncHit = _strokeFuncHit;\n\n            // set colorKey\n            var shapes = Konva.shapes;\n            var key;\n\n            while(true) {\n                key = Konva.Util.getRandomColor();\n                if(key && !( key in shapes)) {\n                    break;\n                }\n            }\n\n            this.colorKey = key;\n            shapes[key] = this;\n\n            // call super constructor\n            Konva.Node.call(this, config);\n\n            this.on('shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);\n\n            this.on('shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);\n        },\n        hasChildren: function() {\n            return false;\n        },\n        getChildren: function() {\n            return [];\n        },\n        /**\n         * get canvas context tied to the layer\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Konva.Context}\n         */\n        getContext: function() {\n            return this.getLayer().getContext();\n        },\n        /**\n         * get canvas renderer tied to the layer.  Note that this returns a canvas renderer, not a canvas element\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Konva.Canvas}\n         */\n        getCanvas: function() {\n            return this.getLayer().getCanvas();\n        },\n        /**\n         * returns whether or not a shadow will be rendered\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Boolean}\n         */\n        hasShadow: function() {\n            return this._getCache(HAS_SHADOW, this._hasShadow);\n        },\n        _hasShadow: function() {\n            return this.getShadowEnabled() && (this.getShadowOpacity() !== 0 && !!(this.getShadowColor() || this.getShadowBlur() || this.getShadowOffsetX() || this.getShadowOffsetY()));\n        },\n        getShadowRGBA: function() {\n            return this._getCache(SHADOW_RGBA, this._getShadowRGBA);\n        },\n        _getShadowRGBA: function() {\n            if (this.hasShadow()) {\n                var rgba = Konva.Util.colorToRGBA(this.shadowColor());\n                return 'rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + (rgba.a * (this.getShadowOpacity() || 1)) + ')';\n            }\n        },\n        /**\n         * returns whether or not the shape will be filled\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Boolean}\n         */\n        hasFill: function() {\n            return !!(this.getFill() || this.getFillPatternImage() || this.getFillLinearGradientColorStops() || this.getFillRadialGradientColorStops());\n        },\n        /**\n         * returns whether or not the shape will be stroked\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Boolean}\n         */\n        hasStroke: function() {\n            return this.strokeEnabled() && !!(this.stroke());\n        },\n        /**\n         * determines if point is in the shape, regardless if other shapes are on top of it.  Note: because\n         *  this method clears a temporary canvas and then redraws the shape, it performs very poorly if executed many times\n         *  consecutively.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\n         *  because it performs much better\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @param {Object} point\n         * @param {Number} point.x\n         * @param {Number} point.y\n         * @returns {Boolean}\n         */\n        intersects: function(point) {\n            var stage = this.getStage(),\n                bufferHitCanvas = stage.bufferHitCanvas,\n                p;\n\n            bufferHitCanvas.getContext().clear();\n            this.drawScene(bufferHitCanvas);\n            p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;\n            return p[3] > 0;\n        },\n        // extends Node.prototype.destroy\n        destroy: function() {\n            Konva.Node.prototype.destroy.call(this);\n            delete Konva.shapes[this.colorKey];\n            return this;\n        },\n        _useBufferCanvas: function(caching) {\n            return !caching && (this.perfectDrawEnabled() && (this.getAbsoluteOpacity() !== 1) && this.hasFill() && this.hasStroke() && this.getStage()) ||\n                   (this.perfectDrawEnabled() && this.hasShadow() && (this.getAbsoluteOpacity() !== 1) && this.hasFill() && this.hasStroke() && this.getStage());\n        },\n        /**\n         * return self rectangle (x, y, width, height) of shape.\n         * This method are not taken into account transformation and styles.\n         * @method\n         * @memberof Konva.Shape.prototype\n         * @returns {Object} rect with {x, y, width, height} properties\n         * @example\n         *\n         * rect.getSelfRect();  // return {x:0, y:0, width:rect.width(), height:rect.height()}\n         * circle.getSelfRect();  // return {x: - circle.width() / 2, y: - circle.height() / 2, width:circle.width(), height:circle.height()}\n         *\n         */\n        getSelfRect: function() {\n            var size = this.getSize();\n            return {\n                x: this._centroid ? Math.round(-size.width / 2) : 0,\n                y: this._centroid ? Math.round(-size.height / 2) : 0,\n                width: size.width,\n                height: size.height\n            };\n        },\n        getClientRect: function(skipTransform) {\n            var fillRect = this.getSelfRect();\n\n            var strokeWidth = (this.hasStroke() && this.strokeWidth()) || 0;\n            var fillAndStrokeWidth = fillRect.width + strokeWidth;\n            var fillAndStrokeHeight = fillRect.height + strokeWidth;\n\n            var shadowOffsetX = this.hasShadow() ? this.shadowOffsetX() : 0;\n            var shadowOffsetY = this.hasShadow() ? this.shadowOffsetY() : 0;\n\n            var preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);\n            var preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);\n\n            var blurRadius = (this.hasShadow() && this.shadowBlur() || 0);\n\n            var width = preWidth + blurRadius * 2;\n            var height = preHeight + blurRadius * 2;\n\n            // if stroke, for example = 3\n            // we need to set x to 1.5, but after Math.round it will be 2\n            // as we have additional offset we need to increase width and height by 1 pixel\n            var roundingOffset = 0;\n            if (Math.round(strokeWidth / 2) !== strokeWidth / 2) {\n                roundingOffset = 1;\n            }\n            var rect = {\n                width: width + roundingOffset,\n                height: height + roundingOffset,\n                x: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetX, 0) + fillRect.x,\n                y: -Math.round(strokeWidth / 2 + blurRadius) + Math.min(shadowOffsetY, 0) + fillRect.y\n            };\n            if (!skipTransform) {\n                return this._transformedRect(rect);\n            }\n            return rect;\n        },\n        drawScene: function(can, top, caching, skipBuffer) {\n            var layer = this.getLayer(),\n                canvas = can || layer.getCanvas(),\n                context = canvas.getContext(),\n                cachedCanvas = this._cache.canvas,\n                drawFunc = this.sceneFunc(),\n                hasShadow = this.hasShadow(),\n                hasStroke = this.hasStroke(),\n                stage, bufferCanvas, bufferContext;\n\n            if(!this.isVisible()) {\n                return this;\n            }\n            if (cachedCanvas) {\n                context.save();\n                layer._applyTransform(this, context, top);\n                this._drawCachedSceneCanvas(context);\n                context.restore();\n                return this;\n            }\n            if (!drawFunc) {\n                return this;\n            }\n            context.save();\n            // if buffer canvas is needed\n            if (this._useBufferCanvas(caching) && !skipBuffer) {\n                stage = this.getStage();\n                bufferCanvas = stage.bufferCanvas;\n                bufferContext = bufferCanvas.getContext();\n                bufferContext.clear();\n                bufferContext.save();\n                bufferContext._applyLineJoin(this);\n                // layer might be undefined if we are using cache before adding to layer\n                if (!caching) {\n                    if (layer) {\n                        layer._applyTransform(this, bufferContext, top);\n                    } else {\n                        var m = this.getAbsoluteTransform(top).getMatrix();\n                        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n                    }\n                }\n\n                drawFunc.call(this, bufferContext);\n                bufferContext.restore();\n\n                var ratio = bufferCanvas.pixelRatio;\n                if (hasShadow && !canvas.hitCanvas) {\n                        context.save();\n                        context._applyShadow(this);\n                        context._applyOpacity(this);\n                        context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);\n                        context.restore();\n                } else {\n                    context._applyOpacity(this);\n                    context.drawImage(bufferCanvas._canvas, 0, 0, bufferCanvas.width / ratio, bufferCanvas.height / ratio);\n                }\n            }\n            // if buffer canvas is not needed\n            else {\n                context._applyLineJoin(this);\n                // layer might be undefined if we are using cache before adding to layer\n                if (!caching) {\n                    if (layer) {\n                        layer._applyTransform(this, context, top);\n                    } else {\n                        var o = this.getAbsoluteTransform(top).getMatrix();\n                        context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);\n                    }\n                }\n\n                if (hasShadow && hasStroke && !canvas.hitCanvas) {\n                    context.save();\n                    // apply shadow\n                    if (!caching) {\n                        context._applyOpacity(this);\n                    }\n                    context._applyShadow(this);\n                    drawFunc.call(this, context);\n                    context.restore();\n                    // if shape has stroke we need to redraw shape\n                    // otherwise we will see a shadow under stroke (and over fill)\n                    // but I think this is unexpected behavior\n                    if (this.hasFill() && this.getShadowForStrokeEnabled()) {\n                        drawFunc.call(this, context);\n                    }\n                } else if (hasShadow && !canvas.hitCanvas) {\n                    context.save();\n                    if (!caching) {\n                        context._applyOpacity(this);\n                    }\n                    context._applyShadow(this);\n                    drawFunc.call(this, context);\n                    context.restore();\n                } else {\n                    if (!caching) {\n                        context._applyOpacity(this);\n                    }\n                    drawFunc.call(this, context);\n                }\n            }\n            context.restore();\n            return this;\n        },\n        drawHit: function(can, top, caching) {\n            var layer = this.getLayer(),\n                canvas = can || layer.hitCanvas,\n                context = canvas.getContext(),\n                drawFunc = this.hitFunc() || this.sceneFunc(),\n                cachedCanvas = this._cache.canvas,\n                cachedHitCanvas = cachedCanvas && cachedCanvas.hit;\n\n            if(!this.shouldDrawHit(canvas)) {\n                return this;\n            }\n            if (layer) {\n                layer.clearHitCache();\n            }\n            if (cachedHitCanvas) {\n                context.save();\n                layer._applyTransform(this, context, top);\n                this._drawCachedHitCanvas(context);\n                context.restore();\n                return this;\n            }\n            if (!drawFunc) {\n                return this;\n            }\n            context.save();\n            context._applyLineJoin(this);\n            if (!caching) {\n                if (layer) {\n                    layer._applyTransform(this, context, top);\n                } else {\n                    var o = this.getAbsoluteTransform(top).getMatrix();\n                    context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);\n                }\n            }\n            drawFunc.call(this, context);\n            context.restore();\n            return this;\n        },\n        /**\n        * draw hit graph using the cached scene canvas\n        * @method\n        * @memberof Konva.Shape.prototype\n        * @param {Integer} alphaThreshold alpha channel threshold that determines whether or not\n        *  a pixel should be drawn onto the hit graph.  Must be a value between 0 and 255.\n        *  The default is 0\n        * @returns {Konva.Shape}\n        * @example\n        * shape.cache();\n        * shape.drawHitFromCache();\n        */\n        drawHitFromCache: function(alphaThreshold) {\n            var threshold = alphaThreshold || 0,\n                cachedCanvas = this._cache.canvas,\n                sceneCanvas = this._getCachedSceneCanvas(),\n                hitCanvas = cachedCanvas.hit,\n                hitContext = hitCanvas.getContext(),\n                hitWidth = hitCanvas.getWidth(),\n                hitHeight = hitCanvas.getHeight(),\n                hitImageData, hitData, len, rgbColorKey, i, alpha;\n\n            hitContext.clear();\n            hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);\n\n            try {\n                hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);\n                hitData = hitImageData.data;\n                len = hitData.length;\n                rgbColorKey = Konva.Util._hexToRgb(this.colorKey);\n\n                // replace non transparent pixels with color key\n                for(i = 0; i < len; i += 4) {\n                    alpha = hitData[i + 3];\n                    if (alpha > threshold) {\n                        hitData[i] = rgbColorKey.r;\n                        hitData[i + 1] = rgbColorKey.g;\n                        hitData[i + 2] = rgbColorKey.b;\n                        hitData[i + 3] = 255;\n                    }\n                    else {\n                        hitData[i + 3] = 0;\n                    }\n                }\n                hitContext.putImageData(hitImageData, 0, 0);\n            }\n            catch(e) {\n                Konva.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);\n            }\n\n            return this;\n        }\n    });\n    Konva.Util.extend(Konva.Shape, Konva.Node);\n\n    // add getters and setters\n    Konva.Factory.addGetterSetter(Konva.Shape, 'stroke');\n\n    /**\n     * get/set stroke color\n     * @name stroke\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} color\n     * @returns {String}\n     * @example\n     * // get stroke color\n     * var stroke = shape.stroke();\n     *\n     * // set stroke color with color string\n     * shape.stroke('green');\n     *\n     * // set stroke color with hex\n     * shape.stroke('#00ff00');\n     *\n     * // set stroke color with rgb\n     * shape.stroke('rgb(0,255,0)');\n     *\n     * // set stroke color with rgba and make it 50% opaque\n     * shape.stroke('rgba(0,255,0,0.5');\n     */\n\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeRed', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeGreen', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeBlue', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'strokeAlpha', 1, Konva.Validators.alphaComponent);\n\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeWidth', 2);\n\n    /**\n     * get/set stroke width\n     * @name strokeWidth\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} strokeWidth\n     * @returns {Number}\n     * @example\n     * // get stroke width\n     * var strokeWidth = shape.strokeWidth();\n     *\n     * // set stroke width\n     * shape.strokeWidth();\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeHitEnabled', true);\n\n    /**\n     * get/set strokeHitEnabled property. Useful for performance optimization.\n     * You may set `shape.strokeHitEnabled(false)`. In this case stroke will be no draw on hit canvas, so hit area\n     * of shape will be decreased (by lineWidth / 2). Remember that non closed line with `strokeHitEnabled = false`\n     * will be not drawn on hit canvas, that is mean line will no trigger pointer events (like mouseover)\n     * Default value is true\n     * @name strokeHitEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} strokeHitEnabled\n     * @returns {Boolean}\n     * @example\n     * // get strokeHitEnabled\n     * var strokeHitEnabled = shape.strokeHitEnabled();\n     *\n     * // set strokeHitEnabled\n     * shape.strokeHitEnabled();\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'perfectDrawEnabled', true);\n\n    /**\n     * get/set perfectDrawEnabled. If a shape has fill, stroke and opacity you may set `perfectDrawEnabled` to improve performance.\n     * See http://konvajs.github.io/docs/performance/Disable_Perfect_Draw.html for more information.\n     * Default value is true\n     * @name perfectDrawEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} perfectDrawEnabled\n     * @returns {Boolean}\n     * @example\n     * // get perfectDrawEnabled\n     * var perfectDrawEnabled = shape.perfectDrawEnabled();\n     *\n     * // set perfectDrawEnabled\n     * shape.perfectDrawEnabled();\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowForStrokeEnabled', true);\n\n    /**\n     * get/set shadowForStrokeEnabled. Useful for performance optimization.\n     * You may set `shape.shadowForStrokeEnabled(false)`. In this case stroke will be no draw shadow for stroke.\n     * Remember if you set `shadowForStrokeEnabled = false` for non closed line - that line with have no shadow!.\n     * Default value is true\n     * @name shadowForStrokeEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} shadowForStrokeEnabled\n     * @returns {Boolean}\n     * @example\n     * // get shadowForStrokeEnabled\n     * var shadowForStrokeEnabled = shape.shadowForStrokeEnabled();\n     *\n     * // set shadowForStrokeEnabled\n     * shape.shadowForStrokeEnabled();\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'lineJoin');\n\n    /**\n     * get/set line join.  Can be miter, round, or bevel.  The\n     *  default is miter\n     * @name lineJoin\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} lineJoin\n     * @returns {String}\n     * @example\n     * // get line join\n     * var lineJoin = shape.lineJoin();\n     *\n     * // set line join\n     * shape.lineJoin('round');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'lineCap');\n\n    /**\n     * get/set line cap.  Can be butt, round, or square\n     * @name lineCap\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} lineCap\n     * @returns {String}\n     * @example\n     * // get line cap\n     * var lineCap = shape.lineCap();\n     *\n     * // set line cap\n     * shape.lineCap('round');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'sceneFunc');\n\n    /**\n     * get/set scene draw function\n     * @name sceneFunc\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Function} drawFunc drawing function\n     * @returns {Function}\n     * @example\n     * // get scene draw function\n     * var sceneFunc = shape.sceneFunc();\n     *\n     * // set scene draw function\n     * shape.sceneFunc(function(context) {\n     *   context.beginPath();\n     *   context.rect(0, 0, this.width(), this.height());\n     *   context.closePath();\n     *   context.fillStrokeShape(this);\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'hitFunc');\n\n    /**\n     * get/set hit draw function\n     * @name hitFunc\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Function} drawFunc drawing function\n     * @returns {Function}\n     * @example\n     * // get hit draw function\n     * var hitFunc = shape.hitFunc();\n     *\n     * // set hit draw function\n     * shape.hitFunc(function(context) {\n     *   context.beginPath();\n     *   context.rect(0, 0, this.width(), this.height());\n     *   context.closePath();\n     *   context.fillStrokeShape(this);\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'dash');\n\n    /**\n     * get/set dash array for stroke.\n     * @name dash\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Array} dash\n     * @returns {Array}\n     * @example\n     *  // apply dashed stroke that is 10px long and 5 pixels apart\n     *  line.dash([10, 5]);\n     *  // apply dashed stroke that is made up of alternating dashed\n     *  // lines that are 10px long and 20px apart, and dots that have\n     *  // a radius of 5px and are 20px apart\n     *  line.dash([10, 20, 0.001, 20]);\n     */\n\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowColor');\n\n    /**\n     * get/set shadow color\n     * @name shadowColor\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} color\n     * @returns {String}\n     * @example\n     * // get shadow color\n     * var shadow = shape.shadowColor();\n     *\n     * // set shadow color with color string\n     * shape.shadowColor('green');\n     *\n     * // set shadow color with hex\n     * shape.shadowColor('#00ff00');\n     *\n     * // set shadow color with rgb\n     * shape.shadowColor('rgb(0,255,0)');\n     *\n     * // set shadow color with rgba and make it 50% opaque\n     * shape.shadowColor('rgba(0,255,0,0.5');\n     */\n\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowRed', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowGreen', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowBlue', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'shadowAlpha', 1, Konva.Validators.alphaComponent);\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowBlur');\n\n    /**\n     * get/set shadow blur\n     * @name shadowBlur\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} blur\n     * @returns {Number}\n     * @example\n     * // get shadow blur\n     * var shadowBlur = shape.shadowBlur();\n     *\n     * // set shadow blur\n     * shape.shadowBlur(10);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOpacity');\n\n    /**\n     * get/set shadow opacity.  must be a value between 0 and 1\n     * @name shadowOpacity\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} opacity\n     * @returns {Number}\n     * @example\n     * // get shadow opacity\n     * var shadowOpacity = shape.shadowOpacity();\n     *\n     * // set shadow opacity\n     * shape.shadowOpacity(0.5);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'shadowOffset', ['x', 'y']);\n\n    /**\n     * get/set shadow offset\n     * @name shadowOffset\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} offset\n     * @param {Number} offset.x\n     * @param {Number} offset.y\n     * @returns {Object}\n     * @example\n     * // get shadow offset\n     * var shadowOffset = shape.shadowOffset();\n     *\n     * // set shadow offset\n     * shape.shadowOffset({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOffsetX', 0);\n\n     /**\n     * get/set shadow offset x\n     * @name shadowOffsetX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get shadow offset x\n     * var shadowOffsetX = shape.shadowOffsetX();\n     *\n     * // set shadow offset x\n     * shape.shadowOffsetX(5);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowOffsetY', 0);\n\n     /**\n     * get/set shadow offset y\n     * @name shadowOffsetY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get shadow offset y\n     * var shadowOffsetY = shape.shadowOffsetY();\n     *\n     * // set shadow offset y\n     * shape.shadowOffsetY(5);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternImage');\n\n    /**\n     * get/set fill pattern image\n     * @name fillPatternImage\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Image} image object\n     * @returns {Image}\n     * @example\n     * // get fill pattern image\n     * var fillPatternImage = shape.fillPatternImage();\n     *\n     * // set fill pattern image\n     * var imageObj = new Image();\n     * imageObj.onload = function() {\n     *   shape.fillPatternImage(imageObj);\n     * };\n     * imageObj.src = 'path/to/image/jpg';\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fill');\n\n    /**\n     * get/set fill color\n     * @name fill\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} color\n     * @returns {String}\n     * @example\n     * // get fill color\n     * var fill = shape.fill();\n     *\n     * // set fill color with color string\n     * shape.fill('green');\n     *\n     * // set fill color with hex\n     * shape.fill('#00ff00');\n     *\n     * // set fill color with rgb\n     * shape.fill('rgb(0,255,0)');\n     *\n     * // set fill color with rgba and make it 50% opaque\n     * shape.fill('rgba(0,255,0,0.5');\n     *\n     * // shape without fill\n     * shape.fill(null);\n     */\n\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillRed', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillGreen', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillBlue', 0, Konva.Validators.RGBComponent);\n    Konva.Factory.addDeprecatedGetterSetter(Konva.Shape, 'fillAlpha', 1, Konva.Validators.alphaComponent);\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternX', 0);\n\n    /**\n     * get/set fill pattern x\n     * @name fillPatternX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill pattern x\n     * var fillPatternX = shape.fillPatternX();\n     * // set fill pattern x\n     * shape.fillPatternX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternY', 0);\n\n    /**\n     * get/set fill pattern y\n     * @name fillPatternY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill pattern y\n     * var fillPatternY = shape.fillPatternY();\n     * // set fill pattern y\n     * shape.fillPatternY(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientColorStops');\n\n    /**\n     * get/set fill linear gradient color stops\n     * @name fillLinearGradientColorStops\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Array} colorStops\n     * @returns {Array} colorStops\n     * @example\n     * // get fill linear gradient color stops\n     * var colorStops = shape.fillLinearGradientColorStops();\n     *\n     * // create a linear gradient that starts with red, changes to blue\n     * // halfway through, and then changes to green\n     * shape.fillLinearGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartRadius', 0);\n\n    /**\n     * get/set fill radial gradient start radius\n     * @name fillRadialGradientStartRadius\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} radius\n     * @returns {Number}\n     * @example\n     * // get radial gradient start radius\n     * var startRadius = shape.fillRadialGradientStartRadius();\n     *\n     * // set radial gradient start radius\n     * shape.fillRadialGradientStartRadius(0);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndRadius', 0);\n\n    /**\n     * get/set fill radial gradient end radius\n     * @name fillRadialGradientEndRadius\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} radius\n     * @returns {Number}\n     * @example\n     * // get radial gradient end radius\n     * var endRadius = shape.fillRadialGradientEndRadius();\n     *\n     * // set radial gradient end radius\n     * shape.fillRadialGradientEndRadius(100);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientColorStops');\n\n    /**\n     * get/set fill radial gradient color stops\n     * @name fillRadialGradientColorStops\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} colorStops\n     * @returns {Array}\n     * @example\n     * // get fill radial gradient color stops\n     * var colorStops = shape.fillRadialGradientColorStops();\n     *\n     * // create a radial gradient that starts with red, changes to blue\n     * // halfway through, and then changes to green\n     * shape.fillRadialGradientColorStops(0, 'red', 0.5, 'blue', 1, 'green');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternRepeat', 'repeat');\n\n    /**\n     * get/set fill pattern repeat.  Can be 'repeat', 'repeat-x', 'repeat-y', or 'no-repeat'.  The default is 'repeat'\n     * @name fillPatternRepeat\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} repeat\n     * @returns {String}\n     * @example\n     * // get fill pattern repeat\n     * var repeat = shape.fillPatternRepeat();\n     *\n     * // repeat pattern in x direction only\n     * shape.fillPatternRepeat('repeat-x');\n     *\n     * // do not repeat the pattern\n     * shape.fillPatternRepeat('no repeat');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillEnabled', true);\n\n    /**\n     * get/set fill enabled flag\n     * @name fillEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get fill enabled flag\n     * var fillEnabled = shape.fillEnabled();\n     *\n     * // disable fill\n     * shape.fillEnabled(false);\n     *\n     * // enable fill\n     * shape.fillEnabled(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeEnabled', true);\n\n    /**\n     * get/set stroke enabled flag\n     * @name strokeEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get stroke enabled flag\n     * var strokeEnabled = shape.strokeEnabled();\n     *\n     * // disable stroke\n     * shape.strokeEnabled(false);\n     *\n     * // enable stroke\n     * shape.strokeEnabled(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'shadowEnabled', true);\n\n    /**\n     * get/set shadow enabled flag\n     * @name shadowEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get shadow enabled flag\n     * var shadowEnabled = shape.shadowEnabled();\n     *\n     * // disable shadow\n     * shape.shadowEnabled(false);\n     *\n     * // enable shadow\n     * shape.shadowEnabled(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'dashEnabled', true);\n\n    /**\n     * get/set dash enabled flag\n     * @name dashEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get dash enabled flag\n     * var dashEnabled = shape.dashEnabled();\n     *\n     * // disable dash\n     * shape.dashEnabled(false);\n     *\n     * // enable dash\n     * shape.dashEnabled(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'strokeScaleEnabled', true);\n\n    /**\n     * get/set strokeScale enabled flag\n     * @name strokeScaleEnabled\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get stroke scale enabled flag\n     * var strokeScaleEnabled = shape.strokeScaleEnabled();\n     *\n     * // disable stroke scale\n     * shape.strokeScaleEnabled(false);\n     *\n     * // enable stroke scale\n     * shape.strokeScaleEnabled(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPriority', 'color');\n\n    /**\n     * get/set fill priority.  can be color, pattern, linear-gradient, or radial-gradient.  The default is color.\n     *   This is handy if you want to toggle between different fill types.\n     * @name fillPriority\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {String} priority\n     * @returns {String}\n     * @example\n     * // get fill priority\n     * var fillPriority = shape.fillPriority();\n     *\n     * // set fill priority\n     * shape.fillPriority('linear-gradient');\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillPatternOffset', ['x', 'y']);\n\n    /**\n     * get/set fill pattern offset\n     * @name fillPatternOffset\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} offset\n     * @param {Number} offset.x\n     * @param {Number} offset.y\n     * @returns {Object}\n     * @example\n     * // get fill pattern offset\n     * var patternOffset = shape.fillPatternOffset();\n     *\n     * // set fill pattern offset\n     * shape.fillPatternOffset({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternOffsetX', 0);\n    /**\n     * get/set fill pattern offset x\n     * @name fillPatternOffsetX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill pattern offset x\n     * var patternOffsetX = shape.fillPatternOffsetX();\n     *\n     * // set fill pattern offset x\n     * shape.fillPatternOffsetX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternOffsetY', 0);\n    /**\n     * get/set fill pattern offset y\n     * @name fillPatternOffsetY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill pattern offset y\n     * var patternOffsetY = shape.fillPatternOffsetY();\n     *\n     * // set fill pattern offset y\n     * shape.fillPatternOffsetY(10);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillPatternScale', ['x', 'y']);\n\n    /**\n     * get/set fill pattern scale\n     * @name fillPatternScale\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} scale\n     * @param {Number} scale.x\n     * @param {Number} scale.y\n     * @returns {Object}\n     * @example\n     * // get fill pattern scale\n     * var patternScale = shape.fillPatternScale();\n     *\n     * // set fill pattern scale\n     * shape.fillPatternScale({\n     *   x: 2\n     *   y: 2\n     * });\n     */\n\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternScaleX', 1);\n    /**\n     * get/set fill pattern scale x\n     * @name fillPatternScaleX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill pattern scale x\n     * var patternScaleX = shape.fillPatternScaleX();\n     *\n     * // set fill pattern scale x\n     * shape.fillPatternScaleX(2);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternScaleY', 1);\n    /**\n     * get/set fill pattern scale y\n     * @name fillPatternScaleY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill pattern scale y\n     * var patternScaleY = shape.fillPatternScaleY();\n     *\n     * // set fill pattern scale y\n     * shape.fillPatternScaleY(2);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillLinearGradientStartPoint', ['x', 'y']);\n\n    /**\n     * get/set fill linear gradient start point\n     * @name fillLinearGradientStartPoint\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} startPoint\n     * @param {Number} startPoint.x\n     * @param {Number} startPoint.y\n     * @returns {Object}\n     * @example\n     * // get fill linear gradient start point\n     * var startPoint = shape.fillLinearGradientStartPoint();\n     *\n     * // set fill linear gradient start point\n     * shape.fillLinearGradientStartPoint({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientStartPointX', 0);\n    /**\n     * get/set fill linear gradient start point x\n     * @name fillLinearGradientStartPointX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill linear gradient start point x\n     * var startPointX = shape.fillLinearGradientStartPointX();\n     *\n     * // set fill linear gradient start point x\n     * shape.fillLinearGradientStartPointX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientStartPointY', 0);\n    /**\n     * get/set fill linear gradient start point y\n     * @name fillLinearGradientStartPointY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill linear gradient start point y\n     * var startPointY = shape.fillLinearGradientStartPointY();\n     *\n     * // set fill linear gradient start point y\n     * shape.fillLinearGradientStartPointY(20);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillLinearGradientEndPoint', ['x', 'y']);\n\n    /**\n     * get/set fill linear gradient end point\n     * @name fillLinearGradientEndPoint\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} endPoint\n     * @param {Number} endPoint.x\n     * @param {Number} endPoint.y\n     * @returns {Object}\n     * @example\n     * // get fill linear gradient end point\n     * var endPoint = shape.fillLinearGradientEndPoint();\n     *\n     * // set fill linear gradient end point\n     * shape.fillLinearGradientEndPoint({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientEndPointX', 0);\n    /**\n     * get/set fill linear gradient end point x\n     * @name fillLinearGradientEndPointX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill linear gradient end point x\n     * var endPointX = shape.fillLinearGradientEndPointX();\n     *\n     * // set fill linear gradient end point x\n     * shape.fillLinearGradientEndPointX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillLinearGradientEndPointY', 0);\n    /**\n     * get/set fill linear gradient end point y\n     * @name fillLinearGradientEndPointY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill linear gradient end point y\n     * var endPointY = shape.fillLinearGradientEndPointY();\n     *\n     * // set fill linear gradient end point y\n     * shape.fillLinearGradientEndPointY(20);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillRadialGradientStartPoint', ['x', 'y']);\n\n    /**\n     * get/set fill radial gradient start point\n     * @name fillRadialGradientStartPoint\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} startPoint\n     * @param {Number} startPoint.x\n     * @param {Number} startPoint.y\n     * @returns {Object}\n     * @example\n     * // get fill radial gradient start point\n     * var startPoint = shape.fillRadialGradientStartPoint();\n     *\n     * // set fill radial gradient start point\n     * shape.fillRadialGradientStartPoint({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartPointX', 0);\n    /**\n     * get/set fill radial gradient start point x\n     * @name fillRadialGradientStartPointX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill radial gradient start point x\n     * var startPointX = shape.fillRadialGradientStartPointX();\n     *\n     * // set fill radial gradient start point x\n     * shape.fillRadialGradientStartPointX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientStartPointY', 0);\n    /**\n     * get/set fill radial gradient start point y\n     * @name fillRadialGradientStartPointY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill radial gradient start point y\n     * var startPointY = shape.fillRadialGradientStartPointY();\n     *\n     * // set fill radial gradient start point y\n     * shape.fillRadialGradientStartPointY(20);\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Shape, 'fillRadialGradientEndPoint', ['x', 'y']);\n\n    /**\n     * get/set fill radial gradient end point\n     * @name fillRadialGradientEndPoint\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Object} endPoint\n     * @param {Number} endPoint.x\n     * @param {Number} endPoint.y\n     * @returns {Object}\n     * @example\n     * // get fill radial gradient end point\n     * var endPoint = shape.fillRadialGradientEndPoint();\n     *\n     * // set fill radial gradient end point\n     * shape.fillRadialGradientEndPoint({\n     *   x: 20\n     *   y: 10\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndPointX', 0);\n    /**\n     * get/set fill radial gradient end point x\n     * @name fillRadialGradientEndPointX\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get fill radial gradient end point x\n     * var endPointX = shape.fillRadialGradientEndPointX();\n     *\n     * // set fill radial gradient end point x\n     * shape.fillRadialGradientEndPointX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillRadialGradientEndPointY', 0);\n    /**\n     * get/set fill radial gradient end point y\n     * @name fillRadialGradientEndPointY\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get fill radial gradient end point y\n     * var endPointY = shape.fillRadialGradientEndPointY();\n     *\n     * // set fill radial gradient end point y\n     * shape.fillRadialGradientEndPointY(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Shape, 'fillPatternRotation', 0);\n\n    /**\n     * get/set fill pattern rotation in degrees\n     * @name fillPatternRotation\n     * @method\n     * @memberof Konva.Shape.prototype\n     * @param {Number} rotation\n     * @returns {Konva.Shape}\n     * @example\n     * // get fill pattern rotation\n     * var patternRotation = shape.fillPatternRotation();\n     *\n     * // set fill pattern rotation\n     * shape.fillPatternRotation(20);\n     */\n\n\n    Konva.Factory.backCompat(Konva.Shape, {\n        dashArray: 'dash',\n        getDashArray: 'getDash',\n        setDashArray: 'getDash',\n\n        drawFunc: 'sceneFunc',\n        getDrawFunc: 'getSceneFunc',\n        setDrawFunc: 'setSceneFunc',\n\n        drawHitFunc: 'hitFunc',\n        getDrawHitFunc: 'getHitFunc',\n        setDrawHitFunc: 'setHitFunc'\n    });\n\n    Konva.Collection.mapMethods(Konva.Shape);\n})(Konva);\n\n(function() {\n    'use strict';\n    // CONSTANTS\n    var STAGE = 'Stage',\n        STRING = 'string',\n        PX = 'px',\n\n        MOUSEOUT = 'mouseout',\n        MOUSELEAVE = 'mouseleave',\n        MOUSEOVER = 'mouseover',\n        MOUSEENTER = 'mouseenter',\n        MOUSEMOVE = 'mousemove',\n        MOUSEDOWN = 'mousedown',\n        MOUSEUP = 'mouseup',\n        CLICK = 'click',\n        DBL_CLICK = 'dblclick',\n        TOUCHSTART = 'touchstart',\n        TOUCHEND = 'touchend',\n        TAP = 'tap',\n        DBL_TAP = 'dbltap',\n        TOUCHMOVE = 'touchmove',\n        DOMMOUSESCROLL = 'DOMMouseScroll',\n        MOUSEWHEEL = 'mousewheel',\n        WHEEL = 'wheel',\n\n        CONTENT_MOUSEOUT = 'contentMouseout',\n        CONTENT_MOUSEOVER = 'contentMouseover',\n        CONTENT_MOUSEMOVE = 'contentMousemove',\n        CONTENT_MOUSEDOWN = 'contentMousedown',\n        CONTENT_MOUSEUP = 'contentMouseup',\n        CONTENT_CLICK = 'contentClick',\n        CONTENT_DBL_CLICK = 'contentDblclick',\n        CONTENT_TOUCHSTART = 'contentTouchstart',\n        CONTENT_TOUCHEND = 'contentTouchend',\n        CONTENT_DBL_TAP = 'contentDbltap',\n        CONTENT_TAP = 'contentTap',\n        CONTENT_TOUCHMOVE = 'contentTouchmove',\n        CONTENT_WHEEL = 'contentWheel',\n\n        DIV = 'div',\n        RELATIVE = 'relative',\n        KONVA_CONTENT = 'konvajs-content',\n        SPACE = ' ',\n        UNDERSCORE = '_',\n        CONTAINER = 'container',\n        EMPTY_STRING = '',\n        EVENTS = [MOUSEDOWN, MOUSEMOVE, MOUSEUP, MOUSEOUT, TOUCHSTART, TOUCHMOVE, TOUCHEND, MOUSEOVER, DOMMOUSESCROLL, MOUSEWHEEL, WHEEL],\n\n        // cached variables\n        eventsLength = EVENTS.length;\n\n    function addEvent(ctx, eventName) {\n        ctx.content.addEventListener(eventName, function(evt) {\n            ctx[UNDERSCORE + eventName](evt);\n        }, false);\n    }\n\n    /**\n     * Stage constructor.  A stage is used to contain multiple layers\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Container\n     * @param {Object} config\n     * @param {String|Element} config.container Container selector or DOM element\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var stage = new Konva.Stage({\n         *   width: 500,\n         *   height: 800,\n         *   container: 'containerId' // or \"#containerId\" or \".containerClass\"\n         * });\n     */\n    Konva.Stage = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Stage, {\n        ___init: function(config) {\n            this.nodeType = STAGE;\n            // call super constructor\n            Konva.Container.call(this, config);\n            this._id = Konva.idCounter++;\n            this._buildDOM();\n            this._bindContentEvents();\n            this._enableNestedTransforms = false;\n            Konva.stages.push(this);\n        },\n        _validateAdd: function(child) {\n            if (child.getType() !== 'Layer') {\n                Konva.Util.throw('You may only add layers to the stage.');\n            }\n        },\n        /**\n         * set container dom element which contains the stage wrapper div element\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {DomElement} container can pass in a dom element or id string\n         */\n        setContainer: function (container) {\n            if (typeof container === STRING) {\n                if (container.charAt(0) === '.') {\n                    var className = container.slice(1);\n                    container = Konva.document.getElementsByClassName(className)[0];\n                } else {\n                    var id;\n                    if (container.charAt(0) !== '#') {\n                        id = container;\n                    } else {\n                        id = container.slice(1);\n                    }\n                    container = Konva.document.getElementById(id);\n                }\n                if (!container) {\n                    throw 'Can not find container in document with id ' + id;\n                }\n            }\n            this._setAttr(CONTAINER, container);\n            return this;\n        },\n        shouldDrawHit: function() {\n            return true;\n        },\n        draw: function() {\n            Konva.Node.prototype.draw.call(this);\n            return this;\n        },\n        /**\n         * draw layer scene graphs\n         * @name draw\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n\n        /**\n         * draw layer hit graphs\n         * @name drawHit\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n\n        /**\n         * set height\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {Number} height\n         */\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            this._resizeDOM();\n            return this;\n        },\n        /**\n         * set width\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {Number} width\n         */\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            this._resizeDOM();\n            return this;\n        },\n        /**\n         * clear all layers\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n        clear: function() {\n            var layers = this.children,\n                len = layers.length,\n                n;\n\n            for(n = 0; n < len; n++) {\n                layers[n].clear();\n            }\n            return this;\n        },\n        clone: function(obj) {\n            if (!obj) {\n                obj = {};\n            }\n            obj.container = Konva.document.createElement(DIV);\n            return Konva.Container.prototype.clone.call(this, obj);\n        },\n        /**\n         * destroy stage\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n        destroy: function() {\n            var content = this.content;\n            Konva.Container.prototype.destroy.call(this);\n\n            if(content && Konva.Util._isInDocument(content)) {\n                this.getContainer().removeChild(content);\n            }\n            var index = Konva.stages.indexOf(this);\n            if (index > -1) {\n                Konva.stages.splice(index, 1);\n            }\n            return this;\n        },\n        /**\n         * get pointer position which can be a touch position or mouse position\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @returns {Object}\n         */\n        getPointerPosition: function() {\n            return this.pointerPos;\n        },\n        getStage: function() {\n            return this;\n        },\n        /**\n         * get stage content div element which has the\n         *  the class name \"konvajs-content\"\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n        getContent: function() {\n            return this.content;\n        },\n        /**\n         * Creates a composite data URL\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {Object} config\n         * @param {Function} [config.callback] function executed when the composite has completed. Deprecated as method is sync now.\n         * @param {String} [config.mimeType] can be \"image/png\" or \"image/jpeg\".\n         *  \"image/png\" is the default\n         * @param {Number} [config.x] x position of canvas section\n         * @param {Number} [config.y] y position of canvas section\n         * @param {Number} [config.width] width of canvas section\n         * @param {Number} [config.height] height of canvas section\n         * @param {Number} [config.quality] jpeg quality.  If using an \"image/jpeg\" mimeType,\n         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n         *  is very high quality\n         */\n        toDataURL: function(config) {\n            config = config || {};\n\n            var mimeType = config.mimeType || null,\n                quality = config.quality || null,\n                x = config.x || 0,\n                y = config.y || 0,\n                canvas = new Konva.SceneCanvas({\n                    width: config.width || this.getWidth(),\n                    height: config.height || this.getHeight(),\n                    pixelRatio: config.pixelRatio\n                }),\n                _context = canvas.getContext()._context,\n                layers = this.children;\n\n            if(x || y) {\n                _context.translate(-1 * x, -1 * y);\n            }\n\n\n            layers.each(function(layer) {\n                var width = layer.getCanvas().getWidth();\n                var height = layer.getCanvas().getHeight();\n                var ratio = layer.getCanvas().getPixelRatio();\n                _context.drawImage(layer.getCanvas()._canvas, 0, 0, width / ratio, height / ratio);\n            });\n            var src = canvas.toDataURL(mimeType, quality);\n\n            if (config.callback) {\n                config.callback(src);\n            }\n\n            return src;\n        },\n        /**\n         * converts stage into an image.\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {Object} config\n         * @param {Function} config.callback function executed when the composite has completed\n         * @param {String} [config.mimeType] can be \"image/png\" or \"image/jpeg\".\n         *  \"image/png\" is the default\n         * @param {Number} [config.x] x position of canvas section\n         * @param {Number} [config.y] y position of canvas section\n         * @param {Number} [config.width] width of canvas section\n         * @param {Number} [config.height] height of canvas section\n         * @param {Number} [config.quality] jpeg quality.  If using an \"image/jpeg\" mimeType,\n         *  you can specify the quality from 0 to 1, where 0 is very poor quality and 1\n         *  is very high quality\n         */\n        toImage: function(config) {\n            var cb = config.callback;\n\n            config.callback = function(dataUrl) {\n                Konva.Util._getImage(dataUrl, function(img) {\n                    cb(img);\n                });\n            };\n            this.toDataURL(config);\n        },\n        /**\n         * get visible intersection shape. This is the preferred\n         *  method for determining if a point intersects a shape or not\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {Object} pos\n         * @param {Number} pos.x\n         * @param {Number} pos.y\n         * @param {String} [selector]\n         * @returns {Konva.Node}\n         * @example\n         * var shape = stage.getIntersection({x: 50, y: 50});\n         * // or if you interested in shape parent:\n         * var group = stage.getIntersection({x: 50, y: 50}, 'Group');\n         */\n        getIntersection: function(pos, selector) {\n            var layers = this.getChildren(),\n                len = layers.length,\n                end = len - 1,\n                n, shape;\n\n            for(n = end; n >= 0; n--) {\n                shape = layers[n].getIntersection(pos, selector);\n                if (shape) {\n                    return shape;\n                }\n            }\n\n            return null;\n        },\n        _resizeDOM: function() {\n            if(this.content) {\n                var width = this.getWidth(),\n                    height = this.getHeight(),\n                    layers = this.getChildren(),\n                    len = layers.length,\n                    n, layer;\n\n                // set content dimensions\n                this.content.style.width = width + PX;\n                this.content.style.height = height + PX;\n\n                this.bufferCanvas.setSize(width, height);\n                this.bufferHitCanvas.setSize(width, height);\n\n                // set layer dimensions\n                for(n = 0; n < len; n++) {\n                    layer = layers[n];\n                    layer.setSize(width, height);\n                    layer.draw();\n                }\n            }\n        },\n        /**\n         * add layer or layers to stage\n         * @method\n         * @memberof Konva.Stage.prototype\n         * @param {...Konva.Layer} layer\n         * @example\n         * stage.add(layer1, layer2, layer3);\n         */\n        add: function(layer) {\n            if (arguments.length > 1) {\n                for (var i = 0; i < arguments.length; i++) {\n                    this.add(arguments[i]);\n                }\n                return this;\n            }\n            Konva.Container.prototype.add.call(this, layer);\n            layer._setCanvasSize(this.width(), this.height());\n\n            // draw layer and append canvas to container\n            layer.draw();\n            this.content.appendChild(layer.canvas._canvas);\n\n            // chainable\n            return this;\n        },\n        getParent: function() {\n            return null;\n        },\n        getLayer: function() {\n            return null;\n        },\n        /**\n         * returns a {@link Konva.Collection} of layers\n         * @method\n         * @memberof Konva.Stage.prototype\n         */\n        getLayers: function() {\n            return this.getChildren();\n        },\n        _bindContentEvents: function() {\n            for (var n = 0; n < eventsLength; n++) {\n                addEvent(this, EVENTS[n]);\n            }\n        },\n        _mouseover: function(evt) {\n            if (!Konva.UA.mobile) {\n                this._setPointerPosition(evt);\n                this._fire(CONTENT_MOUSEOVER, {evt: evt});\n            }\n        },\n        _mouseout: function(evt) {\n            if (!Konva.UA.mobile) {\n                this._setPointerPosition(evt);\n                var targetShape = this.targetShape;\n\n                if(targetShape && !Konva.isDragging()) {\n                    targetShape._fireAndBubble(MOUSEOUT, {evt: evt});\n                    targetShape._fireAndBubble(MOUSELEAVE, {evt: evt});\n                    this.targetShape = null;\n                }\n                this.pointerPos = undefined;\n\n                this._fire(CONTENT_MOUSEOUT, {evt: evt});\n            }\n        },\n        _mousemove: function(evt) {\n            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event\n            if (Konva.UA.ieMobile) {\n                return this._touchmove(evt);\n            }\n            // workaround fake mousemove event in chrome browser https://code.google.com/p/chromium/issues/detail?id=161464\n            if ((typeof evt.movementX !== 'undefined' || typeof evt.movementY !== 'undefined') && evt.movementY === 0 && evt.movementX === 0) {\n                return null;\n            }\n            if (Konva.UA.mobile) {\n                return null;\n            }\n            this._setPointerPosition(evt);\n            var shape;\n\n            if (!Konva.isDragging()) {\n                shape = this.getIntersection(this.getPointerPosition());\n                if(shape && shape.isListening()) {\n                    if(!Konva.isDragging() && (!this.targetShape || this.targetShape._id !== shape._id)) {\n                        if(this.targetShape) {\n                            this.targetShape._fireAndBubble(MOUSEOUT, {evt: evt}, shape);\n                            this.targetShape._fireAndBubble(MOUSELEAVE, {evt: evt}, shape);\n                        }\n                        shape._fireAndBubble(MOUSEOVER, {evt: evt}, this.targetShape);\n                        shape._fireAndBubble(MOUSEENTER, {evt: evt}, this.targetShape);\n                        this.targetShape = shape;\n                    }\n                    else {\n                        shape._fireAndBubble(MOUSEMOVE, {evt: evt});\n                    }\n                }\n                /*\n                 * if no shape was detected, clear target shape and try\n                 * to run mouseout from previous target shape\n                 */\n                else {\n                    if(this.targetShape && !Konva.isDragging()) {\n                        this.targetShape._fireAndBubble(MOUSEOUT, {evt: evt});\n                        this.targetShape._fireAndBubble(MOUSELEAVE, {evt: evt});\n                        this.targetShape = null;\n                    }\n\n                }\n\n                // content event\n                this._fire(CONTENT_MOUSEMOVE, {evt: evt});\n            }\n\n            // always call preventDefault for desktop events because some browsers\n            // try to drag and drop the canvas element\n            if (evt.preventDefault) {\n                evt.preventDefault();\n            }\n        },\n        _mousedown: function(evt) {\n            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event\n            if (Konva.UA.ieMobile) {\n                return this._touchstart(evt);\n            }\n            if (!Konva.UA.mobile) {\n                this._setPointerPosition(evt);\n                var shape = this.getIntersection(this.getPointerPosition());\n\n                Konva.listenClickTap = true;\n\n                if (shape && shape.isListening()) {\n                    this.clickStartShape = shape;\n                    shape._fireAndBubble(MOUSEDOWN, {evt: evt});\n                }\n\n                // content event\n                this._fire(CONTENT_MOUSEDOWN, {evt: evt});\n            }\n\n            // always call preventDefault for desktop events because some browsers\n            // try to drag and drop the canvas element\n            if (evt.preventDefault) {\n                evt.preventDefault();\n            }\n        },\n        _mouseup: function(evt) {\n\n            // workaround for mobile IE to force touch event when unhandled pointer event elevates into a mouse event\n            if (Konva.UA.ieMobile) {\n                return this._touchend(evt);\n            }\n            if (!Konva.UA.mobile) {\n                this._setPointerPosition(evt);\n                var shape = this.getIntersection(this.getPointerPosition()),\n                    clickStartShape = this.clickStartShape,\n                    fireDblClick = false,\n                    dd = Konva.DD;\n\n                if(Konva.inDblClickWindow) {\n                    fireDblClick = true;\n                    Konva.inDblClickWindow = false;\n                }\n                // don't set inDblClickWindow after dragging\n                else if (!dd || !dd.justDragged) {\n                    Konva.inDblClickWindow = true;\n                } else if (dd) {\n                    dd.justDragged = false;\n                }\n\n                setTimeout(function() {\n                    Konva.inDblClickWindow = false;\n                }, Konva.dblClickWindow);\n\n                if (shape && shape.isListening()) {\n                    shape._fireAndBubble(MOUSEUP, {evt: evt});\n\n                    // detect if click or double click occurred\n                    if(Konva.listenClickTap && clickStartShape && clickStartShape._id === shape._id) {\n                        shape._fireAndBubble(CLICK, {evt: evt});\n\n                        if(fireDblClick) {\n                            shape._fireAndBubble(DBL_CLICK, {evt: evt});\n                        }\n                    }\n                }\n                // content events\n                this._fire(CONTENT_MOUSEUP, {evt: evt});\n                if (Konva.listenClickTap) {\n                    this._fire(CONTENT_CLICK, {evt: evt});\n                    if(fireDblClick) {\n                        this._fire(CONTENT_DBL_CLICK, {evt: evt});\n                    }\n                }\n\n                Konva.listenClickTap = false;\n            }\n\n            // always call preventDefault for desktop events because some browsers\n            // try to drag and drop the canvas element\n            if (evt.preventDefault) {\n                evt.preventDefault();\n            }\n        },\n        _touchstart: function(evt) {\n            this._setPointerPosition(evt);\n            var shape = this.getIntersection(this.getPointerPosition());\n\n            Konva.listenClickTap = true;\n\n            if (shape && shape.isListening()) {\n                this.tapStartShape = shape;\n                shape._fireAndBubble(TOUCHSTART, {evt: evt});\n\n                // only call preventDefault if the shape is listening for events\n                if (shape.isListening() && shape.preventDefault() && evt.preventDefault) {\n                    evt.preventDefault();\n                }\n            }\n            // content event\n            this._fire(CONTENT_TOUCHSTART, {evt: evt});\n        },\n        _touchend: function(evt) {\n            this._setPointerPosition(evt);\n            var shape = this.getIntersection(this.getPointerPosition()),\n                fireDblClick = false;\n\n            if(Konva.inDblClickWindow) {\n                fireDblClick = true;\n                Konva.inDblClickWindow = false;\n            }\n            else {\n                Konva.inDblClickWindow = true;\n            }\n\n            setTimeout(function() {\n                Konva.inDblClickWindow = false;\n            }, Konva.dblClickWindow);\n\n            if (shape && shape.isListening()) {\n                shape._fireAndBubble(TOUCHEND, {evt: evt});\n\n                // detect if tap or double tap occurred\n                if(Konva.listenClickTap && this.tapStartShape && shape._id === this.tapStartShape._id) {\n                    shape._fireAndBubble(TAP, {evt: evt});\n\n                    if(fireDblClick) {\n                        shape._fireAndBubble(DBL_TAP, {evt: evt});\n                    }\n                }\n                // only call preventDefault if the shape is listening for events\n                if (shape.isListening() && shape.preventDefault() && evt.preventDefault) {\n                    evt.preventDefault();\n                }\n            }\n            // content events\n            this._fire(CONTENT_TOUCHEND, {evt: evt});\n            if (Konva.listenClickTap) {\n                this._fire(CONTENT_TAP, {evt: evt});\n                if(fireDblClick) {\n                    this._fire(CONTENT_DBL_TAP, {evt: evt});\n                }\n            }\n\n            Konva.listenClickTap = false;\n        },\n        _touchmove: function(evt) {\n            this._setPointerPosition(evt);\n            var dd = Konva.DD,\n                shape;\n            if (!Konva.isDragging()) {\n                shape = this.getIntersection(this.getPointerPosition());\n                if (shape && shape.isListening()) {\n                    shape._fireAndBubble(TOUCHMOVE, {evt: evt});\n                    // only call preventDefault if the shape is listening for events\n                    if (shape.isListening() && shape.preventDefault() && evt.preventDefault) {\n                        evt.preventDefault();\n                    }\n                }\n                this._fire(CONTENT_TOUCHMOVE, {evt: evt});\n            }\n            if(dd) {\n                if (Konva.isDragging() && Konva.DD.node.preventDefault()) {\n                    evt.preventDefault();\n                }\n            }\n        },\n        _DOMMouseScroll: function(evt) {\n            this._mousewheel(evt);\n        },\n        _mousewheel: function(evt) {\n            this._setPointerPosition(evt);\n            var shape = this.getIntersection(this.getPointerPosition());\n\n            if (shape && shape.isListening()) {\n                shape._fireAndBubble(WHEEL, {evt: evt});\n            }\n            this._fire(CONTENT_WHEEL, {evt: evt});\n        },\n        _wheel: function(evt) {\n            this._mousewheel(evt);\n        },\n        _setPointerPosition: function(evt) {\n            var contentPosition = this._getContentPosition(),\n                x = null,\n                y = null;\n            evt = evt ? evt : window.event;\n\n            // touch events\n            if(evt.touches !== undefined) {\n                // currently, only handle one finger\n                if (evt.touches.length > 0) {\n\n                    var touch = evt.touches[0];\n                    // get the information for finger #1\n                    x = touch.clientX - contentPosition.left;\n                    y = touch.clientY - contentPosition.top;\n                }\n            }\n            // mouse events\n            else {\n                x = evt.clientX - contentPosition.left;\n                y = evt.clientY - contentPosition.top;\n            }\n            if (x !== null && y !== null) {\n                this.pointerPos = {\n                    x: x,\n                    y: y\n                };\n            }\n        },\n        _getContentPosition: function() {\n            var rect = this.content.getBoundingClientRect ? this.content.getBoundingClientRect() : { top: 0, left: 0 };\n            return {\n                top: rect.top,\n                left: rect.left\n            };\n        },\n        _buildDOM: function() {\n            var container = this.getContainer();\n            if (!container) {\n                if (Konva.Util.isBrowser()) {\n                    throw 'Stage has no container. A container is required.';\n                } else {\n                    // automatically create element for jsdom in nodejs env\n                    container = Konva.document.createElement(DIV);\n                }\n            }\n            // clear content inside container\n            container.innerHTML = EMPTY_STRING;\n\n            // content\n            this.content = Konva.document.createElement(DIV);\n            this.content.style.position = RELATIVE;\n            this.content.className = KONVA_CONTENT;\n            this.content.setAttribute('role', 'presentation');\n            container.appendChild(this.content);\n\n            // the buffer canvas pixel ratio must be 1 because it is used as an\n            // intermediate canvas before copying the result onto a scene canvas.\n            // not setting it to 1 will result in an over compensation\n            this.bufferCanvas = new Konva.SceneCanvas();\n            this.bufferHitCanvas = new Konva.HitCanvas({pixelRatio: 1});\n\n            this._resizeDOM();\n        },\n        _onContent: function(typesStr, handler) {\n            var types = typesStr.split(SPACE),\n                len = types.length,\n                n, baseEvent;\n\n            for(n = 0; n < len; n++) {\n                baseEvent = types[n];\n                this.content.addEventListener(baseEvent, handler, false);\n            }\n        },\n        // currently cache function is now working for stage, because stage has no its own canvas element\n        // TODO: may be it is better to cache all children layers?\n        cache: function() {\n            Konva.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');\n        },\n        clearCache: function() {\n        }\n    });\n    Konva.Util.extend(Konva.Stage, Konva.Container);\n\n    // add getters and setters\n    Konva.Factory.addGetter(Konva.Stage, 'container');\n    Konva.Factory.addOverloadedGetterSetter(Konva.Stage, 'container');\n\n    /**\n     * get container DOM element\n     * @name container\n     * @method\n     * @memberof Konva.Stage.prototype\n     * @returns {DomElement} container\n     * @example\n     * // get container\n     * var container = stage.container();\n     * // set container\n     * var container = document.createElement('div');\n     * body.appendChild(container);\n     * stage.container(container);\n     */\n\n})();\n\n(function() {\n    'use strict';\n    /**\n     * BaseLayer constructor.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Container\n     * @param {Object} config\n     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want\n     * to clear the canvas before each layer draw.  The default value is true.\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * * @param {Object} [config.clip] set clip\n     * @param {Number} [config.clipX] set clip x\n     * @param {Number} [config.clipY] set clip y\n     * @param {Number} [config.clipWidth] set clip width\n     * @param {Number} [config.clipHeight] set clip height\n     * @param {Function} [config.clipFunc] set clip func\n\n     * @example\n     * var layer = new Konva.Layer();\n     */\n    Konva.BaseLayer = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Util.addMethods(Konva.BaseLayer, {\n        ___init: function(config) {\n            this.nodeType = 'Layer';\n            Konva.Container.call(this, config);\n        },\n        createPNGStream: function() {\n            return this.canvas._canvas.createPNGStream();\n        },\n        /**\n         * get layer canvas\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         */\n        getCanvas: function() {\n            return this.canvas;\n        },\n        /**\n         * get layer hit canvas\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         */\n        getHitCanvas: function() {\n            return this.hitCanvas;\n        },\n        /**\n         * get layer canvas context\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         */\n        getContext: function() {\n            return this.getCanvas().getContext();\n        },\n        /**\n         * clear scene and hit canvas contexts tied to the layer\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         * @param {Object} [bounds]\n         * @param {Number} [bounds.x]\n         * @param {Number} [bounds.y]\n         * @param {Number} [bounds.width]\n         * @param {Number} [bounds.height]\n         * @example\n         * layer.clear();\n         * layer.clear({\n         *   x : 0,\n         *   y : 0,\n         *   width : 100,\n         *   height : 100\n         * });\n         */\n        clear: function(bounds) {\n            this.getContext().clear(bounds);\n            return this;\n        },\n        clearHitCache: function() {\n            this._hitImageData = undefined;\n        },\n        // extend Node.prototype.setZIndex\n        setZIndex: function(index) {\n            Konva.Node.prototype.setZIndex.call(this, index);\n            var stage = this.getStage();\n            if(stage) {\n                stage.content.removeChild(this.getCanvas()._canvas);\n\n                if(index < stage.getChildren().length - 1) {\n                    stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[index + 1].getCanvas()._canvas);\n                }\n                else {\n                    stage.content.appendChild(this.getCanvas()._canvas);\n                }\n            }\n            return this;\n        },\n        // extend Node.prototype.moveToTop\n        moveToTop: function() {\n            Konva.Node.prototype.moveToTop.call(this);\n            var stage = this.getStage();\n            if(stage) {\n                stage.content.removeChild(this.getCanvas()._canvas);\n                stage.content.appendChild(this.getCanvas()._canvas);\n            }\n            return this;\n        },\n        // extend Node.prototype.moveUp\n        moveUp: function() {\n            var moved = Konva.Node.prototype.moveUp.call(this);\n            if (!moved){\n                return this;\n            }\n            var stage = this.getStage();\n            if(!stage) {\n                return this;\n            }\n            stage.content.removeChild(this.getCanvas()._canvas);\n\n            if(this.index < stage.getChildren().length - 1) {\n                stage.content.insertBefore(this.getCanvas()._canvas, stage.getChildren()[this.index + 1].getCanvas()._canvas);\n            } else {\n                stage.content.appendChild(this.getCanvas()._canvas);\n            }\n            return this;\n        },\n        // extend Node.prototype.moveDown\n        moveDown: function() {\n            if(Konva.Node.prototype.moveDown.call(this)) {\n                var stage = this.getStage();\n                if(stage) {\n                    var children = stage.getChildren();\n                    stage.content.removeChild(this.getCanvas()._canvas);\n                    stage.content.insertBefore(this.getCanvas()._canvas, children[this.index + 1].getCanvas()._canvas);\n                }\n            }\n            return this;\n        },\n        // extend Node.prototype.moveToBottom\n        moveToBottom: function() {\n            if(Konva.Node.prototype.moveToBottom.call(this)) {\n                var stage = this.getStage();\n                if(stage) {\n                    var children = stage.getChildren();\n                    stage.content.removeChild(this.getCanvas()._canvas);\n                    stage.content.insertBefore(this.getCanvas()._canvas, children[1].getCanvas()._canvas);\n                }\n            }\n            return this;\n        },\n        getLayer: function() {\n            return this;\n        },\n        remove: function() {\n            var _canvas = this.getCanvas()._canvas;\n\n            Konva.Node.prototype.remove.call(this);\n\n            if(_canvas && _canvas.parentNode && Konva.Util._isInDocument(_canvas)) {\n                _canvas.parentNode.removeChild(_canvas);\n            }\n            return this;\n        },\n        getStage: function() {\n            return this.parent;\n        },\n        setSize: function(width, height) {\n            this.canvas.setSize(width, height);\n            return this;\n        },\n        /**\n         * get/set width of layer.getter return width of stage. setter doing nothing.\n         * if you want change width use `stage.width(value);`\n         * @name width\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         * @returns {Number}\n         * @example\n         * var width = layer.width();\n         */\n        getWidth: function() {\n            if (this.parent) {\n                return this.parent.getWidth();\n            }\n        },\n        setWidth: function() {\n            Konva.Util.warn('Can not change width of layer. Use \"stage.width(value)\" function instead.');\n        },\n        /**\n         * get/set height of layer.getter return height of stage. setter doing nothing.\n         * if you want change height use `stage.height(value);`\n         * @name height\n         * @method\n         * @memberof Konva.BaseLayer.prototype\n         * @returns {Number}\n         * @example\n         * var height = layer.height();\n         */\n        getHeight: function() {\n            if (this.parent) {\n                return this.parent.getHeight();\n            }\n        },\n        setHeight: function() {\n            Konva.Util.warn('Can not change height of layer. Use \"stage.height(value)\" function instead.');\n        },\n        // the apply transform method is handled by the Layer and FastLayer class\n        // because it is up to the layer to decide if an absolute or relative transform\n        // should be used\n        _applyTransform: function(shape, context, top) {\n            var m = shape.getAbsoluteTransform(top).getMatrix();\n            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n    });\n    Konva.Util.extend(Konva.BaseLayer, Konva.Container);\n\n    // add getters and setters\n    Konva.Factory.addGetterSetter(Konva.BaseLayer, 'clearBeforeDraw', true);\n    /**\n     * get/set clearBeforeDraw flag which determines if the layer is cleared or not\n     *  before drawing\n     * @name clearBeforeDraw\n     * @method\n     * @memberof Konva.BaseLayer.prototype\n     * @param {Boolean} clearBeforeDraw\n     * @returns {Boolean}\n     * @example\n     * // get clearBeforeDraw flag\n     * var clearBeforeDraw = layer.clearBeforeDraw();\n     *\n     * // disable clear before draw\n     * layer.clearBeforeDraw(false);\n     *\n     * // enable clear before draw\n     * layer.clearBeforeDraw(true);\n     */\n\n    Konva.Collection.mapMethods(Konva.BaseLayer);\n})();\n\n(function() {\n    'use strict';\n    // constants\n    var HASH = '#',\n        BEFORE_DRAW = 'beforeDraw',\n        DRAW = 'draw',\n\n        /*\n         * 2 - 3 - 4\n         * |       |\n         * 1 - 0   5\n         *         |\n         * 8 - 7 - 6\n         */\n        INTERSECTION_OFFSETS = [\n            {x: 0, y: 0},  // 0\n            {x: -1, y: 0}, // 1\n            {x: -1, y: -1}, // 2\n            {x: 0, y: -1}, // 3\n            {x: 1, y: -1}, // 4\n            {x: 1, y: 0}, // 5\n            {x: 1, y: 1}, // 6\n            {x: 0, y: 1}, // 7\n            {x: -1, y: 1}  // 8\n        ],\n        INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;\n\n    /**\n     * Layer constructor.  Layers are tied to their own canvas element and are used\n     * to contain groups or shapes.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.BaseLayer\n     * @param {Object} config\n     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want\n     * to clear the canvas before each layer draw.  The default value is true.\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * * @param {Object} [config.clip] set clip\n     * @param {Number} [config.clipX] set clip x\n     * @param {Number} [config.clipY] set clip y\n     * @param {Number} [config.clipWidth] set clip width\n     * @param {Number} [config.clipHeight] set clip height\n     * @param {Function} [config.clipFunc] set clip func\n\n     * @example\n     * var layer = new Konva.Layer();\n     */\n    Konva.Layer = function(config) {\n        this.____init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Layer, {\n        ____init: function(config) {\n            this.nodeType = 'Layer';\n            this.canvas = new Konva.SceneCanvas();\n            this.hitCanvas = new Konva.HitCanvas({\n                pixelRatio: 1\n            });\n            // call super constructor\n            Konva.BaseLayer.call(this, config);\n        },\n        _setCanvasSize: function(width, height) {\n            this.canvas.setSize(width, height);\n            this.hitCanvas.setSize(width, height);\n        },\n        _validateAdd: function(child) {\n            var type = child.getType();\n            if (type !== 'Group' && type !== 'Shape') {\n                Konva.Util.throw('You may only add groups and shapes to a layer.');\n            }\n        },\n        /**\n         * get visible intersection shape. This is the preferred\n         * method for determining if a point intersects a shape or not\n         * also you may pass optional selector parametr to return ancestor of intersected shape\n         * @method\n         * @memberof Konva.Layer.prototype\n         * @param {Object} pos\n         * @param {Number} pos.x\n         * @param {Number} pos.y\n         * @param {String} [selector]\n         * @returns {Konva.Node}\n         * @example\n         * var shape = layer.getIntersection({x: 50, y: 50});\n         * // or if you interested in shape parent:\n         * var group = layer.getIntersection({x: 50, y: 50}, 'Group');\n         */\n        getIntersection: function(pos, selector) {\n            var obj, i, intersectionOffset, shape;\n\n            if(!this.hitGraphEnabled() || !this.isVisible()) {\n                return null;\n            }\n            // in some cases antialiased area may be bigger than 1px\n            // it is possible if we will cache node, then scale it a lot\n            // TODO: check { 0; 0 } point before loop, and remove it from INTERSECTION_OFFSETS.\n            var spiralSearchDistance = 1;\n            var continueSearch = false;\n            while (true) {\n                for (i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {\n                    intersectionOffset = INTERSECTION_OFFSETS[i];\n                    obj = this._getIntersection({\n                        x: pos.x + intersectionOffset.x * spiralSearchDistance,\n                        y: pos.y + intersectionOffset.y * spiralSearchDistance\n                    });\n                    shape = obj.shape;\n                    if (shape && selector) {\n                        return shape.findAncestor(selector, true);\n                    } else if (shape) {\n                        return shape;\n                    }\n                    // we should continue search if we found antialiased pixel\n                    // that means our node somewhere very close\n                    continueSearch = !!obj.antialiased;\n                    // stop search if found empty pixel\n                    if (!obj.antialiased) {\n                        break;\n                    }\n                }\n                // if no shape, and no antialiased pixel, we should end searching\n                if (continueSearch) {\n                    spiralSearchDistance += 1;\n                } else {\n                    return null;\n                }\n            }\n        },\n        _getImageData: function(x, y) {\n            var width = this.hitCanvas.width || 1,\n                height = this.hitCanvas.height || 1,\n                index = (Math.round(y) * width ) + Math.round(x);\n\n            if (!this._hitImageData) {\n                this._hitImageData = this.hitCanvas.context.getImageData(0, 0, width, height);\n            }\n\n            return [\n                this._hitImageData.data[4 * index + 0], // Red\n                this._hitImageData.data[4 * index + 1], // Green\n                this._hitImageData.data[4 * index + 2], // Blue\n                this._hitImageData.data[4 * index + 3] // Alpha\n            ];\n        },\n        _getIntersection: function(pos) {\n            var ratio = this.hitCanvas.pixelRatio;\n            var p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data,\n                p3 = p[3],\n                colorKey, shape;\n            // fully opaque pixel\n            if(p3 === 255) {\n                colorKey = Konva.Util._rgbToHex(p[0], p[1], p[2]);\n                shape = Konva.shapes[HASH + colorKey];\n                if (shape) {\n                    return {\n                        shape: shape\n                    };\n                }\n                return {\n                    antialiased: true\n                };\n            }\n            // antialiased pixel\n            else if(p3 > 0) {\n                return {\n                    antialiased: true\n                };\n            }\n            // empty pixel\n            return {};\n        },\n        drawScene: function(can, top) {\n            var layer = this.getLayer(),\n                canvas = can || (layer && layer.getCanvas());\n\n            this._fire(BEFORE_DRAW, {\n                node: this\n            });\n\n            if(this.getClearBeforeDraw()) {\n                canvas.getContext().clear();\n            }\n\n            Konva.Container.prototype.drawScene.call(this, canvas, top);\n\n            this._fire(DRAW, {\n                node: this\n            });\n\n            return this;\n        },\n        drawHit: function(can, top) {\n            var layer = this.getLayer(),\n                canvas = can || (layer && layer.hitCanvas);\n\n            if(layer && layer.getClearBeforeDraw()) {\n                layer.getHitCanvas().getContext().clear();\n            }\n\n            Konva.Container.prototype.drawHit.call(this, canvas, top);\n            this.imageData = null; // Clear imageData cache\n            return this;\n        },\n        clear: function(bounds) {\n            Konva.BaseLayer.prototype.clear.call(this, bounds);\n            this.getHitCanvas().getContext().clear(bounds);\n            this.imageData = null; // Clear getImageData cache\n            return this;\n        },\n        // extend Node.prototype.setVisible\n        setVisible: function(visible) {\n            Konva.Node.prototype.setVisible.call(this, visible);\n            if(visible) {\n                this.getCanvas()._canvas.style.display = 'block';\n                this.hitCanvas._canvas.style.display = 'block';\n            }\n            else {\n                this.getCanvas()._canvas.style.display = 'none';\n                this.hitCanvas._canvas.style.display = 'none';\n            }\n            return this;\n        },\n        /**\n         * enable hit graph\n         * @name enableHitGraph\n         * @method\n         * @memberof Konva.Layer.prototype\n         * @returns {Layer}\n         */\n        enableHitGraph: function() {\n            this.setHitGraphEnabled(true);\n            return this;\n        },\n        /**\n         * disable hit graph\n         * @name disableHitGraph\n         * @method\n         * @memberof Konva.Layer.prototype\n         * @returns {Layer}\n         */\n        disableHitGraph: function() {\n            this.setHitGraphEnabled(false);\n            return this;\n        },\n        setSize: function(width, height) {\n            Konva.BaseLayer.prototype.setSize.call(this, width, height);\n            this.hitCanvas.setSize(width, height);\n            return this;\n        }\n    });\n    Konva.Util.extend(Konva.Layer, Konva.BaseLayer);\n\n    Konva.Factory.addGetterSetter(Konva.Layer, 'hitGraphEnabled', true);\n    /**\n     * get/set hitGraphEnabled flag.  Disabling the hit graph will greatly increase\n     *  draw performance because the hit graph will not be redrawn each time the layer is\n     *  drawn.  This, however, also disables mouse/touch event detection\n     * @name hitGraphEnabled\n     * @method\n     * @memberof Konva.Layer.prototype\n     * @param {Boolean} enabled\n     * @returns {Boolean}\n     * @example\n     * // get hitGraphEnabled flag\n     * var hitGraphEnabled = layer.hitGraphEnabled();\n     *\n     * // disable hit graph\n     * layer.hitGraphEnabled(false);\n     *\n     * // enable hit graph\n     * layer.hitGraphEnabled(true);\n     */\n    Konva.Collection.mapMethods(Konva.Layer);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * FastLayer constructor. Layers are tied to their own canvas element and are used\n     * to contain shapes only.  If you don't need node nesting, mouse and touch interactions,\n     * or event pub/sub, you should use FastLayer instead of Layer to create your layers.\n     * It renders about 2x faster than normal layers.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.BaseLayer\n     * @param {Object} config\n     * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want\n     * to clear the canvas before each layer draw.  The default value is true.\n     * @param {Boolean} [config.visible]\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * * @param {Object} [config.clip] set clip\n     * @param {Number} [config.clipX] set clip x\n     * @param {Number} [config.clipY] set clip y\n     * @param {Number} [config.clipWidth] set clip width\n     * @param {Number} [config.clipHeight] set clip height\n     * @param {Function} [config.clipFunc] set clip func\n\n     * @example\n     * var layer = new Konva.FastLayer();\n     */\n    Konva.FastLayer = function(config) {\n        this.____init(config);\n    };\n\n    Konva.Util.addMethods(Konva.FastLayer, {\n        ____init: function(config) {\n            this.nodeType = 'Layer';\n            this.canvas = new Konva.SceneCanvas();\n            // call super constructor\n            Konva.BaseLayer.call(this, config);\n        },\n        _validateAdd: function(child) {\n            var type = child.getType();\n            if (type !== 'Shape') {\n                Konva.Util.throw('You may only add shapes to a fast layer.');\n            }\n        },\n        _setCanvasSize: function(width, height) {\n            this.canvas.setSize(width, height);\n        },\n        hitGraphEnabled: function() {\n            return false;\n        },\n        getIntersection: function() {\n            return null;\n        },\n        drawScene: function(can) {\n            var layer = this.getLayer(),\n                canvas = can || (layer && layer.getCanvas());\n\n            if(this.getClearBeforeDraw()) {\n                canvas.getContext().clear();\n            }\n\n            Konva.Container.prototype.drawScene.call(this, canvas);\n\n            return this;\n        },\n        draw: function() {\n            this.drawScene();\n            return this;\n        },\n        // extend Node.prototype.setVisible\n        setVisible: function(visible) {\n            Konva.Node.prototype.setVisible.call(this, visible);\n            if(visible) {\n                this.getCanvas()._canvas.style.display = 'block';\n            }\n            else {\n                this.getCanvas()._canvas.style.display = 'none';\n            }\n            return this;\n        }\n    });\n    Konva.Util.extend(Konva.FastLayer, Konva.BaseLayer);\n\n    Konva.Collection.mapMethods(Konva.FastLayer);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Group constructor.  Groups are used to contain shapes or other groups.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Container\n     * @param {Object} config\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * * @param {Object} [config.clip] set clip\n     * @param {Number} [config.clipX] set clip x\n     * @param {Number} [config.clipY] set clip y\n     * @param {Number} [config.clipWidth] set clip width\n     * @param {Number} [config.clipHeight] set clip height\n     * @param {Function} [config.clipFunc] set clip func\n\n     * @example\n     * var group = new Konva.Group();\n     */\n    Konva.Group = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Util.addMethods(Konva.Group, {\n        ___init: function(config) {\n            this.nodeType = 'Group';\n            // call super constructor\n            Konva.Container.call(this, config);\n        },\n        _validateAdd: function(child) {\n            var type = child.getType();\n            if (type !== 'Group' && type !== 'Shape') {\n                Konva.Util.throw('You may only add groups and shapes to groups.');\n            }\n        }\n    });\n    Konva.Util.extend(Konva.Group, Konva.Container);\n\n    Konva.Collection.mapMethods(Konva.Group);\n})();\n\n(function(Konva) {\n    'use strict';\n\n    var now = (function() {\n        if (Konva.global.performance && Konva.global.performance.now) {\n            return function() {\n                return Konva.global.performance.now();\n            };\n        }\n\n        return function() {\n            return new Date().getTime();\n        };\n    })();\n\n    function FRAF(callback) {\n        setTimeout(callback, 1000 / 60);\n    }\n\n    var RAF = (function(){\n        return Konva.global.requestAnimationFrame\n            || Konva.global.webkitRequestAnimationFrame\n            || Konva.global.mozRequestAnimationFrame\n            || Konva.global.oRequestAnimationFrame\n            || Konva.global.msRequestAnimationFrame\n            || FRAF;\n    })();\n\n\n\n    function requestAnimFrame() {\n        return RAF.apply(Konva.global, arguments);\n    }\n\n    /**\n     * Animation constructor.  A stage is used to contain multiple layers and handle\n     * @constructor\n     * @memberof Konva\n     * @param {Function} func function executed on each animation frame.  The function is passed a frame object, which contains\n     *  timeDiff, lastTime, time, and frameRate properties.  The timeDiff property is the number of milliseconds that have passed\n     *  since the last animation frame.  The lastTime property is time in milliseconds that elapsed from the moment the animation started\n     *  to the last animation frame.  The time property is the time in milliseconds that ellapsed from the moment the animation started\n     *  to the current animation frame.  The frameRate property is the current frame rate in frames / second. Return false from function,\n     *  if you don't need to redraw layer/layers on some frames.\n     * @param {Konva.Layer|Array} [layers] layer(s) to be redrawn on each animation frame. Can be a layer, an array of layers, or null.\n     *  Not specifying a node will result in no redraw.\n     * @example\n     * // move a node to the right at 50 pixels / second\n     * var velocity = 50;\n     *\n     * var anim = new Konva.Animation(function(frame) {\n     *   var dist = velocity * (frame.timeDiff / 1000);\n     *   node.move(dist, 0);\n     * }, layer);\n     *\n     * anim.start();\n     */\n    Konva.Animation = function(func, layers) {\n        var Anim = Konva.Animation;\n        this.func = func;\n        this.setLayers(layers);\n        this.id = Anim.animIdCounter++;\n        this.frame = {\n            time: 0,\n            timeDiff: 0,\n            lastTime: now()\n        };\n    };\n    /*\n     * Animation methods\n     */\n    Konva.Animation.prototype = {\n        /**\n         * set layers to be redrawn on each animation frame\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @param {Konva.Layer|Array} [layers] layer(s) to be redrawn.&nbsp; Can be a layer, an array of layers, or null.  Not specifying a node will result in no redraw.\n         * @return {Konva.Animation} this\n         */\n        setLayers: function(layers) {\n            var lays = [];\n            // if passing in no layers\n            if (!layers) {\n                lays = [];\n            }\n            // if passing in an array of Layers\n            // NOTE: layers could be an array or Konva.Collection.  for simplicity, I'm just inspecting\n            // the length property to check for both cases\n            else if (layers.length > 0) {\n                lays = layers;\n            }\n            // if passing in a Layer\n            else {\n                lays = [layers];\n            }\n\n            this.layers = lays;\n            return this;\n        },\n        /**\n         * get layers\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @return {Array} Array of Konva.Layer\n         */\n        getLayers: function() {\n            return this.layers;\n        },\n        /**\n         * add layer.  Returns true if the layer was added, and false if it was not\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @param {Konva.Layer} layer to add\n         * @return {Bool} true if layer is added to animation, otherwise false\n         */\n        addLayer: function(layer) {\n            var layers = this.layers,\n                len = layers.length, n;\n\n            // don't add the layer if it already exists\n            for (n = 0; n < len; n++) {\n                if (layers[n]._id === layer._id){\n                    return false;\n                }\n            }\n\n            this.layers.push(layer);\n            return true;\n        },\n        /**\n         * determine if animation is running or not.  returns true or false\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @return {Bool} is animation running?\n         */\n        isRunning: function() {\n            var a = Konva.Animation,\n                animations = a.animations,\n                len = animations.length,\n                n;\n\n            for (n = 0; n < len; n++) {\n                if (animations[n].id === this.id) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * start animation\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @return {Konva.Animation} this\n         */\n        start: function() {\n            var Anim = Konva.Animation;\n            this.stop();\n            this.frame.timeDiff = 0;\n            this.frame.lastTime = now();\n            Anim._addAnimation(this);\n            return this;\n        },\n        /**\n         * stop animation\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @return {Konva.Animation} this\n         */\n        stop: function() {\n            Konva.Animation._removeAnimation(this);\n            return this;\n        },\n        _updateFrameObject: function(time) {\n            this.frame.timeDiff = time - this.frame.lastTime;\n            this.frame.lastTime = time;\n            this.frame.time += this.frame.timeDiff;\n            this.frame.frameRate = 1000 / this.frame.timeDiff;\n        }\n    };\n    Konva.Animation.animations = [];\n    Konva.Animation.animIdCounter = 0;\n    Konva.Animation.animRunning = false;\n\n    Konva.Animation._addAnimation = function(anim) {\n        this.animations.push(anim);\n        this._handleAnimation();\n    };\n    Konva.Animation._removeAnimation = function(anim) {\n        var id = anim.id,\n            animations = this.animations,\n            len = animations.length,\n            n;\n\n        for(n = 0; n < len; n++) {\n            if(animations[n].id === id) {\n                this.animations.splice(n, 1);\n                break;\n            }\n        }\n    };\n\n    Konva.Animation._runFrames = function() {\n        var layerHash = {},\n            animations = this.animations,\n            anim, layers, func, n, i, layersLen, layer, key, needRedraw;\n        /*\n         * loop through all animations and execute animation\n         *  function.  if the animation object has specified node,\n         *  we can add the node to the nodes hash to eliminate\n         *  drawing the same node multiple times.  The node property\n         *  can be the stage itself or a layer\n         */\n        /*\n         * WARNING: don't cache animations.length because it could change while\n         * the for loop is running, causing a JS error\n         */\n\n        for(n = 0; n < animations.length; n++) {\n            anim = animations[n];\n            layers = anim.layers;\n            func = anim.func;\n\n\n            anim._updateFrameObject(now());\n            layersLen = layers.length;\n\n            // if animation object has a function, execute it\n            if (func) {\n                // allow anim bypassing drawing\n                needRedraw = (func.call(anim, anim.frame) !== false);\n            } else {\n                needRedraw = true;\n            }\n            if (!needRedraw) {\n                continue;\n            }\n            for (i = 0; i < layersLen; i++) {\n                layer = layers[i];\n\n                if (layer._id !== undefined) {\n                    layerHash[layer._id] = layer;\n                }\n            }\n        }\n\n        for (key in layerHash) {\n            if (!layerHash.hasOwnProperty(key)) {\n                continue;\n            }\n            layerHash[key].draw();\n        }\n    };\n    Konva.Animation._animationLoop = function() {\n        var Anim = Konva.Animation;\n        if(Anim.animations.length) {\n            Anim._runFrames();\n            requestAnimFrame(Anim._animationLoop);\n        }\n        else {\n            Anim.animRunning = false;\n        }\n    };\n    Konva.Animation._handleAnimation = function() {\n        if(!this.animRunning) {\n            this.animRunning = true;\n            requestAnimFrame(this._animationLoop);\n        }\n    };\n\n    /**\n     * batch draw. this function will not do immediate draw\n     * but it will schedule drawing to next tick (requestAnimFrame)\n     * @method\n     * @return {Konva.Layer} this\n     * @memberof Konva.Base.prototype\n     */\n    Konva.BaseLayer.prototype.batchDraw = function() {\n        var that = this,\n            Anim = Konva.Animation;\n\n        if (!this.batchAnim) {\n            this.batchAnim = new Anim(function() {\n                // stop animation after first tick\n                that.batchAnim.stop();\n            }, this);\n        }\n\n        this.lastBatchDrawTime = now();\n\n        if (!this.batchAnim.isRunning()) {\n            this.batchAnim.start();\n        }\n        return this;\n    };\n\n    /**\n     * batch draw\n     * @method\n     * @return {Konva.Stage} this\n     * @memberof Konva.Stage.prototype\n     */\n    Konva.Stage.prototype.batchDraw = function() {\n        this.getChildren().each(function(layer) {\n            layer.batchDraw();\n        });\n        return this;\n    };\n})(Konva);\n\n(function() {\n    'use strict';\n    var blacklist = {\n        node: 1,\n        duration: 1,\n        easing: 1,\n        onFinish: 1,\n        yoyo: 1\n    },\n\n    PAUSED = 1,\n    PLAYING = 2,\n    REVERSING = 3,\n\n    idCounter = 0,\n    colorAttrs = ['fill', 'stroke', 'shadowColor'];\n\n    var Tween = function(prop, propFunc, func, begin, finish, duration, yoyo) {\n        this.prop = prop;\n        this.propFunc = propFunc;\n        this.begin = begin;\n        this._pos = begin;\n        this.duration = duration;\n        this._change = 0;\n        this.prevPos = 0;\n        this.yoyo = yoyo;\n        this._time = 0;\n        this._position = 0;\n        this._startTime = 0;\n        this._finish = 0;\n        this.func = func;\n        this._change = finish - this.begin;\n        this.pause();\n    };\n    /*\n     * Tween methods\n     */\n    Tween.prototype = {\n        fire: function(str) {\n            var handler = this[str];\n            if (handler) {\n                handler();\n            }\n        },\n        setTime: function(t) {\n            if(t > this.duration) {\n                if(this.yoyo) {\n                    this._time = this.duration;\n                    this.reverse();\n                }\n                else {\n                    this.finish();\n                }\n            }\n            else if(t < 0) {\n                if(this.yoyo) {\n                    this._time = 0;\n                    this.play();\n                }\n                else {\n                    this.reset();\n                }\n            }\n            else {\n                this._time = t;\n                this.update();\n            }\n        },\n        getTime: function() {\n            return this._time;\n        },\n        setPosition: function(p) {\n            this.prevPos = this._pos;\n            this.propFunc(p);\n            this._pos = p;\n        },\n        getPosition: function(t) {\n            if(t === undefined) {\n                t = this._time;\n            }\n            return this.func(t, this.begin, this._change, this.duration);\n        },\n        play: function() {\n            this.state = PLAYING;\n            this._startTime = this.getTimer() - this._time;\n            this.onEnterFrame();\n            this.fire('onPlay');\n        },\n        reverse: function() {\n            this.state = REVERSING;\n            this._time = this.duration - this._time;\n            this._startTime = this.getTimer() - this._time;\n            this.onEnterFrame();\n            this.fire('onReverse');\n        },\n        seek: function(t) {\n            this.pause();\n            this._time = t;\n            this.update();\n            this.fire('onSeek');\n        },\n        reset: function() {\n            this.pause();\n            this._time = 0;\n            this.update();\n            this.fire('onReset');\n        },\n        finish: function() {\n            this.pause();\n            this._time = this.duration;\n            this.update();\n            this.fire('onFinish');\n        },\n        update: function() {\n            this.setPosition(this.getPosition(this._time));\n        },\n        onEnterFrame: function() {\n            var t = this.getTimer() - this._startTime;\n            if(this.state === PLAYING) {\n                this.setTime(t);\n            }\n            else if (this.state === REVERSING) {\n                this.setTime(this.duration - t);\n            }\n        },\n        pause: function() {\n            this.state = PAUSED;\n            this.fire('onPause');\n        },\n        getTimer: function() {\n            return new Date().getTime();\n        }\n    };\n\n    /**\n     * Tween constructor.  Tweens enable you to animate a node between the current state and a new state.\n     *  You can play, pause, reverse, seek, reset, and finish tweens.  By default, tweens are animated using\n     *  a linear easing.  For more tweening options, check out {@link Konva.Easings}\n     * @constructor\n     * @memberof Konva\n     * @example\n     * // instantiate new tween which fully rotates a node in 1 second\n     * var tween = new Konva.Tween({\n     *   node: node,\n     *   rotationDeg: 360,\n     *   duration: 1,\n     *   easing: Konva.Easings.EaseInOut\n     * });\n     *\n     * // play tween\n     * tween.play();\n     *\n     * // pause tween\n     * tween.pause();\n     */\n    Konva.Tween = function(config) {\n        var that = this,\n            node = config.node,\n            nodeId = node._id,\n            duration,\n            easing = config.easing || Konva.Easings.Linear,\n            yoyo = !!config.yoyo,\n            key;\n\n        if (typeof config.duration === 'undefined') {\n            duration = 1;\n        } else if (config.duration === 0) {  // zero is bad value for duration\n            duration = 0.001;\n        } else {\n            duration = config.duration;\n        }\n        this.node = node;\n        this._id = idCounter++;\n\n        var layers = node.getLayer() || ((node instanceof Konva.Stage) ? node.getLayers() : null);\n        if (!layers) {\n            Konva.Util.error(\n                'Tween constructor have `node` that is not in a layer. Please add node into layer first.'\n            );\n        }\n        this.anim = new Konva.Animation(function() {\n            that.tween.onEnterFrame();\n        }, layers);\n\n        this.tween = new Tween(key, function(i) {\n            that._tweenFunc(i);\n        }, easing, 0, 1, duration * 1000, yoyo);\n\n        this._addListeners();\n\n        // init attrs map\n        if (!Konva.Tween.attrs[nodeId]) {\n            Konva.Tween.attrs[nodeId] = {};\n        }\n        if (!Konva.Tween.attrs[nodeId][this._id]) {\n            Konva.Tween.attrs[nodeId][this._id] = {};\n        }\n        // init tweens map\n        if (!Konva.Tween.tweens[nodeId]) {\n            Konva.Tween.tweens[nodeId] = {};\n        }\n\n        for (key in config) {\n            if (blacklist[key] === undefined) {\n                this._addAttr(key, config[key]);\n            }\n        }\n\n        this.reset();\n\n        // callbacks\n        this.onFinish = config.onFinish;\n        this.onReset = config.onReset;\n    };\n\n    // start/diff object = attrs.nodeId.tweenId.attr\n    Konva.Tween.attrs = {};\n    // tweenId = tweens.nodeId.attr\n    Konva.Tween.tweens = {};\n\n    Konva.Tween.prototype = {\n        _addAttr: function(key, end) {\n            var node = this.node,\n                nodeId = node._id,\n                start, diff, tweenId, n, len, trueEnd, trueStart;\n\n            // remove conflict from tween map if it exists\n            tweenId = Konva.Tween.tweens[nodeId][key];\n\n            if (tweenId) {\n                delete Konva.Tween.attrs[nodeId][tweenId][key];\n            }\n\n            // add to tween map\n            start = node.getAttr(key);\n\n            if (Konva.Util._isArray(end)) {\n                diff = [];\n                len = Math.max(end.length, start.length);\n\n                if (key === 'points' && end.length !== start.length) {\n                    // before tweening points we need to make sure that start.length === end.length\n                    // Konva.Util._prepareArrayForTween thinking that end.length > start.length\n\n                    if (end.length > start.length) {\n                        // so in this case we will increase number of starting points\n                        trueStart = start;\n                        start = Konva.Util._prepareArrayForTween(start, end, node.closed());\n                    } else {\n                        // in this case we will increase number of eding points\n                        trueEnd = end;\n                        end = Konva.Util._prepareArrayForTween(end, start, node.closed());\n                    }\n                }\n\n                for (n = 0; n < len; n++) {\n                    diff.push((end[n]) - (start[n]));\n                }\n\n            } else if (colorAttrs.indexOf(key) !== -1) {\n                start = Konva.Util.colorToRGBA(start);\n                var endRGBA = Konva.Util.colorToRGBA(end);\n                diff = {\n                    r: endRGBA.r - start.r,\n                    g: endRGBA.g - start.g,\n                    b: endRGBA.b - start.b,\n                    a: endRGBA.a - start.a\n                };\n            } else {\n                diff = end - start;\n            }\n\n            Konva.Tween.attrs[nodeId][this._id][key] = {\n                start: start,\n                diff: diff,\n                end: end,\n                trueEnd: trueEnd,\n                trueStart: trueStart\n            };\n            Konva.Tween.tweens[nodeId][key] = this._id;\n        },\n        _tweenFunc: function(i) {\n            var node = this.node,\n                attrs = Konva.Tween.attrs[node._id][this._id],\n                key, attr, start, diff, newVal, n, len, end;\n\n            for (key in attrs) {\n                attr = attrs[key];\n                start = attr.start;\n                diff = attr.diff;\n                end = attr.end;\n\n                if (Konva.Util._isArray(start)) {\n                    newVal = [];\n                    len = Math.max(start.length, end.length);\n                    for (n = 0; n < len; n++) {\n                        newVal.push((start[n] || 0) + (diff[n] * i));\n                    }\n                } else if (colorAttrs.indexOf(key) !== -1) {\n                    newVal = 'rgba(' +\n                            Math.round(start.r + diff.r * i) + ',' +\n                            Math.round(start.g + diff.g * i) + ',' +\n                            Math.round(start.b + diff.b * i) + ',' +\n                            (start.a + diff.a * i) + ')';\n                } else {\n                    newVal = start + (diff * i);\n                }\n\n                node.setAttr(key, newVal);\n            }\n        },\n        _addListeners: function() {\n            var that = this;\n\n            // start listeners\n            this.tween.onPlay = function() {\n                that.anim.start();\n            };\n            this.tween.onReverse = function() {\n                that.anim.start();\n            };\n\n            // stop listeners\n            this.tween.onPause = function() {\n                that.anim.stop();\n            };\n            this.tween.onFinish = function() {\n                var node = that.node;\n\n                // after tweening  points of line we need to set original end\n                var attrs = Konva.Tween.attrs[node._id][that._id];\n                if (attrs.points && attrs.points.trueEnd) {\n                    node.points(attrs.points.trueEnd);\n                }\n\n                if (that.onFinish) {\n                    that.onFinish.call(that);\n                }\n            };\n            this.tween.onReset = function() {\n                var node = that.node;\n                // after tweening  points of line we need to set original start\n                var attrs = Konva.Tween.attrs[node._id][that._id];\n                if (attrs.points && attrs.points.trueStart) {\n                    node.points(attrs.points.trueStart);\n                }\n\n                if (that.onReset) {\n                    that.onReset();\n                }\n            };\n        },\n        /**\n         * play\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @returns {Tween}\n         */\n        play: function() {\n            this.tween.play();\n            return this;\n        },\n        /**\n         * reverse\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @returns {Tween}\n         */\n        reverse: function() {\n            this.tween.reverse();\n            return this;\n        },\n        /**\n         * reset\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @returns {Tween}\n         */\n        reset: function() {\n            this.tween.reset();\n            return this;\n        },\n        /**\n         * seek\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @param {Integer} t time in seconds between 0 and the duration\n         * @returns {Tween}\n         */\n        seek: function(t) {\n            this.tween.seek(t * 1000);\n            return this;\n        },\n        /**\n         * pause\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @returns {Tween}\n         */\n        pause: function() {\n            this.tween.pause();\n            return this;\n        },\n        /**\n         * finish\n         * @method\n         * @memberof Konva.Tween.prototype\n         * @returns {Tween}\n         */\n        finish: function() {\n            this.tween.finish();\n            return this;\n        },\n        /**\n         * destroy\n         * @method\n         * @memberof Konva.Tween.prototype\n         */\n        destroy: function() {\n            var nodeId = this.node._id,\n                thisId = this._id,\n                attrs = Konva.Tween.tweens[nodeId],\n                key;\n\n            this.pause();\n\n            for (key in attrs) {\n                delete Konva.Tween.tweens[nodeId][key];\n            }\n\n            delete Konva.Tween.attrs[nodeId][thisId];\n        }\n    };\n\n    /**\n     * Tween node properties. Shorter usage of {@link Konva.Tween} object.\n     *\n     * @method Konva.Node#to\n     * @memberof Konva.Node\n     * @param {Object} [params] tween params\n     * @example\n     *\n     * circle.to({\n     *  x : 50,\n     *  duration : 0.5\n     * });\n     */\n    Konva.Node.prototype.to = function(params) {\n        var onFinish = params.onFinish;\n        params.node = this;\n        params.onFinish = function() {\n            this.destroy();\n            if (onFinish) {\n                onFinish();\n            }\n        };\n        var tween = new Konva.Tween(params);\n        tween.play();\n    };\n\n    /*\n    * These eases were ported from an Adobe Flash tweening library to JavaScript\n    * by Xaric\n    */\n\n    /**\n     * @namespace Easings\n     * @memberof Konva\n     */\n    Konva.Easings = {\n        /**\n        * back ease in\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BackEaseIn': function(t, b, c, d) {\n            var s = 1.70158;\n            return c * (t /= d) * t * ((s + 1) * t - s) + b;\n        },\n        /**\n        * back ease out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BackEaseOut': function(t, b, c, d) {\n            var s = 1.70158;\n            return c * (( t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n        },\n        /**\n        * back ease in out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BackEaseInOut': function(t, b, c, d) {\n            var s = 1.70158;\n            if((t /= d / 2) < 1) {\n                return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n            }\n            return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n        },\n        /**\n        * elastic ease in\n        * @function\n        * @memberof Konva.Easings\n        */\n        'ElasticEaseIn': function(t, b, c, d, a, p) {\n            // added s = 0\n            var s = 0;\n            if(t === 0) {\n                return b;\n            }\n            if((t /= d) === 1) {\n                return b + c;\n            }\n            if(!p) {\n                p = d * 0.3;\n            }\n            if(!a || a < Math.abs(c)) {\n                a = c;\n                s = p / 4;\n            }\n            else {\n                s = p / (2 * Math.PI) * Math.asin(c / a);\n            }\n            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n        },\n        /**\n        * elastic ease out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'ElasticEaseOut': function(t, b, c, d, a, p) {\n            // added s = 0\n            var s = 0;\n            if(t === 0) {\n                return b;\n            }\n            if((t /= d) === 1) {\n                return b + c;\n            }\n            if(!p) {\n                p = d * 0.3;\n            }\n            if(!a || a < Math.abs(c)) {\n                a = c;\n                s = p / 4;\n            }\n            else {\n                s = p / (2 * Math.PI) * Math.asin(c / a);\n            }\n            return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b);\n        },\n        /**\n        * elastic ease in out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'ElasticEaseInOut': function(t, b, c, d, a, p) {\n            // added s = 0\n            var s = 0;\n            if(t === 0) {\n                return b;\n            }\n            if((t /= d / 2) === 2) {\n                return b + c;\n            }\n            if(!p) {\n                p = d * (0.3 * 1.5);\n            }\n            if(!a || a < Math.abs(c)) {\n                a = c;\n                s = p / 4;\n            }\n            else {\n                s = p / (2 * Math.PI) * Math.asin(c / a);\n            }\n            if(t < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n            }\n            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n        },\n        /**\n        * bounce ease out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BounceEaseOut': function(t, b, c, d) {\n            if((t /= d) < (1 / 2.75)) {\n                return c * (7.5625 * t * t) + b;\n            }\n            else if(t < (2 / 2.75)) {\n                return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n            }\n            else if(t < (2.5 / 2.75)) {\n                return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n            }\n            else {\n                return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n            }\n        },\n        /**\n        * bounce ease in\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BounceEaseIn': function(t, b, c, d) {\n            return c - Konva.Easings.BounceEaseOut(d - t, 0, c, d) + b;\n        },\n        /**\n        * bounce ease in out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'BounceEaseInOut': function(t, b, c, d) {\n            if(t < d / 2) {\n                return Konva.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;\n            }\n            else {\n                return Konva.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n            }\n        },\n        /**\n        * ease in\n        * @function\n        * @memberof Konva.Easings\n        */\n        'EaseIn': function(t, b, c, d) {\n            return c * (t /= d) * t + b;\n        },\n        /**\n        * ease out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'EaseOut': function(t, b, c, d) {\n            return -c * (t /= d) * (t - 2) + b;\n        },\n        /**\n        * ease in out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'EaseInOut': function(t, b, c, d) {\n            if((t /= d / 2) < 1) {\n                return c / 2 * t * t + b;\n            }\n            return -c / 2 * ((--t) * (t - 2) - 1) + b;\n        },\n        /**\n        * strong ease in\n        * @function\n        * @memberof Konva.Easings\n        */\n        'StrongEaseIn': function(t, b, c, d) {\n            return c * (t /= d) * t * t * t * t + b;\n        },\n        /**\n        * strong ease out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'StrongEaseOut': function(t, b, c, d) {\n            return c * (( t = t / d - 1) * t * t * t * t + 1) + b;\n        },\n        /**\n        * strong ease in out\n        * @function\n        * @memberof Konva.Easings\n        */\n        'StrongEaseInOut': function(t, b, c, d) {\n            if((t /= d / 2) < 1) {\n                return c / 2 * t * t * t * t * t + b;\n            }\n            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n        },\n        /**\n        * linear\n        * @function\n        * @memberof Konva.Easings\n        */\n        'Linear': function(t, b, c, d) {\n            return c * t / d + b;\n        }\n    };\n})();\n\n(function() {\n    'use strict';\n    Konva.DD = {\n        // properties\n        anim: new Konva.Animation(function() {\n            var b = this.dirty;\n            this.dirty = false;\n            return b;\n        }),\n        isDragging: false,\n        justDragged: false,\n        offset: {\n            x: 0,\n            y: 0\n        },\n        node: null,\n\n        // methods\n        _drag: function(evt) {\n            var dd = Konva.DD,\n                node = dd.node;\n\n            if(node) {\n               if(!dd.isDragging) {\n                    var pos = node.getStage().getPointerPosition();\n                    var dragDistance = node.dragDistance();\n                    var distance = Math.max(\n                        Math.abs(pos.x - dd.startPointerPos.x),\n                        Math.abs(pos.y - dd.startPointerPos.y)\n                    );\n                    if (distance < dragDistance) {\n                        return;\n                    }\n                }\n\n\n                node.getStage()._setPointerPosition(evt);\n                node._setDragPosition(evt);\n                if(!dd.isDragging) {\n                    dd.isDragging = true;\n                    node.fire('dragstart', {\n                        type: 'dragstart',\n                        target: node,\n                        evt: evt\n                    }, true);\n                }\n\n                // execute ondragmove if defined\n                node.fire('dragmove', {\n                    type: 'dragmove',\n                    target: node,\n                    evt: evt\n                }, true);\n            }\n        },\n        _endDragBefore: function(evt) {\n            var dd = Konva.DD,\n                node = dd.node,\n                layer;\n\n            if(node) {\n                layer = node.getLayer();\n                dd.anim.stop();\n\n                // only fire dragend event if the drag and drop\n                // operation actually started.\n                if(dd.isDragging) {\n                    dd.isDragging = false;\n                    dd.justDragged = true;\n                    Konva.listenClickTap = false;\n\n                    if (evt) {\n                        evt.dragEndNode = node;\n                    }\n                }\n\n                delete dd.node;\n\n                if (node.getLayer() || layer || (node instanceof Konva.Stage)) {\n                  (layer || node).draw();\n                }\n\n            }\n        },\n        _endDragAfter: function(evt) {\n            evt = evt || {};\n            var dragEndNode = evt.dragEndNode;\n\n            if (evt && dragEndNode) {\n                dragEndNode.fire('dragend', {\n                    type: 'dragend',\n                    target: dragEndNode,\n                    evt: evt\n                }, true);\n            }\n        }\n    };\n\n    // Node extenders\n\n    /**\n     * initiate drag and drop\n     * @method\n     * @memberof Konva.Node.prototype\n     */\n    Konva.Node.prototype.startDrag = function() {\n        var dd = Konva.DD,\n            stage = this.getStage(),\n            layer = this.getLayer(),\n            pos = stage.getPointerPosition(),\n            ap = this.getAbsolutePosition();\n\n        if(pos) {\n            if (dd.node) {\n                dd.node.stopDrag();\n            }\n\n            dd.node = this;\n            dd.startPointerPos = pos;\n            dd.offset.x = pos.x - ap.x;\n            dd.offset.y = pos.y - ap.y;\n            dd.anim.setLayers(layer || this.getLayers());\n            dd.anim.start();\n\n            this._setDragPosition();\n        }\n    };\n\n    Konva.Node.prototype._setDragPosition = function(evt) {\n        var dd = Konva.DD,\n            pos = this.getStage().getPointerPosition(),\n            dbf = this.getDragBoundFunc();\n        if (!pos) {\n            return;\n        }\n        var newNodePos = {\n            x: pos.x - dd.offset.x,\n            y: pos.y - dd.offset.y\n        };\n\n        if(dbf !== undefined) {\n            newNodePos = dbf.call(this, newNodePos, evt);\n        }\n        this.setAbsolutePosition(newNodePos);\n\n        if (!this._lastPos || this._lastPos.x !== newNodePos.x ||\n            this._lastPos.y !== newNodePos.y) {\n            dd.anim.dirty = true;\n        }\n\n        this._lastPos = newNodePos;\n    };\n\n    /**\n     * stop drag and drop\n     * @method\n     * @memberof Konva.Node.prototype\n     */\n    Konva.Node.prototype.stopDrag = function() {\n        var dd = Konva.DD,\n            evt = {};\n        dd._endDragBefore(evt);\n        dd._endDragAfter(evt);\n    };\n\n    Konva.Node.prototype.setDraggable = function(draggable) {\n        this._setAttr('draggable', draggable);\n        this._dragChange();\n    };\n\n    var origDestroy = Konva.Node.prototype.destroy;\n\n    Konva.Node.prototype.destroy = function() {\n        var dd = Konva.DD;\n\n        // stop DD\n        if(dd.node && dd.node._id === this._id) {\n\n            this.stopDrag();\n        }\n\n        origDestroy.call(this);\n    };\n\n    /**\n     * determine if node is currently in drag and drop mode\n     * @method\n     * @memberof Konva.Node.prototype\n     */\n    Konva.Node.prototype.isDragging = function() {\n        var dd = Konva.DD;\n        return !!(dd.node && dd.node._id === this._id && dd.isDragging);\n    };\n\n    Konva.Node.prototype._listenDrag = function() {\n        var that = this;\n\n        this._dragCleanup();\n\n        if (this.getClassName() === 'Stage') {\n            this.on('contentMousedown.konva contentTouchstart.konva', function(evt) {\n                if(!Konva.DD.node) {\n                    that.startDrag(evt);\n                }\n            });\n        }\n        else {\n            this.on('mousedown.konva touchstart.konva', function(evt) {\n                // ignore right and middle buttons\n                if (evt.evt.button === 1 || evt.evt.button === 2) {\n                    return;\n                }\n                if(!Konva.DD.node) {\n                    that.startDrag(evt);\n                }\n            });\n        }\n\n        // listening is required for drag and drop\n        /*\n        this._listeningEnabled = true;\n        this._clearSelfAndAncestorCache('listeningEnabled');\n        */\n    };\n\n    Konva.Node.prototype._dragChange = function() {\n        if(this.attrs.draggable) {\n            this._listenDrag();\n        }\n        else {\n            // remove event listeners\n            this._dragCleanup();\n\n            /*\n             * force drag and drop to end\n             * if this node is currently in\n             * drag and drop mode\n             */\n            var stage = this.getStage();\n            var dd = Konva.DD;\n            if(stage && dd.node && dd.node._id === this._id) {\n                dd.node.stopDrag();\n            }\n        }\n    };\n\n    Konva.Node.prototype._dragCleanup = function() {\n        if (this.getClassName() === 'Stage') {\n            this.off('contentMousedown.konva');\n            this.off('contentTouchstart.konva');\n        } else {\n            this.off('mousedown.konva');\n            this.off('touchstart.konva');\n        }\n    };\n\n    Konva.Factory.addGetterSetter(Konva.Node, 'dragBoundFunc');\n\n    /**\n     * get/set drag bound function.  This is used to override the default\n     *  drag and drop position\n     * @name dragBoundFunc\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Function} dragBoundFunc\n     * @returns {Function}\n     * @example\n     * // get drag bound function\n     * var dragBoundFunc = node.dragBoundFunc();\n     *\n     * // create vertical drag and drop\n     * node.dragBoundFunc(function(pos){\n     *   return {\n     *     x: this.getAbsolutePosition().x,\n     *     y: pos.y\n     *   };\n     * });\n     */\n\n    Konva.Factory.addGetter(Konva.Node, 'draggable', false);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Node, 'draggable');\n\n     /**\n     * get/set draggable flag\n     * @name draggable\n     * @method\n     * @memberof Konva.Node.prototype\n     * @param {Boolean} draggable\n     * @returns {Boolean}\n     * @example\n     * // get draggable flag\n     * var draggable = node.draggable();\n     *\n     * // enable drag and drop\n     * node.draggable(true);\n     *\n     * // disable drag and drop\n     * node.draggable(false);\n     */\n\n    var html = Konva.document.documentElement;\n    html.addEventListener('mouseup', Konva.DD._endDragBefore, true);\n    html.addEventListener('touchend', Konva.DD._endDragBefore, true);\n\n    html.addEventListener('mousemove', Konva.DD._drag);\n    html.addEventListener('touchmove', Konva.DD._drag);\n\n    html.addEventListener('mouseup', Konva.DD._endDragAfter, false);\n    html.addEventListener('touchend', Konva.DD._endDragAfter, false);\n\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Rect constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} [config.cornerRadius]\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var rect = new Konva.Rect({\n     *   width: 100,\n     *   height: 50,\n     *   fill: 'red',\n     *   stroke: 'black',\n     *   strokeWidth: 5\n     * });\n     */\n    Konva.Rect = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Rect.prototype = {\n        ___init: function(config) {\n            Konva.Shape.call(this, config);\n            this.className = 'Rect';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var cornerRadius = this.getCornerRadius(),\n                width = this.getWidth(),\n                height = this.getHeight();\n\n            context.beginPath();\n\n            if(!cornerRadius) {\n                // simple rect - don't bother doing all that complicated maths stuff.\n                context.rect(0, 0, width, height);\n            } else {\n                // arcTo would be nicer, but browser support is patchy (Opera)\n                cornerRadius = Math.min(cornerRadius, width / 2, height / 2);\n                context.moveTo(cornerRadius, 0);\n                context.lineTo(width - cornerRadius, 0);\n                context.arc(width - cornerRadius, cornerRadius, cornerRadius, Math.PI * 3 / 2, 0, false);\n                context.lineTo(width, height - cornerRadius);\n                context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);\n                context.lineTo(cornerRadius, height);\n                context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);\n                context.lineTo(0, cornerRadius);\n                context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, Math.PI * 3 / 2, false);\n            }\n            context.closePath();\n            context.fillStrokeShape(this);\n        }\n    };\n\n    Konva.Util.extend(Konva.Rect, Konva.Shape);\n\n    Konva.Factory.addGetterSetter(Konva.Rect, 'cornerRadius', 0);\n    /**\n     * get/set corner radius\n     * @name cornerRadius\n     * @method\n     * @memberof Konva.Rect.prototype\n     * @param {Number} cornerRadius\n     * @returns {Number}\n     * @example\n     * // get corner radius\n     * var cornerRadius = rect.cornerRadius();\n     *\n     * // set corner radius\n     * rect.cornerRadius(10);\n     */\n\n    Konva.Collection.mapMethods(Konva.Rect);\n})();\n\n(function() {\n    'use strict';\n    // the 0.0001 offset fixes a bug in Chrome 27\n    var PIx2 = (Math.PI * 2) - 0.0001,\n        CIRCLE = 'Circle';\n\n    /**\n     * Circle constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} config.radius\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * // create circle\n     * var circle = new Konva.Circle({\n     *   radius: 40,\n     *   fill: 'red',\n     *   stroke: 'black'\n     *   strokeWidth: 5\n     * });\n     */\n    Konva.Circle = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Circle.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = CIRCLE;\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            context.beginPath();\n            context.arc(0, 0, this.getRadius(), 0, PIx2, false);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.radius() !== width / 2) {\n                this.setRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.radius() !== height / 2) {\n                this.setRadius(height / 2);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.Circle, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Circle, 'radius', 0);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Circle, 'radius');\n\n    /**\n     * get/set radius\n     * @name radius\n     * @method\n     * @memberof Konva.Circle.prototype\n     * @param {Number} radius\n     * @returns {Number}\n     * @example\n     * // get radius\n     * var radius = circle.radius();\n     *\n     * // set radius\n     * circle.radius(10);\n     */\n\n    Konva.Collection.mapMethods(Konva.Circle);\n})();\n\n(function() {\n    'use strict';\n    // the 0.0001 offset fixes a bug in Chrome 27\n    var PIx2 = (Math.PI * 2) - 0.0001,\n        ELLIPSE = 'Ellipse';\n\n    /**\n     * Ellipse constructor\n     * @constructor\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Object} config.radius defines x and y radius\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var ellipse = new Konva.Ellipse({\n     *   radius : {\n     *     x : 50,\n     *     y : 50\n     *   },\n     *   fill: 'red'\n     * });\n     */\n    Konva.Ellipse = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Ellipse.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = ELLIPSE;\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var rx = this.getRadiusX(),\n                ry = this.getRadiusY();\n\n            context.beginPath();\n            context.save();\n            if(rx !== ry) {\n                context.scale(1, ry / rx);\n            }\n            context.arc(0, 0, rx, 0, PIx2, false);\n            context.restore();\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getRadiusX() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getRadiusY() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            this.setRadius({\n                x: width / 2\n            });\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            this.setRadius({\n                y: height / 2\n            });\n        }\n    };\n    Konva.Util.extend(Konva.Ellipse, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addComponentsGetterSetter(Konva.Ellipse, 'radius', ['x', 'y']);\n\n    /**\n     * get/set radius\n     * @name radius\n     * @method\n     * @memberof Konva.Ellipse.prototype\n     * @param {Object} radius\n     * @param {Number} radius.x\n     * @param {Number} radius.y\n     * @returns {Object}\n     * @example\n     * // get radius\n     * var radius = ellipse.radius();\n     *\n     * // set radius\n     * ellipse.radius({\n     *   x: 200,\n     *   y: 100\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Ellipse, 'radiusX', 0);\n    /**\n     * get/set radius x\n     * @name radiusX\n     * @method\n     * @memberof Konva.Ellipse.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get radius x\n     * var radiusX = ellipse.radiusX();\n     *\n     * // set radius x\n     * ellipse.radiusX(200);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Ellipse, 'radiusY', 0);\n    /**\n     * get/set radius y\n     * @name radiusY\n     * @method\n     * @memberof Konva.Ellipse.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get radius y\n     * var radiusY = ellipse.radiusY();\n     *\n     * // set radius y\n     * ellipse.radiusY(200);\n     */\n\n    Konva.Collection.mapMethods(Konva.Ellipse);\n\n})();\n\n(function() {\n    'use strict';\n    // the 0.0001 offset fixes a bug in Chrome 27\n    var PIx2 = (Math.PI * 2) - 0.0001;\n    /**\n     * Ring constructor\n     * @constructor\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} config.innerRadius\n     * @param {Number} config.outerRadius\n     * @param {Boolean} [config.clockwise]\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var ring = new Konva.Ring({\n     *   innerRadius: 40,\n     *   outerRadius: 80,\n     *   fill: 'red',\n     *   stroke: 'black',\n     *   strokeWidth: 5\n     * });\n     */\n    Konva.Ring = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Ring.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Ring';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            context.beginPath();\n            context.arc(0, 0, this.getInnerRadius(), 0, PIx2, false);\n            context.moveTo(this.getOuterRadius(), 0);\n            context.arc(0, 0, this.getOuterRadius(), PIx2, 0, true);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.outerRadius() !== width / 2) {\n                this.setOuterRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.outerRadius() !== height / 2) {\n                this.setOuterRadius(height / 2);\n            }\n        },\n        setOuterRadius: function(val) {\n            this._setAttr('outerRadius', val);\n            this.setWidth(val * 2);\n            this.setHeight(val * 2);\n        }\n    };\n    Konva.Util.extend(Konva.Ring, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Ring, 'innerRadius', 0);\n\n    /**\n     * get/set innerRadius\n     * @name innerRadius\n     * @method\n     * @memberof Konva.Ring.prototype\n     * @param {Number} innerRadius\n     * @returns {Number}\n     * @example\n     * // get inner radius\n     * var innerRadius = ring.innerRadius();\n     *\n     * // set inner radius\n     * ring.innerRadius(20);\n     */\n    Konva.Factory.addGetter(Konva.Ring, 'outerRadius', 0);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Ring, 'outerRadius');\n\n    /**\n     * get/set outerRadius\n     * @name outerRadius\n     * @method\n     * @memberof Konva.Ring.prototype\n     * @param {Number} outerRadius\n     * @returns {Number}\n     * @example\n     * // get outer radius\n     * var outerRadius = ring.outerRadius();\n     *\n     * // set outer radius\n     * ring.outerRadius(20);\n     */\n\n    Konva.Collection.mapMethods(Konva.Ring);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Wedge constructor\n     * @constructor\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} config.angle in degrees\n     * @param {Number} config.radius\n     * @param {Boolean} [config.clockwise]\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * // draw a wedge that's pointing downwards\n     * var wedge = new Konva.Wedge({\n     *   radius: 40,\n     *   fill: 'red',\n     *   stroke: 'black'\n     *   strokeWidth: 5,\n     *   angleDeg: 60,\n     *   rotationDeg: -120\n     * });\n     */\n    Konva.Wedge = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Wedge.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Wedge';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            context.beginPath();\n            context.arc(0, 0, this.getRadius(), 0, Konva.getAngle(this.getAngle()), this.getClockwise());\n            context.lineTo(0, 0);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.radius() !== width / 2) {\n                this.setRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.radius() !== height / 2) {\n                this.setRadius(height / 2);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.Wedge, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Wedge, 'radius', 0);\n\n    /**\n     * get/set radius\n     * @name radius\n     * @method\n     * @memberof Konva.Wedge.prototype\n     * @param {Number} radius\n     * @returns {Number}\n     * @example\n     * // get radius\n     * var radius = wedge.radius();\n     *\n     * // set radius\n     * wedge.radius(10);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Wedge, 'angle', 0);\n\n    /**\n     * get/set angle in degrees\n     * @name angle\n     * @method\n     * @memberof Konva.Wedge.prototype\n     * @param {Number} angle\n     * @returns {Number}\n     * @example\n     * // get angle\n     * var angle = wedge.angle();\n     *\n     * // set angle\n     * wedge.angle(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Wedge, 'clockwise', false);\n\n    /**\n     * get/set clockwise flag\n     * @name clockwise\n     * @method\n     * @memberof Konva.Wedge.prototype\n     * @param {Number} clockwise\n     * @returns {Number}\n     * @example\n     * // get clockwise flag\n     * var clockwise = wedge.clockwise();\n     *\n     * // draw wedge counter-clockwise\n     * wedge.clockwise(false);\n     *\n     * // draw wedge clockwise\n     * wedge.clockwise(true);\n     */\n\n    Konva.Factory.backCompat(Konva.Wedge, {\n        angleDeg: 'angle',\n        getAngleDeg: 'getAngle',\n        setAngleDeg: 'setAngle'\n    });\n\n    Konva.Collection.mapMethods(Konva.Wedge);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Arc constructor\n     * @constructor\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} config.angle in degrees\n     * @param {Number} config.innerRadius\n     * @param {Number} config.outerRadius\n     * @param {Boolean} [config.clockwise]\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * // draw a Arc that's pointing downwards\n     * var arc = new Konva.Arc({\n     *   innerRadius: 40,\n     *   outerRadius: 80,\n     *   fill: 'red',\n     *   stroke: 'black'\n     *   strokeWidth: 5,\n     *   angle: 60,\n     *   rotationDeg: -120\n     * });\n     */\n    Konva.Arc = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Arc.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Arc';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var angle = Konva.getAngle(this.angle()),\n                clockwise = this.clockwise();\n\n            context.beginPath();\n            context.arc(0, 0, this.getOuterRadius(), 0, angle, clockwise);\n            context.arc(0, 0, this.getInnerRadius(), angle, 0, !clockwise);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.getOuterRadius() !== width / 2) {\n                this.setOuterRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.getOuterRadius() !== height / 2) {\n                this.setOuterRadius(height / 2);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.Arc, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Arc, 'innerRadius', 0);\n\n    /**\n     * get/set innerRadius\n     * @name innerRadius\n     * @method\n     * @memberof Konva.Arc.prototype\n     * @param {Number} innerRadius\n     * @returns {Number}\n     * @example\n     * // get inner radius\n     * var innerRadius = arc.innerRadius();\n     *\n     * // set inner radius\n     * arc.innerRadius(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arc, 'outerRadius', 0);\n\n    /**\n     * get/set outerRadius\n     * @name outerRadius\n     * @method\n     * @memberof Konva.Arc.prototype\n     * @param {Number} outerRadius\n     * @returns {Number}\n     * @example\n     * // get outer radius\n     * var outerRadius = arc.outerRadius();\n     *\n     * // set outer radius\n     * arc.outerRadius(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arc, 'angle', 0);\n\n    /**\n     * get/set angle in degrees\n     * @name angle\n     * @method\n     * @memberof Konva.Arc.prototype\n     * @param {Number} angle\n     * @returns {Number}\n     * @example\n     * // get angle\n     * var angle = arc.angle();\n     *\n     * // set angle\n     * arc.angle(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arc, 'clockwise', false);\n\n    /**\n     * get/set clockwise flag\n     * @name clockwise\n     * @method\n     * @memberof Konva.Arc.prototype\n     * @param {Boolean} clockwise\n     * @returns {Boolean}\n     * @example\n     * // get clockwise flag\n     * var clockwise = arc.clockwise();\n     *\n     * // draw arc counter-clockwise\n     * arc.clockwise(false);\n     *\n     * // draw arc clockwise\n     * arc.clockwise(true);\n     */\n\n    Konva.Collection.mapMethods(Konva.Arc);\n})();\n\n(function() {\n    'use strict';\n    // CONSTANTS\n    var IMAGE = 'Image';\n\n    /**\n     * Image constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Image} config.image\n     * @param {Object} [config.crop]\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var imageObj = new Image();\n     * imageObj.onload = function() {\n     *   var image = new Konva.Image({\n     *     x: 200,\n     *     y: 50,\n     *     image: imageObj,\n     *     width: 100,\n     *     height: 100\n     *   });\n     * };\n     * imageObj.src = '/path/to/image.jpg'\n     */\n    Konva.Image = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Image.prototype = {\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = IMAGE;\n            this.sceneFunc(this._sceneFunc);\n            this.hitFunc(this._hitFunc);\n        },\n        _useBufferCanvas: function() {\n            return (this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke() && this.getStage();\n        },\n        _sceneFunc: function(context) {\n            var width = this.getWidth(),\n                height = this.getHeight(),\n                image = this.getImage(),\n                cropWidth, cropHeight, params;\n\n            if (image) {\n                cropWidth = this.getCropWidth();\n                cropHeight = this.getCropHeight();\n                if (cropWidth && cropHeight) {\n                    params = [image, this.getCropX(), this.getCropY(), cropWidth, cropHeight, 0, 0, width, height];\n                } else {\n                    params = [image, 0, 0, width, height];\n                }\n            }\n\n            if (this.hasFill() || this.hasStroke()) {\n                context.beginPath();\n                context.rect(0, 0, width, height);\n                context.closePath();\n                context.fillStrokeShape(this);\n            }\n\n            if (image) {\n                context.drawImage.apply(context, params);\n            }\n        },\n        _hitFunc: function(context) {\n            var width = this.getWidth(),\n                height = this.getHeight();\n\n            context.beginPath();\n            context.rect(0, 0, width, height);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        getWidth: function() {\n            var image = this.getImage();\n            return this.attrs.width || (image ? image.width : 0);\n        },\n        getHeight: function() {\n            var image = this.getImage();\n            return this.attrs.height || (image ? image.height : 0);\n        }\n    };\n    Konva.Util.extend(Konva.Image, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Image, 'image');\n\n    /**\n     * set image\n     * @name setImage\n     * @method\n     * @memberof Konva.Image.prototype\n     * @param {Image} image\n     */\n\n    /**\n     * get image\n     * @name getImage\n     * @method\n     * @memberof Konva.Image.prototype\n     * @returns {Image}\n     */\n\n    Konva.Factory.addComponentsGetterSetter(Konva.Image, 'crop', ['x', 'y', 'width', 'height']);\n    /**\n     * get/set crop\n     * @method\n     * @name crop\n     * @memberof Konva.Image.prototype\n     * @param {Object} crop\n     * @param {Number} crop.x\n     * @param {Number} crop.y\n     * @param {Number} crop.width\n     * @param {Number} crop.height\n     * @returns {Object}\n     * @example\n     * // get crop\n     * var crop = image.crop();\n     *\n     * // set crop\n     * image.crop({\n     *   x: 20,\n     *   y: 20,\n     *   width: 20,\n     *   height: 20\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Image, 'cropX', 0);\n    /**\n     * get/set crop x\n     * @method\n     * @name cropX\n     * @memberof Konva.Image.prototype\n     * @param {Number} x\n     * @returns {Number}\n     * @example\n     * // get crop x\n     * var cropX = image.cropX();\n     *\n     * // set crop x\n     * image.cropX(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Image, 'cropY', 0);\n    /**\n     * get/set crop y\n     * @name cropY\n     * @method\n     * @memberof Konva.Image.prototype\n     * @param {Number} y\n     * @returns {Number}\n     * @example\n     * // get crop y\n     * var cropY = image.cropY();\n     *\n     * // set crop y\n     * image.cropY(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Image, 'cropWidth', 0);\n    /**\n     * get/set crop width\n     * @name cropWidth\n     * @method\n     * @memberof Konva.Image.prototype\n     * @param {Number} width\n     * @returns {Number}\n     * @example\n     * // get crop width\n     * var cropWidth = image.cropWidth();\n     *\n     * // set crop width\n     * image.cropWidth(20);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Image, 'cropHeight', 0);\n    /**\n     * get/set crop height\n     * @name cropHeight\n     * @method\n     * @memberof Konva.Image.prototype\n     * @param {Number} height\n     * @returns {Number}\n     * @example\n     * // get crop height\n     * var cropHeight = image.cropHeight();\n     *\n     * // set crop height\n     * image.cropHeight(20);\n     */\n\n    Konva.Collection.mapMethods(Konva.Image);\n\n    /**\n     * load image from given url and create `Konva.Image` instance\n     * @method\n     * @memberof Konva.Image\n     * @param {String} url image source\n     * @param {Function} callback with Konva.Image instance as first argument\n     * @example\n     *  Konva.Image.fromURL(imageURL, function(image){\n     *    // image is Konva.Image instance\n     *    layer.add(image);\n     *    layer.draw();\n     *  });\n     */\n    Konva.Image.fromURL = function(url, callback) {\n        var img = new Image();\n        img.onload = function() {\n          var image = new Konva.Image({\n            image: img\n          });\n          callback(image);\n        };\n        img.src = url;\n    };\n})();\n\n/*eslint-disable max-depth */\n(function() {\n    'use strict';\n    // constants\n    var AUTO = 'auto',\n        //CANVAS = 'canvas',\n        CENTER = 'center',\n        CHANGE_KONVA = 'Change.konva',\n        CONTEXT_2D = '2d',\n        DASH = '-',\n        EMPTY_STRING = '',\n        LEFT = 'left',\n        TEXT = 'text',\n        TEXT_UPPER = 'Text',\n        MIDDLE = 'middle',\n        NORMAL = 'normal',\n        PX_SPACE = 'px ',\n        SPACE = ' ',\n        RIGHT = 'right',\n        WORD = 'word',\n        CHAR = 'char',\n        NONE = 'none',\n        ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'lineHeight', 'text', 'width', 'height', 'wrap'],\n\n        // cached variables\n        attrChangeListLen = ATTR_CHANGE_LIST.length,\n        dummyContext = Konva.Util.createCanvasElement().getContext(CONTEXT_2D);\n\n    /**\n     * Text constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {String} [config.fontFamily] default is Arial\n     * @param {Number} [config.fontSize] in pixels.  Default is 12\n     * @param {String} [config.fontStyle] can be normal, bold, or italic.  Default is normal\n     * @param {String} [config.fontVariant] can be normal or small-caps.  Default is normal\n     * @param {String} config.text\n     * @param {String} [config.align] can be left, center, or right\n     * @param {Number} [config.padding]\n     * @param {Number} [config.lineHeight] default is 1\n     * @param {String} [config.wrap] can be word, char, or none. Default is word\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var text = new Konva.Text({\n     *   x: 10,\n     *   y: 15,\n     *   text: 'Simple Text',\n     *   fontSize: 30,\n     *   fontFamily: 'Calibri',\n     *   fill: 'green'\n     * });\n     */\n    Konva.Text = function(config) {\n        this.___init(config);\n    };\n    function _fillFunc(context) {\n        context.fillText(this.partialText, 0, 0);\n    }\n    function _strokeFunc(context) {\n        context.strokeText(this.partialText, 0, 0);\n    }\n\n    Konva.Text.prototype = {\n        ___init: function(config) {\n            config = config || {};\n\n            // set default color to black\n            if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops) {\n                config.fill = config.fill || 'black';\n            }\n            //\n            // if (config.width === undefined) {\n            //     config.width = AUTO;\n            // }\n            // if (config.height === undefined) {\n            //     config.height = AUTO;\n            // }\n\n            // call super constructor\n            Konva.Shape.call(this, config);\n\n            this._fillFunc = _fillFunc;\n            this._strokeFunc = _strokeFunc;\n            this.className = TEXT_UPPER;\n\n            // update text data for certain attr changes\n            for(var n = 0; n < attrChangeListLen; n++) {\n                this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n            }\n\n            this._setTextData();\n            this.sceneFunc(this._sceneFunc);\n            this.hitFunc(this._hitFunc);\n        },\n        _sceneFunc: function(context) {\n            var p = this.getPadding(),\n                textHeight = this.getTextHeight(),\n                lineHeightPx = this.getLineHeight() * textHeight,\n                textArr = this.textArr,\n                textArrLen = textArr.length,\n                totalWidth = this.getWidth(),\n                n;\n\n            context.setAttr('font', this._getContextFont());\n\n            context.setAttr('textBaseline', MIDDLE);\n            context.setAttr('textAlign', LEFT);\n            context.save();\n            if (p) {\n                context.translate(p, 0);\n                context.translate(0, p + textHeight / 2);\n            } else {\n                context.translate(0, textHeight / 2);\n            }\n\n\n            // draw text lines\n            for(n = 0; n < textArrLen; n++) {\n                var obj = textArr[n],\n                    text = obj.text,\n                    width = obj.width;\n\n                // horizontal alignment\n                context.save();\n                if(this.getAlign() === RIGHT) {\n                    context.translate(totalWidth - width - p * 2, 0);\n                }\n                else if(this.getAlign() === CENTER) {\n                    context.translate((totalWidth - width - p * 2) / 2, 0);\n                }\n\n                this.partialText = text;\n\n                context.fillStrokeShape(this);\n                context.restore();\n                context.translate(0, lineHeightPx);\n            }\n            context.restore();\n        },\n        _hitFunc: function(context) {\n            var width = this.getWidth(),\n                height = this.getHeight();\n\n            context.beginPath();\n            context.rect(0, 0, width, height);\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        setText: function(text) {\n            var str = Konva.Util._isString(text) ? text : (text || '').toString();\n            this._setAttr(TEXT, str);\n            return this;\n        },\n        /**\n         * get width of text area, which includes padding\n         * @method\n         * @memberof Konva.Text.prototype\n         * @returns {Number}\n         */\n        getWidth: function() {\n            var isAuto = (this.attrs.width === AUTO) || (this.attrs.width === undefined);\n            return isAuto ? this.getTextWidth() + this.getPadding() * 2 : this.attrs.width;\n        },\n        /**\n         * get the height of the text area, which takes into account multi-line text, line heights, and padding\n         * @method\n         * @memberof Konva.Text.prototype\n         * @returns {Number}\n         */\n        getHeight: function() {\n          var isAuto = (this.attrs.height === AUTO) || (this.attrs.height === undefined);\n          return isAuto ? (this.getTextHeight() * this.textArr.length * this.getLineHeight()) + this.getPadding() * 2 : this.attrs.height;\n        },\n        /**\n         * get text width\n         * @method\n         * @memberof Konva.Text.prototype\n         * @returns {Number}\n         */\n        getTextWidth: function() {\n            return this.textWidth;\n        },\n        /**\n         * get text height\n         * @method\n         * @memberof Konva.Text.prototype\n         * @returns {Number}\n         */\n        getTextHeight: function() {\n            return this.textHeight;\n        },\n        _getTextSize: function(text) {\n            var _context = dummyContext,\n                fontSize = this.getFontSize(),\n                metrics;\n\n            _context.save();\n            _context.font = this._getContextFont();\n\n            metrics = _context.measureText(text);\n            _context.restore();\n            return {\n                width: metrics.width,\n                height: parseInt(fontSize, 10)\n            };\n        },\n        _getContextFont: function() {\n            // IE don't want to work with usual font style\n            // bold was not working\n            // removing font variant will solve\n            // fix for: https://github.com/konvajs/konva/issues/94\n            if (Konva.UA.isIE) {\n                return this.getFontStyle() + SPACE + this.getFontSize() + PX_SPACE + this.getFontFamily();\n            }\n            return this.getFontStyle() + SPACE +\n                    this.getFontVariant() + SPACE +\n                    this.getFontSize() + PX_SPACE +\n                    this.getFontFamily();\n        },\n        _addTextLine: function (line, width) {\n            return this.textArr.push({text: line, width: width});\n        },\n        _getTextWidth: function (text) {\n            return dummyContext.measureText(text).width;\n        },\n        _setTextData: function () {\n            var lines = this.getText().split('\\n'),\n                fontSize = +this.getFontSize(),\n                textWidth = 0,\n                lineHeightPx = this.getLineHeight() * fontSize,\n                width = this.attrs.width,\n                height = this.attrs.height,\n                fixedWidth = width !== AUTO,\n                fixedHeight = height !== AUTO,\n                padding = this.getPadding(),\n                maxWidth = width - padding * 2,\n                maxHeightPx = height - padding * 2,\n                currentHeightPx = 0,\n                wrap = this.getWrap(),\n                shouldWrap = wrap !== NONE,\n                wrapAtWord = wrap !== CHAR && shouldWrap;\n\n            this.textArr = [];\n            dummyContext.save();\n            dummyContext.font = this._getContextFont();\n            for (var i = 0, max = lines.length; i < max; ++i) {\n                var line = lines[i],\n                    lineWidth = this._getTextWidth(line);\n                if (fixedWidth && lineWidth > maxWidth) {\n                    /*\n                     * if width is fixed and line does not fit entirely\n                     * break the line into multiple fitting lines\n                     */\n                    while (line.length > 0) {\n                        /*\n                         * use binary search to find the longest substring that\n                         * that would fit in the specified width\n                         */\n                        var low = 0, high = line.length,\n                            match = '', matchWidth = 0;\n                        while (low < high) {\n                            var mid = (low + high) >>> 1,\n                                substr = line.slice(0, mid + 1),\n                                substrWidth = this._getTextWidth(substr);\n                            if (substrWidth <= maxWidth) {\n                                low = mid + 1;\n                                match = substr;\n                                matchWidth = substrWidth;\n                            } else {\n                                high = mid;\n                            }\n                        }\n                        /*\n                         * 'low' is now the index of the substring end\n                         * 'match' is the substring\n                         * 'matchWidth' is the substring width in px\n                         */\n                        if (match) {\n                            // a fitting substring was found\n                            if (wrapAtWord) {\n                                // try to find a space or dash where wrapping could be done\n                                var wrapIndex = Math.max(match.lastIndexOf(SPACE),\n                                                          match.lastIndexOf(DASH)) + 1;\n                                if (wrapIndex > 0) {\n                                    // re-cut the substring found at the space/dash position\n                                    low = wrapIndex;\n                                    match = match.slice(0, low);\n                                    matchWidth = this._getTextWidth(match);\n                                }\n                            }\n                            this._addTextLine(match, matchWidth);\n                            textWidth = Math.max(textWidth, matchWidth);\n                            currentHeightPx += lineHeightPx;\n                            if (!shouldWrap ||\n                                (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                                /*\n                                 * stop wrapping if wrapping is disabled or if adding\n                                 * one more line would overflow the fixed height\n                                 */\n                                break;\n                            }\n                            line = line.slice(low);\n                            if (line.length > 0) {\n                                // Check if the remaining text would fit on one line\n                                lineWidth = this._getTextWidth(line);\n                                if (lineWidth <= maxWidth) {\n                                    // if it does, add the line and break out of the loop\n                                    this._addTextLine(line, lineWidth);\n                                    currentHeightPx += lineHeightPx;\n                                    textWidth = Math.max(textWidth, lineWidth);\n                                    break;\n                                }\n                            }\n                        } else {\n                            // not even one character could fit in the element, abort\n                            break;\n                        }\n                    }\n                } else {\n                    // element width is automatically adjusted to max line width\n                    this._addTextLine(line, lineWidth);\n                    currentHeightPx += lineHeightPx;\n                    textWidth = Math.max(textWidth, lineWidth);\n                }\n                // if element height is fixed, abort if adding one more line would overflow\n                if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                    break;\n                }\n            }\n            dummyContext.restore();\n            this.textHeight = fontSize;\n            this.textWidth = textWidth;\n        }\n    };\n    Konva.Util.extend(Konva.Text, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Text, 'fontFamily', 'Arial');\n\n    /**\n     * get/set font family\n     * @name fontFamily\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} fontFamily\n     * @returns {String}\n     * @example\n     * // get font family\n     * var fontFamily = text.fontFamily();\n     *\n     * // set font family\n     * text.fontFamily('Arial');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'fontSize', 12);\n\n    /**\n     * get/set font size in pixels\n     * @name fontSize\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {Number} fontSize\n     * @returns {Number}\n     * @example\n     * // get font size\n     * var fontSize = text.fontSize();\n     *\n     * // set font size to 22px\n     * text.fontSize(22);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'fontStyle', NORMAL);\n\n    /**\n     * set font style.  Can be 'normal', 'italic', or 'bold'.  'normal' is the default.\n     * @name fontStyle\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} fontStyle\n     * @returns {String}\n     * @example\n     * // get font style\n     * var fontStyle = text.fontStyle();\n     *\n     * // set font style\n     * text.fontStyle('bold');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'fontVariant', NORMAL);\n\n    /**\n     * set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.\n     * @name fontVariant\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} fontVariant\n     * @returns {String}\n     * @example\n     * // get font variant\n     * var fontVariant = text.fontVariant();\n     *\n     * // set font variant\n     * text.fontVariant('small-caps');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'padding', 0);\n\n    /**\n     * set padding\n     * @name padding\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {Number} padding\n     * @returns {Number}\n     * @example\n     * // get padding\n     * var padding = text.padding();\n     *\n     * // set padding to 10 pixels\n     * text.padding(10);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'align', LEFT);\n\n    /**\n     * get/set horizontal align of text.  Can be 'left', 'center', or 'right'\n     * @name align\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} align\n     * @returns {String}\n     * @example\n     * // get text align\n     * var align = text.align();\n     *\n     * // center text\n     * text.align('center');\n     *\n     * // align text to right\n     * text.align('right');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'lineHeight', 1);\n\n    /**\n     * get/set line height.  The default is 1.\n     * @name lineHeight\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {Number} lineHeight\n     * @returns {Number}\n     * @example\n     * // get line height\n     * var lineHeight = text.lineHeight();\n     *\n     * // set the line height\n     * text.lineHeight(2);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Text, 'wrap', WORD);\n\n    /**\n     * get/set wrap.  Can be word, char, or none. Default is word.\n     * @name wrap\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} wrap\n     * @returns {String}\n     * @example\n     * // get wrap\n     * var wrap = text.wrap();\n     *\n     * // set wrap\n     * text.wrap('word');\n     */\n\n    Konva.Factory.addGetter(Konva.Text, 'text', EMPTY_STRING);\n    Konva.Factory.addOverloadedGetterSetter(Konva.Text, 'text');\n\n    /**\n     * get/set text\n     * @name getText\n     * @method\n     * @memberof Konva.Text.prototype\n     * @param {String} text\n     * @returns {String}\n     * @example\n     * // get text\n     * var text = text.text();\n     *\n     * // set text\n     * text.text('Hello world!');\n     */\n\n    Konva.Collection.mapMethods(Konva.Text);\n})();\n\n(function () {\n    'use strict';\n    /**\n     * Line constructor.&nbsp; Lines are defined by an array of points and\n     *  a tension\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Array} config.points\n     * @param {Number} [config.tension] Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.\n     *   The default is 0\n     * @param {Boolean} [config.closed] defines whether or not the line shape is closed, creating a polygon or blob\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var line = new Konva.Line({\n     *   x: 100,\n     *   y: 50,\n     *   points: [73, 70, 340, 23, 450, 60, 500, 20],\n     *   stroke: 'red',\n     *   tension: 1\n     * });\n     */\n    Konva.Line = function (config) {\n        this.___init(config);\n    };\n\n    Konva.Line.prototype = {\n        ___init: function (config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Line';\n\n            this.on('pointsChange.konva tensionChange.konva closedChange.konva', function () {\n                this._clearCache('tensionPoints');\n            });\n\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function (context) {\n            var points = this.getPoints(),\n                length = points.length,\n                tension = this.getTension(),\n                closed = this.getClosed(),\n                tp, len, n;\n\n            if (!length) {\n                return;\n            }\n\n            context.beginPath();\n            context.moveTo(points[0], points[1]);\n\n            // tension\n            if (tension !== 0 && length > 4) {\n                tp = this.getTensionPoints();\n                len = tp.length;\n                n = closed ? 0 : 4;\n\n                if (!closed) {\n                    context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);\n                }\n\n                while (n < len - 2) {\n                    context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);\n                }\n\n                if (!closed) {\n                    context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);\n                }\n            }\n            // no tension\n            else {\n                for (n = 2; n < length; n += 2) {\n                    context.lineTo(points[n], points[n + 1]);\n                }\n            }\n\n            // closed e.g. polygons and blobs\n            if (closed) {\n                context.closePath();\n                context.fillStrokeShape(this);\n            }\n            // open e.g. lines and splines\n            else {\n                context.strokeShape(this);\n            }\n        },\n        getTensionPoints: function () {\n            return this._getCache('tensionPoints', this._getTensionPoints);\n        },\n        _getTensionPoints: function () {\n            if (this.getClosed()) {\n                return this._getTensionPointsClosed();\n            } else {\n                return Konva.Util._expandPoints(this.getPoints(), this.getTension());\n            }\n        },\n        _getTensionPointsClosed: function () {\n            var p = this.getPoints(),\n                len = p.length,\n                tension = this.getTension(),\n                util = Konva.Util,\n                firstControlPoints = util._getControlPoints(\n                    p[len - 2],\n                    p[len - 1],\n                    p[0],\n                    p[1],\n                    p[2],\n                    p[3],\n                    tension\n                ),\n                lastControlPoints = util._getControlPoints(\n                    p[len - 4],\n                    p[len - 3],\n                    p[len - 2],\n                    p[len - 1],\n                    p[0],\n                    p[1],\n                    tension\n                ),\n                middle = Konva.Util._expandPoints(p, tension),\n                tp = [\n                    firstControlPoints[2],\n                    firstControlPoints[3]\n                ]\n                .concat(middle)\n                .concat([\n                    lastControlPoints[0],\n                    lastControlPoints[1],\n                    p[len - 2],\n                    p[len - 1],\n                    lastControlPoints[2],\n                    lastControlPoints[3],\n                    firstControlPoints[0],\n                    firstControlPoints[1],\n                    p[0],\n                    p[1]\n                ]);\n\n            return tp;\n        },\n        getWidth: function () {\n            return this.getSelfRect().width;\n        },\n        getHeight: function () {\n            return this.getSelfRect().height;\n        },\n        // overload size detection\n        getSelfRect: function () {\n            var points;\n            if (this.getTension() !== 0) {\n                points = this._getTensionPoints();\n            } else {\n                points = this.getPoints();\n            }\n            var minX = points[0];\n            var maxX = points[0];\n            var minY = points[1];\n            var maxY = points[1];\n            var x, y;\n            for (var i = 0; i < points.length / 2; i++) {\n                x = points[i * 2];\n                y = points[i * 2 + 1];\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n            return {\n                x: Math.round(minX),\n                y: Math.round(minY),\n                width: Math.round(maxX - minX),\n                height: Math.round(maxY - minY)\n            };\n        }\n    };\n    Konva.Util.extend(Konva.Line, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Line, 'closed', false);\n\n    /**\n     * get/set closed flag.  The default is false\n     * @name closed\n     * @method\n     * @memberof Konva.Line.prototype\n     * @param {Boolean} closed\n     * @returns {Boolean}\n     * @example\n     * // get closed flag\n     * var closed = line.closed();\n     *\n     * // close the shape\n     * line.closed(true);\n     *\n     * // open the shape\n     * line.closed(false);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Line, 'tension', 0);\n\n    /**\n     * get/set tension\n     * @name tension\n     * @method\n     * @memberof Konva.Line.prototype\n     * @param {Number} Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.\n     *   The default is 0\n     * @returns {Number}\n     * @example\n     * // get tension\n     * var tension = line.tension();\n     *\n     * // set tension\n     * line.tension(3);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Line, 'points', []);\n    /**\n     * get/set points array\n     * @name points\n     * @method\n     * @memberof Konva.Line.prototype\n     * @param {Array} points\n     * @returns {Array}\n     * @example\n     * // get points\n     * var points = line.points();\n     *\n     * // set points\n     * line.points([10, 20, 30, 40, 50, 60]);\n     *\n     * // push a new point\n     * line.points(line.points().concat([70, 80]));\n     */\n\n    Konva.Collection.mapMethods(Konva.Line);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Sprite constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {String} config.animation animation key\n     * @param {Object} config.animations animation map\n     * @param {Integer} [config.frameIndex] animation frame index\n     * @param {Image} config.image image object\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var imageObj = new Image();\n     * imageObj.onload = function() {\n     *   var sprite = new Konva.Sprite({\n     *     x: 200,\n     *     y: 100,\n     *     image: imageObj,\n     *     animation: 'standing',\n     *     animations: {\n     *       standing: [\n     *         // x, y, width, height (6 frames)\n     *         0, 0, 49, 109,\n     *         52, 0, 49, 109,\n     *         105, 0, 49, 109,\n     *         158, 0, 49, 109,\n     *         210, 0, 49, 109,\n     *         262, 0, 49, 109\n     *       ],\n     *       kicking: [\n     *         // x, y, width, height (6 frames)\n     *         0, 109, 45, 98,\n     *         45, 109, 45, 98,\n     *         95, 109, 63, 98,\n     *         156, 109, 70, 98,\n     *         229, 109, 60, 98,\n     *         287, 109, 41, 98\n     *       ]\n     *     },\n     *     frameRate: 7,\n     *     frameIndex: 0\n     *   });\n     * };\n     * imageObj.src = '/path/to/image.jpg'\n     */\n    Konva.Sprite = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Sprite.prototype = {\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Sprite';\n\n            this._updated = true;\n            var that = this;\n            this.anim = new Konva.Animation(function() {\n                // if we don't need to redraw layer we should return false\n                var updated = that._updated;\n                that._updated = false;\n                return updated;\n            });\n            this.on('animationChange.konva', function() {\n                // reset index when animation changes\n                this.frameIndex(0);\n            });\n            this.on('frameIndexChange.konva', function() {\n                this._updated = true;\n            });\n            // smooth change for frameRate\n            this.on('frameRateChange.konva', function() {\n                if (!this.anim.isRunning()) {\n                    return;\n                }\n                clearInterval(this.interval);\n                this._setInterval();\n            });\n\n            this.sceneFunc(this._sceneFunc);\n            this.hitFunc(this._hitFunc);\n        },\n        _sceneFunc: function(context) {\n            var anim = this.getAnimation(),\n                index = this.frameIndex(),\n                ix4 = index * 4,\n                set = this.getAnimations()[anim],\n                offsets = this.frameOffsets(),\n                x = set[ix4 + 0],\n                y = set[ix4 + 1],\n                width = set[ix4 + 2],\n                height = set[ix4 + 3],\n                image = this.getImage();\n\n            if (this.hasFill() || this.hasStroke()) {\n                context.beginPath();\n                context.rect(0, 0, width, height);\n                context.closePath();\n                context.fillStrokeShape(this);\n            }\n\n            if(image) {\n                if (offsets) {\n                    var offset = offsets[anim],\n                    ix2 = index * 2;\n                    context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n                } else {\n                    context.drawImage(image, x, y, width, height, 0, 0, width, height);\n                }\n            }\n        },\n        _hitFunc: function(context) {\n            var anim = this.getAnimation(),\n                index = this.frameIndex(),\n                ix4 = index * 4,\n                set = this.getAnimations()[anim],\n                offsets = this.frameOffsets(),\n                width = set[ix4 + 2],\n                height = set[ix4 + 3];\n\n            context.beginPath();\n            if (offsets) {\n                var offset = offsets[anim];\n                var ix2 = index * 2;\n                context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n            } else {\n                context.rect(0, 0, width, height);\n            }\n            context.closePath();\n            context.fillShape(this);\n        },\n        _useBufferCanvas: function() {\n            return (this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke();\n        },\n        _setInterval: function() {\n            var that = this;\n            this.interval = setInterval(function() {\n                that._updateIndex();\n            }, 1000 / this.getFrameRate());\n        },\n        /**\n         * start sprite animation\n         * @method\n         * @memberof Konva.Sprite.prototype\n         */\n        start: function() {\n            var layer = this.getLayer();\n\n            /*\n             * animation object has no executable function because\n             *  the updates are done with a fixed FPS with the setInterval\n             *  below.  The anim object only needs the layer reference for\n             *  redraw\n             */\n            this.anim.setLayers(layer);\n            this._setInterval();\n            this.anim.start();\n        },\n        /**\n         * stop sprite animation\n         * @method\n         * @memberof Konva.Sprite.prototype\n         */\n        stop: function() {\n            this.anim.stop();\n            clearInterval(this.interval);\n        },\n        /**\n         * determine if animation of sprite is running or not.  returns true or false\n         * @method\n         * @memberof Konva.Animation.prototype\n         * @returns {Boolean}\n         */\n        isRunning: function() {\n            return this.anim.isRunning();\n        },\n        _updateIndex: function() {\n            var index = this.frameIndex(),\n                animation = this.getAnimation(),\n                animations = this.getAnimations(),\n                anim = animations[animation],\n                len = anim.length / 4;\n\n            if(index < len - 1) {\n                this.frameIndex(index + 1);\n            }\n            else {\n                this.frameIndex(0);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.Sprite, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'animation');\n\n    /**\n     * get/set animation key\n     * @name animation\n     * @method\n     * @memberof Konva.Sprite.prototype\n     * @param {String} anim animation key\n     * @returns {String}\n     * @example\n     * // get animation key\n     * var animation = sprite.animation();\n     *\n     * // set animation key\n     * sprite.animation('kicking');\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'animations');\n\n    /**\n     * get/set animations map\n     * @name animations\n     * @method\n     * @memberof Konva.Sprite.prototype\n     * @param {Object} animations\n     * @returns {Object}\n     * @example\n     * // get animations map\n     * var animations = sprite.animations();\n     *\n     * // set animations map\n     * sprite.animations({\n     *   standing: [\n     *     // x, y, width, height (6 frames)\n     *     0, 0, 49, 109,\n     *     52, 0, 49, 109,\n     *     105, 0, 49, 109,\n     *     158, 0, 49, 109,\n     *     210, 0, 49, 109,\n     *     262, 0, 49, 109\n     *   ],\n     *   kicking: [\n     *     // x, y, width, height (6 frames)\n     *     0, 109, 45, 98,\n     *     45, 109, 45, 98,\n     *     95, 109, 63, 98,\n     *     156, 109, 70, 98,\n     *     229, 109, 60, 98,\n     *     287, 109, 41, 98\n     *   ]\n     * });\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameOffsets');\n\n    /**\n    * get/set offsets map\n    * @name offsets\n    * @method\n    * @memberof Konva.Sprite.prototype\n    * @param {Object} offsets\n    * @returns {Object}\n    * @example\n    * // get offsets map\n    * var offsets = sprite.offsets();\n    *\n    * // set offsets map\n    * sprite.offsets({\n    *   standing: [\n    *     // x, y (6 frames)\n    *     0, 0,\n    *     0, 0,\n    *     5, 0,\n    *     0, 0,\n    *     0, 3,\n    *     2, 0\n    *   ],\n    *   kicking: [\n    *     // x, y (6 frames)\n    *     0, 5,\n    *     5, 0,\n    *     10, 0,\n    *     0, 0,\n    *     2, 1,\n    *     0, 0\n    *   ]\n    * });\n    */\n\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'image');\n\n    /**\n     * get/set image\n     * @name image\n     * @method\n     * @memberof Konva.Sprite.prototype\n     * @param {Image} image\n     * @returns {Image}\n     * @example\n     * // get image\n     * var image = sprite.image();\n     *\n     * // set image\n     * sprite.image(imageObj);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameIndex', 0);\n\n    /**\n     * set/set animation frame index\n     * @name frameIndex\n     * @method\n     * @memberof Konva.Sprite.prototype\n     * @param {Integer} frameIndex\n     * @returns {Integer}\n     * @example\n     * // get animation frame index\n     * var frameIndex = sprite.frameIndex();\n     *\n     * // set animation frame index\n     * sprite.frameIndex(3);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Sprite, 'frameRate', 17);\n\n    /**\n     * get/set frame rate in frames per second.  Increase this number to make the sprite\n     *  animation run faster, and decrease the number to make the sprite animation run slower\n     *  The default is 17 frames per second\n     * @name frameRate\n     * @method\n     * @memberof Konva.Sprite.prototype\n     * @param {Integer} frameRate\n     * @returns {Integer}\n     * @example\n     * // get frame rate\n     * var frameRate = sprite.frameRate();\n     *\n     * // set frame rate to 2 frames per second\n     * sprite.frameRate(2);\n     */\n\n    Konva.Factory.backCompat(Konva.Sprite, {\n        index: 'frameIndex',\n        getIndex: 'getFrameIndex',\n        setIndex: 'setFrameIndex'\n    });\n\n    Konva.Collection.mapMethods(Konva.Sprite);\n})();\n\n/*eslint-disable  no-shadow, max-len, max-depth */\n(function () {\n    'use strict';\n    /**\n     * Path constructor.\n     * @author Jason Follas\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {String} config.data SVG data string\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var path = new Konva.Path({\n     *   x: 240,\n     *   y: 40,\n     *   data: 'M12.582,9.551C3.251,16.237,0.921,29.021,7.08,38.564l-2.36,1.689l4.893,2.262l4.893,2.262l-0.568-5.36l-0.567-5.359l-2.365,1.694c-4.657-7.375-2.83-17.185,4.352-22.33c7.451-5.338,17.817-3.625,23.156,3.824c5.337,7.449,3.625,17.813-3.821,23.152l2.857,3.988c9.617-6.893,11.827-20.277,4.935-29.896C35.591,4.87,22.204,2.658,12.582,9.551z',\n     *   fill: 'green',\n     *   scale: 2\n     * });\n     */\n    Konva.Path = function (config) {\n        this.___init(config);\n    };\n\n    Konva.Path.prototype = {\n        ___init: function (config) {\n            this.dataArray = [];\n            var that = this;\n\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Path';\n\n            this.dataArray = Konva.Path.parsePathData(this.getData());\n            this.on('dataChange.konva', function () {\n                that.dataArray = Konva.Path.parsePathData(this.getData());\n            });\n\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var ca = this.dataArray;\n\n            // context position\n            context.beginPath();\n            for (var n = 0; n < ca.length; n++) {\n                var c = ca[n].command;\n                var p = ca[n].points;\n                switch (c) {\n                    case 'L':\n                        context.lineTo(p[0], p[1]);\n                        break;\n                    case 'M':\n                        context.moveTo(p[0], p[1]);\n                        break;\n                    case 'C':\n                        context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n                        break;\n                    case 'Q':\n                        context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n                        break;\n                    case 'A':\n                        var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\n\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n\n                        context.translate(cx, cy);\n                        context.rotate(psi);\n                        context.scale(scaleX, scaleY);\n                        context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n                        context.scale(1 / scaleX, 1 / scaleY);\n                        context.rotate(-psi);\n                        context.translate(-cx, -cy);\n\n                        break;\n                    case 'z':\n                        context.closePath();\n                        break;\n                }\n            }\n\n            context.fillStrokeShape(this);\n        },\n        getSelfRect: function() {\n            var points = [];\n            this.dataArray.forEach(function(data) {\n                points = points.concat(data.points);\n            });\n            var minX = points[0];\n            var maxX = points[0];\n            var minY = points[1];\n            var maxY = points[1];\n            var x, y;\n            for (var i = 0; i < points.length / 2; i++) {\n                x = points[i * 2]; y = points[i * 2 + 1];\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n            return {\n                x: Math.round(minX),\n                y: Math.round(minY),\n                width: Math.round(maxX - minX),\n                height: Math.round(maxY - minY)\n            };\n        }\n    };\n    Konva.Util.extend(Konva.Path, Konva.Shape);\n\n    Konva.Path.getLineLength = function(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    };\n    Konva.Path.getPointOnLine = function(dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n        if(fromX === undefined) {\n            fromX = P1x;\n        }\n        if(fromY === undefined) {\n            fromY = P1y;\n        }\n\n        var m = (P2y - P1y) / ((P2x - P1x) + 0.00000001);\n        var run = Math.sqrt(dist * dist / (1 + m * m));\n        if(P2x < P1x) {\n            run *= -1;\n        }\n        var rise = m * run;\n        var pt;\n\n        if (P2x === P1x) { // vertical line\n            pt = {\n                x: fromX,\n                y: fromY + rise\n            };\n        } else if((fromY - P1y) / ((fromX - P1x) + 0.00000001) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise\n            };\n        }\n        else {\n            var ix, iy;\n\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\n            if(len < 0.00000001) {\n                return undefined;\n            }\n            var u = (((fromX - P1x) * (P2x - P1x)) + ((fromY - P1y) * (P2y - P1y)));\n            u = u / (len * len);\n            ix = P1x + u * (P2x - P1x);\n            iy = P1y + u * (P2y - P1y);\n\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt(pRun * pRun / (1 + m * m));\n            if(P2x < P1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise\n            };\n        }\n\n        return pt;\n    };\n\n    Konva.Path.getPointOnCubicBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n        function CB1(t) {\n            return t * t * t;\n        }\n        function CB2(t) {\n            return 3 * t * t * (1 - t);\n        }\n        function CB3(t) {\n            return 3 * t * (1 - t) * (1 - t);\n        }\n        function CB4(t) {\n            return (1 - t) * (1 - t) * (1 - t);\n        }\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Konva.Path.getPointOnQuadraticBezier = function(pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n        function QB1(t) {\n            return t * t;\n        }\n        function QB2(t) {\n            return 2 * t * (1 - t);\n        }\n        function QB3(t) {\n            return (1 - t) * (1 - t);\n        }\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Konva.Path.getPointOnEllipticalArc = function(cx, cy, rx, ry, theta, psi) {\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\n        var pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta)\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n        };\n    };\n    /*\n     * get parsed data array from the data\n     *  string.  V, v, H, h, and l data are converted to\n     *  L data for the purpose of high performance Path\n     *  rendering\n     */\n    Konva.Path.parsePathData = function(data) {\n        // Path Data Segment must begin with a moveTo\n        //m (x y)+  Relative moveTo (subsequent points are treated as lineTo)\n        //M (x y)+  Absolute moveTo (subsequent points are treated as lineTo)\n        //l (x y)+  Relative lineTo\n        //L (x y)+  Absolute LineTo\n        //h (x)+    Relative horizontal lineTo\n        //H (x)+    Absolute horizontal lineTo\n        //v (y)+    Relative vertical lineTo\n        //V (y)+    Absolute vertical lineTo\n        //z (closepath)\n        //Z (closepath)\n        //c (x1 y1 x2 y2 x y)+ Relative Bezier curve\n        //C (x1 y1 x2 y2 x y)+ Absolute Bezier curve\n        //q (x1 y1 x y)+       Relative Quadratic Bezier\n        //Q (x1 y1 x y)+       Absolute Quadratic Bezier\n        //t (x y)+    Shorthand/Smooth Relative Quadratic Bezier\n        //T (x y)+    Shorthand/Smooth Absolute Quadratic Bezier\n        //s (x2 y2 x y)+       Shorthand/Smooth Relative Bezier curve\n        //S (x2 y2 x y)+       Shorthand/Smooth Absolute Bezier curve\n        //a (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+     Relative Elliptical Arc\n        //A (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+  Absolute Elliptical Arc\n\n        // return early if data is not defined\n        if(!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data;\n\n        // command chars\n        var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];\n        // convert white spaces to commas\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\n        // create pipes so that we can split the data\n        for(var n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n        // create array\n        var arr = cs.split('|');\n        var ca = [];\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n        for( n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            str = str.slice(1);\n            // remove ,- for consistency\n            str = str.replace(new RegExp(',-', 'g'), '-');\n            // add commas so that it's easy to split\n            str = str.replace(new RegExp('-', 'g'), ',-');\n            str = str.replace(new RegExp('e,-', 'g'), 'e-');\n            var p = str.split(',');\n            if(p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n            // convert strings to floats\n            for(var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while(p.length > 0) {\n                if(isNaN(p[0])) {// case for a trailing comma before next command\n                    break;\n                }\n\n                var cmd = null;\n                var points = [];\n                var startX = cpx, startY = cpy;\n                // Move var from within the switch to up here (jshint)\n                var prevCmd, ctlPtx, ctlPty;     // Ss, Tt\n                var rx, ry, psi, fa, fs, x1, y1; // Aa\n\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n\n                    // Note: Keep the lineTo's above the moveTo's in this switch\n                    case 'l':\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n\n                    // Note: lineTo handlers need to be above this point\n                    case 'm':\n                        var dx = p.shift();\n                        var dy = p.shift();\n                        cpx += dx;\n                        cpy += dy;\n                        cmd = 'M';\n                        // After closing the path move the current position\n                        // to the the first point of the path (if any).\n                        if(ca.length > 2 && ca[ca.length - 1].command === 'z'){\n                            for(var idx = ca.length - 2; idx >= 0; idx--){\n                                if(ca[idx].command === 'M'){\n                                    cpx = ca[idx].points[0] + dx;\n                                    cpy = ca[idx].points[1] + dy;\n                                    break;\n                                }\n                            }\n                        }\n                        points.push(cpx, cpy);\n                        c = 'l';\n                        // subsequent points are treated as relative lineTo\n                        break;\n                    case 'M':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'M';\n                        points.push(cpx, cpy);\n                        c = 'L';\n                        // subsequent points are treated as absolute lineTo\n                        break;\n\n                    case 'h':\n                        cpx += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'C':\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'c':\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if(prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if(prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'Q':\n                        points.push(p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'q':\n                        points.push(cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if(prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if(prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                    case 'a':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy; cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                }\n\n                ca.push({\n                    command: cmd || c,\n                    points: points,\n                    start: {\n                        x: startX,\n                        y: startY\n                    },\n                    pathLength: this.calcLength(startX, startY, cmd || c, points)\n                });\n            }\n\n            if(c === 'z' || c === 'Z') {\n                ca.push({\n                    command: 'z',\n                    points: [],\n                    start: undefined,\n                    pathLength: 0\n                });\n            }\n        }\n\n        return ca;\n    };\n    Konva.Path.calcLength = function(x, y, cmd, points) {\n        var len, p1, p2, t;\n        var path = Konva.Path;\n\n        switch (cmd) {\n            case 'L':\n                return path.getLineLength(x, y, points[0], points[1]);\n            case 'C':\n                // Approximates by breaking curve into 100 line segments\n                len = 0.0;\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for( t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'Q':\n                // Approximates by breaking curve into 100 line segments\n                len = 0.0;\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for( t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'A':\n                // Approximates by breaking curve into line segments\n                len = 0.0;\n                var start = points[4];\n                // 4 = theta\n                var dTheta = points[5];\n                // 5 = dTheta\n                var end = points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                // 1 degree resolution\n                if(Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                if(dTheta < 0) {// clockwise\n                    for( t = start - inc; t > end; t -= inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                else {// counter-clockwise\n                    for( t = start + inc; t < end; t += inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n\n                return len;\n        }\n\n        return 0;\n    };\n    Konva.Path.convertEndpointToCenterParameterization = function(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n        // Derived from: http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n        var psi = psiDeg * (Math.PI / 180.0);\n        var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if(lambda > 1) {\n            rx *= Math.sqrt(lambda);\n            ry *= Math.sqrt(lambda);\n        }\n\n        var f = Math.sqrt((((rx * rx) * (ry * ry)) - ((rx * rx) * (yp * yp)) - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp) + (ry * ry) * (xp * xp)));\n\n        if(fa === fs) {\n            f *= -1;\n        }\n        if(isNaN(f)) {\n            f = 0;\n        }\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n\n        var vMag = function(v) {\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n        };\n        var vRatio = function(u, v) {\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n        };\n        var vAngle = function(u, v) {\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n        };\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n        var dTheta = vAngle(u, v);\n\n        if(vRatio(u, v) <= -1) {\n            dTheta = Math.PI;\n        }\n        if(vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if(fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * Math.PI;\n        }\n        if(fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * Math.PI;\n        }\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n    };\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Path, 'data');\n\n    /**\n     * set SVG path data string.  This method\n     *  also automatically parses the data string\n     *  into a data array.  Currently supported SVG data:\n     *  M, m, L, l, H, h, V, v, Q, q, T, t, C, c, S, s, A, a, Z, z\n     * @name setData\n     * @method\n     * @memberof Konva.Path.prototype\n     * @param {String} SVG path command string\n     */\n\n    /**\n     * get SVG path data string\n     * @name getData\n     * @method\n     * @memberof Konva.Path.prototype\n     */\n\n    Konva.Collection.mapMethods(Konva.Path);\n})();\n\n(function() {\n    'use strict';\n    var EMPTY_STRING = '',\n        //CALIBRI = 'Calibri',\n        NORMAL = 'normal';\n\n    /**\n     * Path constructor.\n     * @author Jason Follas\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {String} [config.fontFamily] default is Calibri\n     * @param {Number} [config.fontSize] default is 12\n     * @param {String} [config.fontStyle] can be normal, bold, or italic.  Default is normal\n     * @param {String} [config.fontVariant] can be normal or small-caps.  Default is normal\n     * @param {String} config.text\n     * @param {String} config.data SVG data string\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var textpath = new Konva.TextPath({\n     *   x: 100,\n     *   y: 50,\n     *   fill: '#333',\n     *   fontSize: '24',\n     *   fontFamily: 'Arial',\n     *   text: 'All the world\\'s a stage, and all the men and women merely players.',\n     *   data: 'M10,10 C0,0 10,150 100,100 S300,150 400,50'\n     * });\n     */\n    Konva.TextPath = function(config) {\n        this.___init(config);\n    };\n\n    function _fillFunc(context) {\n        context.fillText(this.partialText, 0, 0);\n    }\n    function _strokeFunc(context) {\n        context.strokeText(this.partialText, 0, 0);\n    }\n\n    Konva.TextPath.prototype = {\n        ___init: function(config) {\n            var that = this;\n            this.dummyCanvas = Konva.Util.createCanvasElement();\n            this.dataArray = [];\n\n            // call super constructor\n            Konva.Shape.call(this, config);\n\n            // overrides\n            // TODO: shouldn't this be on the prototype?\n            this._fillFunc = _fillFunc;\n            this._strokeFunc = _strokeFunc;\n            this._fillFuncHit = _fillFunc;\n            this._strokeFuncHit = _strokeFunc;\n\n            this.className = 'TextPath';\n\n            this.dataArray = Konva.Path.parsePathData(this.attrs.data);\n            this.on('dataChange.konva', function() {\n                that.dataArray = Konva.Path.parsePathData(this.attrs.data);\n                that._setTextData();\n            });\n\n            // update text data for certain attr changes\n            this.on('textChange.konva letterSpacingChange.konva', that._setTextData);\n            that._setTextData();\n            this.sceneFunc(this._sceneFunc);\n            this.hitFunc(this._hitFunc);\n        },\n        _sceneFunc: function(context) {\n            context.setAttr('font', this._getContextFont());\n            context.setAttr(this.getTextBaseline(), 'middle');\n            context.setAttr('textAlign', 'left');\n            context.save();\n\n            var glyphInfo = this.glyphInfo;\n            for(var i = 0; i < glyphInfo.length; i++) {\n                context.save();\n\n                var p0 = glyphInfo[i].p0;\n\n                context.translate(p0.x, p0.y);\n                context.rotate(glyphInfo[i].rotation);\n                this.partialText = glyphInfo[i].text;\n\n                context.fillStrokeShape(this);\n                context.restore();\n\n                //// To assist with debugging visually, uncomment following\n                // context.beginPath();\n                // if (i % 2)\n                // context.strokeStyle = 'cyan';\n                // else\n                // context.strokeStyle = 'green';\n                // var p1 = glyphInfo[i].p1;\n                // context.moveTo(p0.x, p0.y);\n                // context.lineTo(p1.x, p1.y);\n                // context.stroke();\n            }\n            context.restore();\n        },\n        _hitFunc: function(context) {\n          context.beginPath();\n\n          var glyphInfo = this.glyphInfo;\n          if (glyphInfo.length >= 1) {\n            var p0 = glyphInfo[0].p0;\n            context.moveTo(p0.x, p0.y);\n          }\n          for(var i = 0; i < glyphInfo.length; i++) {\n              var p1 = glyphInfo[i].p1;\n              context.lineTo(p1.x, p1.y);\n          }\n          context.setAttr('lineWidth', this.getFontSize());\n          context.setAttr('strokeStyle', this.colorKey);\n          context.stroke();\n        },\n        /**\n         * get text width in pixels\n         * @method\n         * @memberof Konva.TextPath.prototype\n         */\n        getTextWidth: function() {\n            return this.textWidth;\n        },\n        /**\n         * get text height in pixels\n         * @method\n         * @memberof Konva.TextPath.prototype\n         */\n        getTextHeight: function() {\n            return this.textHeight;\n        },\n        /**\n         * set text\n         * @method\n         * @memberof Konva.TextPath.prototype\n         * @param {String} text\n         */\n        setText: function(text) {\n            Konva.Text.prototype.setText.call(this, text);\n        },\n        _getTextSize: function(text) {\n            var dummyCanvas = this.dummyCanvas;\n            var _context = dummyCanvas.getContext('2d');\n\n            _context.save();\n\n            _context.font = this._getContextFont();\n            var metrics = _context.measureText(text);\n\n            _context.restore();\n\n            return {\n                width: metrics.width,\n                height: parseInt(this.attrs.fontSize, 10)\n            };\n        },\n        _setTextData: function() {\n\n            var that = this;\n            var size = this._getTextSize(this.attrs.text);\n            var letterSpacing = this.getLetterSpacing();\n\n            this.textWidth = size.width;\n            this.textHeight = size.height;\n\n            this.glyphInfo = [];\n\n            var charArr = this.getText().split('');\n\n            var p0, p1, pathCmd;\n\n            var pIndex = -1;\n            var currentT = 0;\n\n            var getNextPathSegment = function() {\n                currentT = 0;\n                var pathData = that.dataArray;\n\n                for(var j = pIndex + 1; j < pathData.length; j++) {\n                    if(pathData[j].pathLength > 0) {\n                        pIndex = j;\n\n                        return pathData[j];\n                    }\n                    else if(pathData[j].command === 'M') {\n                        p0 = {\n                            x: pathData[j].points[0],\n                            y: pathData[j].points[1]\n                        };\n                    }\n                }\n\n                return {};\n            };\n            var findSegmentToFitCharacter = function(c) {\n\n                var glyphWidth = that._getTextSize(c).width + letterSpacing;\n\n                var currLen = 0;\n                var attempts = 0;\n\n                p1 = undefined;\n                while(Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 && attempts < 25) {\n                    attempts++;\n                    var cumulativePathLength = currLen;\n                    while(pathCmd === undefined) {\n                        pathCmd = getNextPathSegment();\n\n                        if(pathCmd && cumulativePathLength + pathCmd.pathLength < glyphWidth) {\n                            cumulativePathLength += pathCmd.pathLength;\n                            pathCmd = undefined;\n                        }\n                    }\n\n                    if(pathCmd === {} || p0 === undefined) {\n                        return undefined;\n                    }\n\n                    var needNewSegment = false;\n\n                    switch (pathCmd.command) {\n                        case 'L':\n                            if(Konva.Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {\n                                p1 = Konva.Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);\n                            }\n                            else {\n                                pathCmd = undefined;\n                            }\n                            break;\n                        case 'A':\n\n                            var start = pathCmd.points[4];\n                            // 4 = theta\n                            var dTheta = pathCmd.points[5];\n                            // 5 = dTheta\n                            var end = pathCmd.points[4] + dTheta;\n\n                            if(currentT === 0){\n                                currentT = start + 0.00000001;\n                            }\n                            // Just in case start is 0\n                            else if(glyphWidth > currLen) {\n                                currentT += (Math.PI / 180.0) * dTheta / Math.abs(dTheta);\n                            }\n                            else {\n                                currentT -= Math.PI / 360.0 * dTheta / Math.abs(dTheta);\n                            }\n\n                            // Credit for bug fix: @therth https://github.com/ericdrowell/KonvaJS/issues/249\n                            // Old code failed to render text along arc of this path: \"M 50 50 a 150 50 0 0 1 250 50 l 50 0\"\n                            if(dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {\n                                currentT = end;\n                                needNewSegment = true;\n                            }\n                            p1 = Konva.Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);\n                            break;\n                        case 'C':\n                            if(currentT === 0) {\n                                if(glyphWidth > pathCmd.pathLength) {\n                                    currentT = 0.00000001;\n                                }\n                                else {\n                                    currentT = glyphWidth / pathCmd.pathLength;\n                                }\n                            }\n                            else if(glyphWidth > currLen) {\n                                currentT += (glyphWidth - currLen) / pathCmd.pathLength;\n                            }\n                            else {\n                                currentT -= (currLen - glyphWidth) / pathCmd.pathLength;\n                            }\n\n                            if(currentT > 1.0) {\n                                currentT = 1.0;\n                                needNewSegment = true;\n                            }\n                            p1 = Konva.Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);\n                            break;\n                        case 'Q':\n                            if(currentT === 0) {\n                                currentT = glyphWidth / pathCmd.pathLength;\n                            }\n                            else if(glyphWidth > currLen) {\n                                currentT += (glyphWidth - currLen) / pathCmd.pathLength;\n                            }\n                            else {\n                                currentT -= (currLen - glyphWidth) / pathCmd.pathLength;\n                            }\n\n                            if(currentT > 1.0) {\n                                currentT = 1.0;\n                                needNewSegment = true;\n                            }\n                            p1 = Konva.Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);\n                            break;\n\n                    }\n\n                    if(p1 !== undefined) {\n                        currLen = Konva.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\n                    }\n\n                    if(needNewSegment) {\n                        needNewSegment = false;\n                        pathCmd = undefined;\n                    }\n                }\n            };\n            for(var i = 0; i < charArr.length; i++) {\n\n                // Find p1 such that line segment between p0 and p1 is approx. width of glyph\n                findSegmentToFitCharacter(charArr[i]);\n\n                if(p0 === undefined || p1 === undefined) {\n                    break;\n                }\n\n                var width = Konva.Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\n\n                // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.\n                // Can foresee having a rough pair table built in that the developer can override as needed.\n\n                var kern = 0;\n                // placeholder for future implementation\n\n                var midpoint = Konva.Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);\n\n                var rotation = Math.atan2((p1.y - p0.y), (p1.x - p0.x));\n                this.glyphInfo.push({\n                    transposeX: midpoint.x,\n                    transposeY: midpoint.y,\n                    text: charArr[i],\n                    rotation: rotation,\n                    p0: p0,\n                    p1: p1\n                });\n                p0 = p1;\n            }\n        },\n        getSelfRect: function() {\n            var points = [];\n            var fontSize = this.fontSize();\n\n            this.glyphInfo.forEach(function(info) {\n                points.push(info.p0.x);\n                points.push(info.p0.y);\n                points.push(info.p1.x);\n                points.push(info.p1.y);\n            });\n            var minX = points[0];\n            var maxX = points[0];\n            var minY = points[0];\n            var maxY = points[0];\n            var x, y;\n            for (var i = 0; i < points.length / 2; i++) {\n                x = points[i * 2]; y = points[i * 2 + 1];\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n            return {\n                x: Math.round(minX) - fontSize,\n                y: Math.round(minY) - fontSize,\n                width: Math.round(maxX - minX) + fontSize * 2,\n                height: Math.round(maxY - minY) + fontSize * 2\n            };\n        }\n    };\n\n    // map TextPath methods to Text\n    Konva.TextPath.prototype._getContextFont = Konva.Text.prototype._getContextFont;\n\n    Konva.Util.extend(Konva.TextPath, Konva.Shape);\n\n    // add setters and getters\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontFamily', 'Arial');\n\n    /**\n     * set font family\n     * @name setFontFamily\n     * @method\n     * @memberof Konva.TextPath.prototype\n     * @param {String} fontFamily\n     */\n\n     /**\n     * get font family\n     * @name getFontFamily\n     * @method\n     * @memberof Konva.TextPath.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontSize', 12);\n\n    /**\n     * set font size\n     * @name setFontSize\n     * @method\n     * @memberof Konva.TextPath.prototype\n     * @param {int} fontSize\n     */\n\n     /**\n     * get font size\n     * @name getFontSize\n     * @method\n     * @memberof Konva.TextPath.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontStyle', NORMAL);\n\n    /**\n     * set font style.  Can be 'normal', 'italic', or 'bold'.  'normal' is the default.\n     * @name setFontStyle\n     * @method\n     * @memberof Konva.TextPath.prototype\n     * @param {String} fontStyle\n     */\n\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'letterSpacing', 0);\n\n     /**\n      * set letter spacing property. Default value is 0.\n      * @name letterSpacing\n      * @method\n      * @memberof Konva.TextPath.prototype\n      * @param {Number} letterSpacing\n      */\n\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'textBaseline', 'middle');\n\n     /**\n      * set textBaseline property. Default value is 'middle'.\n      * Can be 'top', 'bottom', 'middle', 'alphabetic', 'hanging'\n      * @name textBaseline\n      * @method\n      * @memberof Konva.TextPath.prototype\n      * @param {Number} textBaseline\n      */\n\n     /**\n     * get font style\n     * @name getFontStyle\n     * @method\n     * @memberof Konva.TextPath.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.TextPath, 'fontVariant', NORMAL);\n\n\n\n    /**\n     * set font variant.  Can be 'normal' or 'small-caps'.  'normal' is the default.\n     * @name setFontVariant\n     * @method\n     * @memberof Konva.TextPath.prototype\n     * @param {String} fontVariant\n     */\n\n    /**\n     * @get font variant\n     * @name getFontVariant\n     * @method\n     * @memberof Konva.TextPath.prototype\n     */\n\n    Konva.Factory.addGetter(Konva.TextPath, 'text', EMPTY_STRING);\n\n    /**\n     * get text\n     * @name getText\n     * @method\n     * @memberof Konva.TextPath.prototype\n     */\n\n    Konva.Collection.mapMethods(Konva.TextPath);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * RegularPolygon constructor.&nbsp; Examples include triangles, squares, pentagons, hexagons, etc.\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Number} config.sides\n     * @param {Number} config.radius\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var hexagon = new Konva.RegularPolygon({\n     *   x: 100,\n     *   y: 200,\n     *   sides: 6,\n     *   radius: 70,\n     *   fill: 'red',\n     *   stroke: 'black',\n     *   strokeWidth: 4\n     * });\n     */\n    Konva.RegularPolygon = function(config) {\n        this.___init(config);\n    };\n\n    Konva.RegularPolygon.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'RegularPolygon';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var sides = this.attrs.sides,\n                radius = this.attrs.radius,\n                n, x, y;\n\n            context.beginPath();\n            context.moveTo(0, 0 - radius);\n\n            for(n = 1; n < sides; n++) {\n                x = radius * Math.sin(n * 2 * Math.PI / sides);\n                y = -1 * radius * Math.cos(n * 2 * Math.PI / sides);\n                context.lineTo(x, y);\n            }\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        getWidth: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.radius() !== width / 2) {\n                this.setRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.radius() !== height / 2) {\n                this.setRadius(height / 2);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.RegularPolygon, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.RegularPolygon, 'radius', 0);\n\n    /**\n     * set radius\n     * @name setRadius\n     * @method\n     * @memberof Konva.RegularPolygon.prototype\n     * @param {Number} radius\n     */\n\n     /**\n     * get radius\n     * @name getRadius\n     * @method\n     * @memberof Konva.RegularPolygon.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.RegularPolygon, 'sides', 0);\n\n    /**\n     * set number of sides\n     * @name setSides\n     * @method\n     * @memberof Konva.RegularPolygon.prototype\n     * @param {int} sides\n     */\n\n    /**\n     * get number of sides\n     * @name getSides\n     * @method\n     * @memberof Konva.RegularPolygon.prototype\n     */\n\n    Konva.Collection.mapMethods(Konva.RegularPolygon);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Star constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Integer} config.numPoints\n     * @param {Number} config.innerRadius\n     * @param {Number} config.outerRadius\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var star = new Konva.Star({\n     *   x: 100,\n     *   y: 200,\n     *   numPoints: 5,\n     *   innerRadius: 70,\n     *   outerRadius: 70,\n     *   fill: 'red',\n     *   stroke: 'black',\n     *   strokeWidth: 4\n     * });\n     */\n    Konva.Star = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Star.prototype = {\n        _centroid: true,\n        ___init: function(config) {\n            // call super constructor\n            Konva.Shape.call(this, config);\n            this.className = 'Star';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var innerRadius = this.innerRadius(),\n                outerRadius = this.outerRadius(),\n                numPoints = this.numPoints();\n\n            context.beginPath();\n            context.moveTo(0, 0 - outerRadius);\n\n            for(var n = 1; n < numPoints * 2; n++) {\n                var radius = n % 2 === 0 ? outerRadius : innerRadius;\n                var x = radius * Math.sin(n * Math.PI / numPoints);\n                var y = -1 * radius * Math.cos(n * Math.PI / numPoints);\n                context.lineTo(x, y);\n            }\n            context.closePath();\n\n            context.fillStrokeShape(this);\n        },\n        // implements Shape.prototype.getWidth()\n        getWidth: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.getHeight()\n        getHeight: function() {\n            return this.getOuterRadius() * 2;\n        },\n        // implements Shape.prototype.setWidth()\n        setWidth: function(width) {\n            Konva.Node.prototype.setWidth.call(this, width);\n            if (this.outerRadius() !== width / 2) {\n                this.setOuterRadius(width / 2);\n            }\n        },\n        // implements Shape.prototype.setHeight()\n        setHeight: function(height) {\n            Konva.Node.prototype.setHeight.call(this, height);\n            if (this.outerRadius() !== height / 2) {\n                this.setOuterRadius(height / 2);\n            }\n        }\n    };\n    Konva.Util.extend(Konva.Star, Konva.Shape);\n\n    // add getters setters\n    Konva.Factory.addGetterSetter(Konva.Star, 'numPoints', 5);\n\n    /**\n     * set number of points\n     * @name setNumPoints\n     * @method\n     * @memberof Konva.Star.prototype\n     * @param {Integer} points\n     */\n\n     /**\n     * get number of points\n     * @name getNumPoints\n     * @method\n     * @memberof Konva.Star.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Star, 'innerRadius', 0);\n\n    /**\n     * set inner radius\n     * @name setInnerRadius\n     * @method\n     * @memberof Konva.Star.prototype\n     * @param {Number} radius\n     */\n\n     /**\n     * get inner radius\n     * @name getInnerRadius\n     * @method\n     * @memberof Konva.Star.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Star, 'outerRadius', 0);\n\n    /**\n     * set outer radius\n     * @name setOuterRadius\n     * @method\n     * @memberof Konva.Star.prototype\n     * @param {Number} radius\n     */\n\n     /**\n     * get outer radius\n     * @name getOuterRadius\n     * @method\n     * @memberof Konva.Star.prototype\n     */\n\n    Konva.Collection.mapMethods(Konva.Star);\n})();\n\n(function() {\n    'use strict';\n    // constants\n    var ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'padding', 'lineHeight', 'text'],\n        CHANGE_KONVA = 'Change.konva',\n        NONE = 'none',\n        UP = 'up',\n        RIGHT = 'right',\n        DOWN = 'down',\n        LEFT = 'left',\n        LABEL = 'Label',\n\n     // cached variables\n     attrChangeListLen = ATTR_CHANGE_LIST.length;\n\n    /**\n     * Label constructor.&nbsp; Labels are groups that contain a Text and Tag shape\n     * @constructor\n     * @memberof Konva\n     * @param {Object} config\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * // create label\n     * var label = new Konva.Label({\n     *   x: 100,\n     *   y: 100,\n     *   draggable: true\n     * });\n     *\n     * // add a tag to the label\n     * label.add(new Konva.Tag({\n     *   fill: '#bbb',\n     *   stroke: '#333',\n     *   shadowColor: 'black',\n     *   shadowBlur: 10,\n     *   shadowOffset: [10, 10],\n     *   shadowOpacity: 0.2,\n     *   lineJoin: 'round',\n     *   pointerDirection: 'up',\n     *   pointerWidth: 20,\n     *   pointerHeight: 20,\n     *   cornerRadius: 5\n     * }));\n     *\n     * // add text to the label\n     * label.add(new Konva.Text({\n     *   text: 'Hello World!',\n     *   fontSize: 50,\n     *   lineHeight: 1.2,\n     *   padding: 10,\n     *   fill: 'green'\n     *  }));\n     */\n    Konva.Label = function(config) {\n        this.____init(config);\n    };\n\n    Konva.Label.prototype = {\n        ____init: function(config) {\n            var that = this;\n\n            Konva.Group.call(this, config);\n            this.className = LABEL;\n\n            this.on('add.konva', function(evt) {\n                that._addListeners(evt.child);\n                that._sync();\n            });\n        },\n        /**\n         * get Text shape for the label.  You need to access the Text shape in order to update\n         * the text properties\n         * @name getText\n         * @method\n         * @memberof Konva.Label.prototype\n         */\n        getText: function() {\n            return this.find('Text')[0];\n        },\n        /**\n         * get Tag shape for the label.  You need to access the Tag shape in order to update\n         * the pointer properties and the corner radius\n         * @name getTag\n         * @method\n         * @memberof Konva.Label.prototype\n         */\n        getTag: function() {\n            return this.find('Tag')[0];\n        },\n        _addListeners: function(text) {\n            var that = this,\n                n;\n            var func = function(){\n                    that._sync();\n                };\n\n            // update text data for certain attr changes\n            for(n = 0; n < attrChangeListLen; n++) {\n                text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);\n            }\n        },\n        getWidth: function() {\n            return this.getText().getWidth();\n        },\n        getHeight: function() {\n            return this.getText().getHeight();\n        },\n        _sync: function() {\n            var text = this.getText(),\n                tag = this.getTag(),\n                width, height, pointerDirection, pointerWidth, x, y, pointerHeight;\n\n            if (text && tag) {\n                width = text.getWidth();\n                height = text.getHeight();\n                pointerDirection = tag.getPointerDirection();\n                pointerWidth = tag.getPointerWidth();\n                pointerHeight = tag.getPointerHeight();\n                x = 0;\n                y = 0;\n\n                switch(pointerDirection) {\n                    case UP:\n                        x = width / 2;\n                        y = -1 * pointerHeight;\n                        break;\n                    case RIGHT:\n                        x = width + pointerWidth;\n                        y = height / 2;\n                        break;\n                    case DOWN:\n                        x = width / 2;\n                        y = height + pointerHeight;\n                        break;\n                    case LEFT:\n                        x = -1 * pointerWidth;\n                        y = height / 2;\n                        break;\n                }\n\n                tag.setAttrs({\n                    x: -1 * x,\n                    y: -1 * y,\n                    width: width,\n                    height: height\n                });\n\n                text.setAttrs({\n                    x: -1 * x,\n                    y: -1 * y\n                });\n            }\n        }\n    };\n\n    Konva.Util.extend(Konva.Label, Konva.Group);\n\n    Konva.Collection.mapMethods(Konva.Label);\n\n    /**\n     * Tag constructor.&nbsp; A Tag can be configured\n     *  to have a pointer element that points up, right, down, or left\n     * @constructor\n     * @memberof Konva\n     * @param {Object} config\n     * @param {String} [config.pointerDirection] can be up, right, down, left, or none; the default\n     *  is none.  When a pointer is present, the positioning of the label is relative to the tip of the pointer.\n     * @param {Number} [config.pointerWidth]\n     * @param {Number} [config.pointerHeight]\n     * @param {Number} [config.cornerRadius]\n     */\n    Konva.Tag = function(config) {\n        this.___init(config);\n    };\n\n    Konva.Tag.prototype = {\n        ___init: function(config) {\n            Konva.Shape.call(this, config);\n            this.className = 'Tag';\n            this.sceneFunc(this._sceneFunc);\n        },\n        _sceneFunc: function(context) {\n            var width = this.getWidth(),\n                height = this.getHeight(),\n                pointerDirection = this.getPointerDirection(),\n                pointerWidth = this.getPointerWidth(),\n                pointerHeight = this.getPointerHeight(),\n                cornerRadius = Math.min(this.getCornerRadius(), width / 2, height / 2);\n\n            context.beginPath();\n            if (!cornerRadius) {\n                context.moveTo(0, 0);\n            } else {\n                context.moveTo(cornerRadius, 0);\n            }\n\n            if (pointerDirection === UP) {\n                context.lineTo((width - pointerWidth) / 2, 0);\n                context.lineTo(width / 2, -1 * pointerHeight);\n                context.lineTo((width + pointerWidth) / 2, 0);\n            }\n\n            if(!cornerRadius) {\n                context.lineTo(width, 0);\n            } else {\n                context.lineTo(width - cornerRadius, 0);\n                context.arc(width - cornerRadius, cornerRadius, cornerRadius, Math.PI * 3 / 2, 0, false);\n            }\n\n            if (pointerDirection === RIGHT) {\n                context.lineTo(width, (height - pointerHeight) / 2);\n                context.lineTo(width + pointerWidth, height / 2);\n                context.lineTo(width, (height + pointerHeight) / 2);\n            }\n\n            if(!cornerRadius) {\n                context.lineTo(width, height);\n            } else {\n                context.lineTo(width, height - cornerRadius);\n                context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);\n            }\n\n            if (pointerDirection === DOWN) {\n                context.lineTo((width + pointerWidth) / 2, height);\n                context.lineTo(width / 2, height + pointerHeight);\n                context.lineTo((width - pointerWidth) / 2, height);\n            }\n\n            if(!cornerRadius) {\n                context.lineTo(0, height);\n            } else {\n                context.lineTo(cornerRadius, height);\n                context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);\n            }\n\n            if (pointerDirection === LEFT) {\n                context.lineTo(0, (height + pointerHeight) / 2);\n                context.lineTo(-1 * pointerWidth, height / 2);\n                context.lineTo(0, (height - pointerHeight) / 2);\n            }\n\n            if(cornerRadius) {\n                context.lineTo(0, cornerRadius);\n                context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, Math.PI * 3 / 2, false);\n            }\n\n            context.closePath();\n            context.fillStrokeShape(this);\n        },\n        getSelfRect: function() {\n            var x = 0,\n                y = 0,\n                pointerWidth = this.getPointerWidth(),\n                pointerHeight = this.getPointerHeight(),\n                direction = this.pointerDirection(),\n                width = this.getWidth(),\n                height = this.getHeight();\n\n            if (direction === UP) {\n                y -= pointerHeight;\n                height += pointerHeight;\n            } else if (direction === DOWN) {\n                height += pointerHeight;\n            } else if (direction === LEFT) {\n                // ARGH!!! I have no idea why should I used magic 1.5!!!!!!!!!\n                x -= pointerWidth * 1.5;\n                width += pointerWidth;\n            } else if (direction === RIGHT) {\n                width += pointerWidth * 1.5;\n            }\n            return {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            };\n        }\n    };\n\n    Konva.Util.extend(Konva.Tag, Konva.Shape);\n    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerDirection', NONE);\n\n    /**\n     * set pointer Direction\n     * @name setPointerDirection\n     * @method\n     * @memberof Konva.Tag.prototype\n     * @param {String} pointerDirection can be up, right, down, left, or none.  The\n     *  default is none\n     */\n\n     /**\n     * get pointer Direction\n     * @name getPointerDirection\n     * @method\n     * @memberof Konva.Tag.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerWidth', 0);\n\n    /**\n     * set pointer width\n     * @name setPointerWidth\n     * @method\n     * @memberof Konva.Tag.prototype\n     * @param {Number} pointerWidth\n     */\n\n     /**\n     * get pointer width\n     * @name getPointerWidth\n     * @method\n     * @memberof Konva.Tag.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Tag, 'pointerHeight', 0);\n\n    /**\n     * set pointer height\n     * @name setPointerHeight\n     * @method\n     * @memberof Konva.Tag.prototype\n     * @param {Number} pointerHeight\n     */\n\n     /**\n     * get pointer height\n     * @name getPointerHeight\n     * @method\n     * @memberof Konva.Tag.prototype\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Tag, 'cornerRadius', 0);\n\n    /**\n     * set corner radius\n     * @name setCornerRadius\n     * @method\n     * @memberof Konva.Tag.prototype\n     * @param {Number} corner radius\n     */\n\n    /**\n     * get corner radius\n     * @name getCornerRadius\n     * @method\n     * @memberof Konva.Tag.prototype\n     */\n\n    Konva.Collection.mapMethods(Konva.Tag);\n})();\n\n(function() {\n    'use strict';\n    /**\n     * Arrow constructor\n     * @constructor\n     * @memberof Konva\n     * @augments Konva.Shape\n     * @param {Object} config\n     * @param {Array} config.points\n     * @param {Number} [config.tension] Higher values will result in a more curvy line.  A value of 0 will result in no interpolation.\n     *   The default is 0\n     * @param {Number} config.pointerLength\n     * @param {Number} config.pointerWidth\n     * @param {String} [config.fill] fill color\n     * @param {Image} [config.fillPatternImage] fill pattern image\n     * @param {Number} [config.fillPatternX]\n     * @param {Number} [config.fillPatternY]\n     * @param {Object} [config.fillPatternOffset] object with x and y component\n     * @param {Number} [config.fillPatternOffsetX] \n     * @param {Number} [config.fillPatternOffsetY] \n     * @param {Object} [config.fillPatternScale] object with x and y component\n     * @param {Number} [config.fillPatternScaleX]\n     * @param {Number} [config.fillPatternScaleY]\n     * @param {Number} [config.fillPatternRotation]\n     * @param {String} [config.fillPatternRepeat] can be \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\".  The default is \"no-repeat\"\n     * @param {Object} [config.fillLinearGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientStartPointX]\n     * @param {Number} [config.fillLinearGradientStartPointY]\n     * @param {Object} [config.fillLinearGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillLinearGradientEndPointX]\n     * @param {Number} [config.fillLinearGradientEndPointY]\n     * @param {Array} [config.fillLinearGradientColorStops] array of color stops\n     * @param {Object} [config.fillRadialGradientStartPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientStartPointX]\n     * @param {Number} [config.fillRadialGradientStartPointY]\n     * @param {Object} [config.fillRadialGradientEndPoint] object with x and y component\n     * @param {Number} [config.fillRadialGradientEndPointX] \n     * @param {Number} [config.fillRadialGradientEndPointY] \n     * @param {Number} [config.fillRadialGradientStartRadius]\n     * @param {Number} [config.fillRadialGradientEndRadius]\n     * @param {Array} [config.fillRadialGradientColorStops] array of color stops\n     * @param {Boolean} [config.fillEnabled] flag which enables or disables the fill.  The default value is true\n     * @param {String} [config.fillPriority] can be color, linear-gradient, radial-graident, or pattern.  The default value is color.  The fillPriority property makes it really easy to toggle between different fill types.  For example, if you want to toggle between a fill color style and a fill pattern style, simply set the fill property and the fillPattern properties, and then use setFillPriority('color') to render the shape with a color fill, or use setFillPriority('pattern') to render the shape with the pattern fill configuration\n     * @param {String} [config.stroke] stroke color\n     * @param {Number} [config.strokeWidth] stroke width\n     * @param {Boolean} [config.strokeHitEnabled] flag which enables or disables stroke hit region.  The default is true\n     * @param {Boolean} [config.perfectDrawEnabled] flag which enables or disables using buffer canvas.  The default is true\n     * @param {Boolean} [config.shadowForStrokeEnabled] flag which enables or disables shasow for stroke.  The default is true\n     * @param {Boolean} [config.strokeScaleEnabled] flag which enables or disables stroke scale.  The default is true\n     * @param {Boolean} [config.strokeEnabled] flag which enables or disables the stroke.  The default value is true\n     * @param {String} [config.lineJoin] can be miter, round, or bevel.  The default\n     *  is miter\n     * @param {String} [config.lineCap] can be butt, round, or sqare.  The default\n     *  is butt\n     * @param {String} [config.shadowColor]\n     * @param {Number} [config.shadowBlur]\n     * @param {Object} [config.shadowOffset] object with x and y component\n     * @param {Number} [config.shadowOffsetX]\n     * @param {Number} [config.shadowOffsetY]\n     * @param {Number} [config.shadowOpacity] shadow opacity.  Can be any real number\n     *  between 0 and 1\n     * @param {Boolean} [config.shadowEnabled] flag which enables or disables the shadow.  The default value is true\n     * @param {Array} [config.dash]\n     * @param {Boolean} [config.dashEnabled] flag which enables or disables the dashArray.  The default value is true\n     * @param {Number} [config.x]\n     * @param {Number} [config.y]\n     * @param {Number} [config.width]\n     * @param {Number} [config.height]\n     * @param {Boolean} [config.visible]\n     * @param {Boolean} [config.listening] whether or not the node is listening for events\n     * @param {String} [config.id] unique id\n     * @param {String} [config.name] non-unique name\n     * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\n     * @param {Object} [config.scale] set scale\n     * @param {Number} [config.scaleX] set scale x\n     * @param {Number} [config.scaleY] set scale y\n     * @param {Number} [config.rotation] rotation in degrees\n     * @param {Object} [config.offset] offset from center point and rotation point\n     * @param {Number} [config.offsetX] set offset x\n     * @param {Number} [config.offsetY] set offset y\n     * @param {Boolean} [config.draggable] makes the node draggable.  When stages are draggable, you can drag and drop\n     *  the entire stage by dragging any portion of the stage\n     * @param {Number} [config.dragDistance]\n     * @param {Function} [config.dragBoundFunc]\n     * @example\n     * var line = new Konva.Line({\n     *   points: [73, 70, 340, 23, 450, 60, 500, 20],\n     *   stroke: 'red',\n     *   tension: 1,\n     *   pointerLength : 10,\n     *   pointerWidth : 12\n     * });\n     */\n    Konva.Arrow = function(config) {\n        this.____init(config);\n    };\n\n    Konva.Arrow.prototype = {\n        ____init: function(config) {\n            // call super constructor\n            Konva.Line.call(this, config);\n            this.className = 'Arrow';\n        },\n        _sceneFunc: function(ctx) {\n            Konva.Line.prototype._sceneFunc.apply(this, arguments);\n            var PI2 = Math.PI * 2;\n            var points = this.points();\n            var n = points.length;\n            var dx = points[n - 2] - points[n - 4];\n            var dy = points[n - 1] - points[n - 3];\n            var radians = (Math.atan2(dy, dx) + PI2) % PI2;\n            var length = this.pointerLength();\n            var width = this.pointerWidth();\n\n            ctx.save();\n            ctx.beginPath();\n            ctx.translate(points[n - 2], points[n - 1]);\n            ctx.rotate(radians);\n            ctx.moveTo(0, 0);\n            ctx.lineTo(-length, width / 2);\n            ctx.lineTo(-length, -width / 2);\n            ctx.closePath();\n            ctx.restore();\n\n            if (this.pointerAtBeginning()) {\n                ctx.save();\n                ctx.translate(points[0], points[1]);\n                dx = points[2] - points[0];\n                dy = points[3] - points[1];\n                ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);\n                ctx.moveTo(0, 0);\n                ctx.lineTo(-length, width / 2);\n                ctx.lineTo(-length, -width / 2);\n                ctx.closePath();\n                ctx.restore();\n            }\n            ctx.fillStrokeShape(this);\n        }\n    };\n\n    Konva.Util.extend(Konva.Arrow, Konva.Line);\n    /**\n     * get/set pointerLength\n     * @name pointerLength\n     * @method\n     * @memberof Konva.Arrow.prototype\n     * @param {Number} Length of pointer of arrow.\n     *   The default is 10.\n     * @returns {Number}\n     * @example\n     * // get tension\n     * var pointerLength = line.pointerLength();\n     *\n     * // set tension\n     * line.pointerLength(15);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerLength', 10);\n    /**\n     * get/set pointerWidth\n     * @name pointerWidth\n     * @method\n     * @memberof Konva.Arrow.prototype\n     * @param {Number} Width of pointer of arrow.\n     *   The default is 10.\n     * @returns {Number}\n     * @example\n     * // get tension\n     * var pointerWidth = line.pointerWidth();\n     *\n     * // set tension\n     * line.pointerWidth(15);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerWidth', 10);\n    /**\n     * get/set pointerAtBeginning\n     * @name pointerAtBeginning\n     * @method\n     * @memberof Konva.Arrow.prototype\n     * @param {Number} Should pointer displayed at beginning of arrow.\n     *   The default is false.\n     * @returns {Boolean}\n     * @example\n     * // get tension\n     * var pointerAtBeginning = line.pointerAtBeginning();\n     *\n     * // set tension\n     * line.pointerAtBeginning(true);\n     */\n\n    Konva.Factory.addGetterSetter(Konva.Arrow, 'pointerAtBeginning', false);\n    Konva.Collection.mapMethods(Konva.Arrow);\n\n})();\n","/*global exports, require*/\n'use strict';\nvar app = angular.module('smellycode', [\n  require('angular-ui-router'),\n  require('./modules/home').name,\n  require('./modules/components/aquarium').name,\n  'hljs'\n]);\n\napp.constant('Routes', [\n  {\n    id: '1',\n    url: 'angular-extend-copy-merge.html'\n  }\n]);\n\napp.config(['Routes', '$stateProvider', '$urlRouterProvider', function (Routes, $stateProvider, $urlRouterProvider) {\n  var base = 'static/views/';\n  Routes.forEach(function (route) {\n    var state = {\n      url: '/' + route.url,\n      templateUrl: base + route.url\n    };\n    $stateProvider.state(route.id, state);\n  });\n  $urlRouterProvider.otherwise('/home');\n}]);\n\napp.controller('MainController', ['PageMeta', function (PageMeta) {\n  var ctrl = this;\n  var title = 'Smelly Code | Code which smells';\n  ctrl.PageMeta = PageMeta;\n  ctrl.PageMeta.setTitle(title);\n}]);\napp.service('PageMeta', [function () {\n  var meta = this;\n  meta.title = '';\n  this.setTitle = function (title) {\n    meta.title = title || meta.title;\n    return meta;\n  };\n}]);\nmodule.exports = app;","/*global require, module*/\n'use strict';\n// TODO: Include ngResource and use it instead of $http calls.\nvar app = angular.module('smellycode.api', []);\n\napp.factory('QuoteFactory', ['$http', '$q', function ($http, $q) {\n  var api = 'http://quotes.stormconsultancy.co.uk/random.json';\n  var factory = {\n    get: function () {\n      var deferred = $q.defer();\n      $http.get(api).then(function (response) {\n          var quote = response.data;\n          deferred.resolve(quote);\n        })\n        .catch(deferred.reject);\n      return deferred.promise;\n    }\n  };\n  return factory;\n}]);\n\napp.service('PostStore', ['$http', '$q', function ($http, $q) {\n  var api = 'assets/json/posts.json';\n  var service = this;\n  //private\n  var _posts = [];\n  var PAGE_SIZE = 10;\n  var currentPage = 1;\n\n  service.posts = [];\n  service.next = null;\n\n  service.fetch = function () {\n    var deferred = $q.defer();\n    $http.get(api).then(function (response) {\n        _posts = response.data;\n        Array.prototype.push.apply(service.posts, _posts.slice(0, PAGE_SIZE));\n        service.next = _posts.length < PAGE_SIZE ? null : PAGE_SIZE;\n        deferred.resolve(service.posts);\n        console.log(service.posts);\n      })\n      .catch(function (error) {\n        deferred.reject(error);\n      });\n    return deferred.promise;\n  };\n\n  service.loadMore = function () {\n    if (service.next === null) {\n      // no post to load;\n      return;\n    }\n    currentPage += 1;\n    var newPosts = _posts.slice(service.next, PAGE_SIZE);\n    service.next = newPosts.length < PAGE_SIZE ? null : service.next + PAGE_SIZE;\n    Array.prototype.push.apply(service.posts, newPosts);\n  };\n\n  service.fetch();\n\n}]);\n\nmodule.exports = app;","/*global module, require, document, Image*/\n'use strict';\nvar Konva = require('konva');\n\nvar app = angular.module('smellycode.components.aquarium', []);\nmodule.exports = app;\napp.service('AquariumUtil', [function () {\n\n  var service = this;\n\n  function getRandom(number) {\n    return Math.random() * number << 0;\n  }\n\n  function getRandomInRange(min, max) {\n    var diff = max - min;\n    var number = Math.random() * diff << 0;\n    number += min;\n    return number;\n  }\n\n  service.getRandomNumber = function (min, max) {\n    var fn = arguments.length === 1 ? getRandom : getRandomInRange;\n    return fn.apply(service, arguments);\n  };\n\n}]);\n\napp.controller('AquariumController', [\n  '$interval',\n  'AquariumUtil',\n  function (\n    $interval,\n    AquariumUtil\n  ) {\n    var vm = this;\n    var containerId = 'aquarium';\n    var stage;\n    var layer;\n    var xMax;\n    var yMax;\n    var stars = [];\n    var intervalId;\n\n    function addStars() {\n      for (var i = 0; i < stars.length; i += 1) {\n        var scale = Math.random();\n        var star = new Konva.Star({\n          x: AquariumUtil.getRandomNumber(10, xMax),\n          y: AquariumUtil.getRandomNumber(10, yMax),\n          numPoints: AquariumUtil.getRandomNumber(i) + 5,\n          innerRadius: 30,\n          outerRadius: 50,\n          fill: Konva.Util.getRandomColor(),\n          opacity: 0.8,\n          scale: {\n            x: scale,\n            y: scale\n          },\n          rotation: Math.random() * 180,\n          shadowColor: 'black',\n          shadowBlur: 10,\n          shadowOffset: {\n            x: 5,\n            y: 5\n          },\n          shadowOpacity: 0.6,\n          startScale: scale\n        });\n        layer.add(star);\n        stars[i] = star;\n      }\n    }\n\n    function initialise() {\n      var element = document.getElementById(containerId);\n      xMax = element.offsetWidth;\n      yMax = element.offsetHeight;\n      // 10 percent stars of the max width;\n      stars.length = 0.1 * xMax << 0;\n      stage = new Konva.Stage({\n        container: containerId,\n        width: xMax,\n        height: yMax\n      });\n      layer = new Konva.Layer();\n      stage.add(layer);\n    }\n\n    function startCycle() {\n      return $interval(function () {\n        var index = AquariumUtil.getRandomNumber(stars.length);\n        var star = stars[index];\n        var scale = Math.random();\n        star.moveToTop();\n        var tween = new Konva.Tween({\n          node: star,\n          duration: 5,\n          easing: Konva.Easings.EaseInOut,\n          rotation: AquariumUtil.getRandomNumber(50, 360),\n          fill: Konva.Util.getRandomColor(),\n          scale: {\n            x: scale,\n            y: scale\n          },\n          x: AquariumUtil.getRandomNumber(10, xMax),\n          y: AquariumUtil.getRandomNumber(10, yMax)\n        });\n        tween.play();\n      }, 1000);\n    }\n\n    function clearInterval() {\n      if (intervalId) {\n        $interval.cancel(intervalId);\n      }\n    }\n    \n    function addBackground(){\n      var image = new Image();\n      image.onload = function(){\n        var kImage = new Konva.Image({\n          image: image,\n          x: 0,\n          y: 0,\n          width: xMax,\n          height: yMax\n        });\n        layer.add(kImage);\n        kImage.moveToBottom();\n        layer.draw();\n      };\n      image.src = 'assets/rainbow.png';\n    }\n\n    vm.$postLink = function () {\n      initialise();\n      addBackground();\n      addStars();\n      intervalId = startCycle();\n      layer.draw();\n    };\n    vm.$onDestroy = function () {\n      clearInterval();\n    };\n\n}]);\napp.component('aquarium', {\n  template: '<div id=\"aquarium\" class=\"theme__aquarium\"></div>',\n  controller: 'AquariumController'\n});","/*global module*/\n'use strict';\n\nfunction HomeController(\n  $scope,\n  $log,\n  QuoteFactory,\n  PostStore\n) {\n    $scope.posts = PostStore.posts;\n}\n\nmodule.exports = [\n  '$scope',\n  '$log',\n  'QuoteFactory',\n  'PostStore',\n  HomeController\n];","/*global require, exports*/\n'use strict';\nvar app = angular.module('smellycode.home', [\n  require('angular-ui-router'),\n  require('../api').name\n]);\napp.config(['$stateProvider', function($stateProvider){\n  $stateProvider.state('home', {\n    url: '/home',\n    templateUrl: 'static/modules/home/home.tpl.html',\n    controller: 'HomeController'\n  });  \n}]);\napp.controller('HomeController', require('./controller'));\nmodule.exports = app;"]}